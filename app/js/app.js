(()=>{var e={726:()=>{function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],s=t.dataset.da.trim().split(","),i={};i.element=t,i.parent=t.parentNode,i.destination=document.querySelector(s[0].trim()),i.breakpoint=s[1]?s[1].trim():"767",i.place=s[2]?s[2].trim():"last",i.index=this.indexInParent(i.parent,i.element),this.оbjects.push(i)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,s){return Array.prototype.indexOf.call(s,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const s=this.mediaQueries[t],i=String.prototype.split.call(s,","),a=window.matchMedia(i[0]),r=i[1],n=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===r}));a.addListener((function(){e.mediaHandler(a,n)})),this.mediaHandler(a,n)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const s=t[e];s.index=this.indexInParent(s.parent,s.element),this.moveTo(s.place,s.element,s.destination)}else for(let e=t.length-1;e>=0;e--){const s=t[e];s.element.classList.contains(this.daClassname)&&this.moveBack(s.parent,s.element,s.index)}},e.prototype.moveTo=function(e,t,s){t.classList.add(this.daClassname),"last"===e||e>=s.children.length?s.insertAdjacentElement("beforeend",t):"first"!==e?s.children[e].insertAdjacentElement("beforebegin",t):s.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,s){t.classList.remove(this.daClassname),void 0!==e.children[s]?e.children[s].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const s=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(s,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},23:()=>{if(document.getElementById("map")){window.map=null,async function(){await ymaps3.ready;const e={center:window.innerWidth>768?[30.29070872801772,59.96487327442857]:[30.285804994973198,59.96628435583354],zoom:15},t={center:[30.286780500000003,59.96677256415152],zoom:15},{YMap:s,YMapDefaultSchemeLayer:i,YMapDefaultFeaturesLayer:a,YMapMarker:r}=ymaps3,n=new s(document.getElementById("map"),{location:e});n.addChild(new i),n.addChild(new a);const l=document.createElement("img");l.className="marker",l.src="../app/img/icons/pin.svg",l.onclick=()=>n.update({location:{...t,duration:400}}),n.addChild(new r({coordinates:t.center},l))}()}}},t={};function s(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}(()=>{"use strict";let e=!0;const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),t),e=!1,setTimeout((function(){e=!0}),t))},i=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(document.documentElement.classList.add("lock"),e=!1,setTimeout((function(){e=!0}),t))},a=()=>{i(),document.documentElement.classList.add("_menu-opened")},r=()=>{t(),document.documentElement.classList.remove("_menu-opened")},n=(e,t)=>{for(var s=0;s<e.length;s++)e[s].classList.remove(t)},l=e=>window.innerWidth>768?.005208335*window.innerWidth*e:100/390*(.1*window.innerWidth)*e;let o=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;e.classList.contains("_slide")||(e.classList.add("_slide"),e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=`${e.offsetHeight}px`,e.offsetHeight,e.style.overflow="hidden",e.style.height=s?`${s}px`:"0px",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,window.setTimeout((()=>{e.hidden=!s,!s&&e.style.removeProperty("height"),e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),!s&&e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideUpDone",{detail:{target:e}}))}),t))},d=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;return e.hidden?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(!e.classList.contains("_slide")){e.classList.add("_slide"),e.hidden=!e.hidden&&null,s&&e.style.removeProperty("height");let i=e.offsetHeight;e.style.overflow="hidden",e.style.height=s?`${s}px`:"0px",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,e.offsetHeight,e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=i+"px",e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),window.setTimeout((()=>{e.style.removeProperty("height"),e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideDownDone",{detail:{target:e}}))}),t)}}(e,t):o(e,t)};let c={getErrors(e){let t=0,s=e.querySelectorAll("*[data-required]");return s.length&&s.forEach((e=>{null===e.offsetParent&&"SELECT"!==e.tagName||e.disabled||(t+=this.validateInput(e))})),t},validateInput(e){let t=0;return"email"===e.dataset.required?(e.value=e.value.replace(" ",""),this.emailTest(e)?(this.addError(e),t++):this.removeError(e)):("checkbox"!==e.type||e.checked)&&e.value.trim()?this.removeError(e):(this.addError(e),t++),t},addError(e){e.classList.add("_form-error"),e.parentElement.classList.add("_form-error");let t=e.parentElement.querySelector(".form__error");t&&e.parentElement.removeChild(t),e.dataset.error&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="form__error">${e.dataset.error}</div>`)},removeError(e){e.classList.remove("_form-error"),e.parentElement.classList.remove("_form-error"),e.parentElement.querySelector(".form__error")&&e.parentElement.removeChild(e.parentElement.querySelector(".form__error"))},formClean(e){e.reset(),setTimeout((()=>{let t=e.querySelectorAll("input,textarea");for(let e=0;e<t.length;e++){const s=t[e];s.parentElement.classList.remove("_form-focus"),s.classList.remove("_form-focus"),c.removeError(s)}let s=e.querySelectorAll(".checkbox__input");if(s.length>0)for(let e=0;e<s.length;e++){s[e].checked=!1}}),0)},emailTest:e=>!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)};function p(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function u(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:p(t[s])&&p(e[s])&&Object.keys(t[s]).length>0&&u(e[s],t[s])}))}const h={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function m(){const e="undefined"!=typeof document?document:{};return u(e,h),e}const f={document:h,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function v(){const e="undefined"!=typeof window?window:{};return u(e,f),e}function g(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function b(){return Date.now()}function w(e,t){void 0===t&&(t="x");const s=v();let i,a,r;const n=function(e){const t=v();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(a=n.transform||n.webkitTransform,a.split(",").length>6&&(a=a.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new s.WebKitCSSMatrix("none"===a?"":a)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(",")),"x"===t&&(a=s.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(a=s.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),a||0}function y(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function S(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const a=i<0||arguments.length<=i?void 0:arguments[i];if(null!=a&&(s=a,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(a)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],r=Object.getOwnPropertyDescriptor(a,i);void 0!==r&&r.enumerable&&(y(e[i])&&y(a[i])?a[i].__swiper__?e[i]=a[i]:S(e[i],a[i]):!y(e[i])&&y(a[i])?(e[i]={},a[i].__swiper__?e[i]=a[i]:S(e[i],a[i])):e[i]=a[i])}}}var s;return e}function E(e,t,s){e.style.setProperty(t,s)}function x(e){let{swiper:t,targetPosition:s,side:i}=e;const a=v(),r=-t.translate;let n,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(t.cssModeFrameID);const d=s>r?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{n=(new Date).getTime(),null===l&&(l=n);const e=Math.max(Math.min((n-l)/o,1),0),d=.5-Math.cos(e*Math.PI)/2;let u=r+d*(s-r);if(c(u,s)&&(u=s),t.wrapperEl.scrollTo({[i]:u}),c(u,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:u})})),void a.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=a.requestAnimationFrame(p)};p()}function T(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function C(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function L(e){try{return void console.warn(e)}catch(e){}}function _(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function P(e,t){return v().getComputedStyle(e,null).getPropertyValue(t)}function M(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function A(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function k(e,t,s){const i=v();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let I,$,O;function z(){return I||(I=function(){const e=v(),t=m();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),I}function D(e){return void 0===e&&(e={}),$||($=function(e){let{userAgent:t}=void 0===e?{}:e;const s=z(),i=v(),a=i.navigator.platform,r=t||i.navigator.userAgent,n={ios:!1,android:!1},l=i.screen.width,o=i.screen.height,d=r.match(/(Android);?[\s\/]+([\d.]+)?/);let c=r.match(/(iPad).*OS\s([\d_]+)/);const p=r.match(/(iPod)(.*OS\s([\d_]+))?/),u=!c&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===a;let m="MacIntel"===a;return!c&&m&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(c=r.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),m=!1),d&&!h&&(n.os="android",n.android=!0),(c||u||p)&&(n.os="ios",n.ios=!0),n}(e)),$}function G(){return O||(O=function(){const e=v();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),O}var q={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const a=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function a(){i.off(e,a),a.__emitterProxy&&delete a.__emitterProxy;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];t.apply(i,r)}return a.__emitterProxy=t,i.on(e,a,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,a)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(a,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),i=e):(t=r[0].events,s=r[0].data,i=r[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const B=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},V=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},H=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),a=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=a,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&V(e,s)}))}const r=a+i-1;if(e.params.rewind||e.params.loop)for(let i=a-t;i<=r+t;i+=1){const t=(i%s+s)%s;(t<a||t>r)&&V(e,t)}else for(let i=Math.max(a-t,0);i<=Math.min(r+t,s-1);i+=1)i!==a&&(i>r||i<a)&&V(e,i)};var N={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(P(i,"padding-left")||0,10)-parseInt(P(i,"padding-right")||0,10),s=s-parseInt(P(i,"padding-top")||0,10)-parseInt(P(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:a,size:r,rtlTranslate:n,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=C(a,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let u=[];const h=[],m=[];let f=s.slidesOffsetBefore;"function"==typeof f&&(f=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const g=e.snapGrid.length,b=e.slidesGrid.length;let w=s.spaceBetween,y=-f,S=0,x=0;if(void 0===r)return;"string"==typeof w&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*r:"string"==typeof w&&(w=parseFloat(w)),e.virtualSize=-w,c.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(E(i,"--swiper-centered-offset-before",""),E(i,"--swiper-centered-offset-after",""));const T=s.grid&&s.grid.rows>1&&e.grid;let L;T?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const _="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){let a;if(L=0,c[i]&&(a=c[i]),T&&e.grid.updateSlide(i,a,c),!c[i]||"none"!==P(a,"display")){if("auto"===s.slidesPerView){_&&(c[i].style[e.getDirectionLabel("width")]="");const r=getComputedStyle(a),n=a.style.transform,l=a.style.webkitTransform;if(n&&(a.style.transform="none"),l&&(a.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?k(a,"width",!0):k(a,"height",!0);else{const e=t(r,"width"),s=t(r,"padding-left"),i=t(r,"padding-right"),n=t(r,"margin-left"),l=t(r,"margin-right"),o=r.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+n+l;else{const{clientWidth:t,offsetWidth:r}=a;L=e+s+i+n+l+(r-t)}}n&&(a.style.transform=n),l&&(a.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(r-(s.slidesPerView-1)*w)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),c[i]&&(c[i].style[e.getDirectionLabel("width")]=`${L}px`);c[i]&&(c[i].swiperSlideSize=L),m.push(L),s.centeredSlides?(y=y+L/2+S/2+w,0===S&&0!==i&&(y=y-r/2-w),0===i&&(y=y-r/2-w),Math.abs(y)<.001&&(y=0),s.roundLengths&&(y=Math.floor(y)),x%s.slidesPerGroup==0&&u.push(y),h.push(y)):(s.roundLengths&&(y=Math.floor(y)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&u.push(y),h.push(y),y=y+L+w),e.virtualSize+=L+w,S=L,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+v,n&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+w}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),T&&e.grid.updateWrapperSize(L,u),!s.centeredSlides){const t=[];for(let i=0;i<u.length;i+=1){let a=u[i];s.roundLengths&&(a=Math.floor(a)),u[i]<=e.virtualSize-r&&t.push(a)}u=t,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(o&&s.loop){const t=m[0]+w;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),a=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)u.push(u[u.length-1]+a)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&u.push(u[u.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==w){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${w}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(w||0)})),e-=w;const t=e-r;u=u.map((e=>e<=0?-f:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;if(m.forEach((t=>{e+=t+(w||0)})),e-=w,e<r){const t=(r-e)/2;u.forEach(((e,s)=>{u[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:h,slidesSizesGrid:m}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){E(i,"--swiper-centered-offset-before",-u[0]+"px"),E(i,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let a,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){const e=t.activeIndex+a;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(a=0;a<s.length;a+=1)if(void 0!==s[a]){const e=s[a].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:a,snapGrid:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;a&&(n=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(n-d),h=u+t.slidesSizesGrid[e],m=u>=0&&u<=t.size-t.slidesSizesGrid[e];(u>=0&&u<t.size-1||h>1&&h<=t.size||u<=0&&h>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),m&&i[e].classList.add(s.slideFullyVisibleClass),o.progress=a?-c:c,o.originalProgress=a?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===i)a=0,r=!0,n=!0;else{a=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||a<=0,n=l||a>=1,s&&(a=0),l&&(a=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),a=t.slidesGrid[s],r=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=a?(o-a)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:a,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:a}=e,r=e.virtual&&s.virtual.enabled,n=e.grid&&s.grid&&s.grid.rows>1,l=e=>C(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),r)if(s.loop){let t=a-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${a}"]`);else n?(o=t.filter((e=>e.column===a))[0],c=t.filter((e=>e.column===a+1))[0],d=t.filter((e=>e.column===a-1))[0]):o=t[a];o&&(o.classList.add(s.slideActiveClass),n?(c&&c.classList.add(s.slideNextClass),d&&d.classList.add(s.slidePrevClass)):(c=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),c&&c.classList.add(s.slideNextClass),d=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]),d&&d.classList.add(s.slidePrevClass))),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:a,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let a;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?a=e:i>=t[e]&&i<t[e+1]&&(a=e+1):i>=t[e]&&(a=e);return s.normalizeSlideIndex&&(a<0||void 0===a)&&(a=0),a}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(a.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/a.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===r&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&a.grid&&a.grid.rows>1;let u;if(t.virtual&&a.virtual.enabled&&a.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/a.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:r,activeIndex:d}),t.initialized&&H(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let a=e.closest(`.${i.slideClass}, swiper-slide`);!a&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!a&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(a=e)}));let r,n=!1;if(a)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===a){n=!0,r=e;break}if(!a||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=a,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var F={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:a}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let r=w(a,e);return r+=this.cssOverflowAdjustment(),s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:a,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,a.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,a.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:a.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;const o=r.minTranslate(),d=r.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,r.updateProgress(c),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return x({swiper:r,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function j(e){let{swiper:t,runCallbacks:s,direction:i,step:a}=e;const{activeIndex:r,previousIndex:n}=t;let l=i;if(l||(l=r>n?"next":r<n?"prev":"reset"),t.emit(`transition${a}`),s&&r!==n){if("reset"===l)return void t.emit(`slideResetTransition${a}`);t.emit(`slideChangeTransition${a}`),"next"===l?t.emit(`slideNextTransition${a}`):t.emit(`slidePrevTransition${a}`)}}var R={slideTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:h,enabled:m}=r;if(r.animating&&l.preventInteractionOnTransition||!m&&!i&&!a)return!1;const f=Math.min(r.params.slidesPerGroupSkip,n);let v=f+Math.floor((n-f)/r.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const g=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*g),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?n=e:t>=s&&t<i&&(n=e+1):t>=s&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&(u?g>r.translate&&g>r.minTranslate():g<r.translate&&g<r.minTranslate()))return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(p||0)!==n)return!1}let b;if(n!==(c||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(g),b=n>p?"next":n<p?"prev":"reset",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(g),"reset"!==b&&(r.transitionStart(s,b),r.transitionEnd(s,b)),!1;if(l.cssMode){const e=r.isHorizontal(),s=u?g:-g;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),t&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return x({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(s,b),0===t?r.transitionEnd(s,b):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,b))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const a=this,r=a.grid&&a.params.grid&&a.params.grid.rows>1;let n=e;if(a.params.loop)if(a.virtual&&a.params.virtual.enabled)n+=a.virtual.slidesBefore;else{let e;if(r){const t=n*a.params.grid.rows;e=a.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=a.getSlideIndexByData(n);const t=r?Math.ceil(a.slides.length/a.params.grid.rows):a.slides.length,{centeredSlides:s}=a.params;let i=a.params.slidesPerView;"auto"===i?i=a.slidesPerViewDynamic():(i=Math.ceil(parseFloat(a.params.slidesPerView,10)),s&&i%2==0&&(i+=1));let l=t-e<i;if(s&&(l=l||e<Math.ceil(i/2)),l){const i=s?e<a.activeIndex?"prev":"next":e-a.activeIndex-1<a.params.slidesPerView?"next":"prev";a.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?a.realIndex:void 0})}if(r){const e=n*a.params.grid.rows;n=a.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=a.getSlideIndexByData(n)}return requestAnimationFrame((()=>{a.slideTo(n,t,s,i)})),a},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:a,params:r,animating:n}=i;if(!a)return i;let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<r.slidesPerGroupSkip?1:l,d=i.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return r.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:a,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o)return i;const c=i.virtual&&a.virtual.enabled;if(a.loop){if(d&&!c&&a.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),h=r.map((e=>p(e)));let m=r[h.indexOf(u)-1];if(void 0===m&&a.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(m=r[e>0?e-1:e])}let f=0;if(void 0!==m&&(f=n.indexOf(m),f<0&&(f=i.activeIndex-1),"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),a.rewind&&i.isBeginning){const a=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(a,e,t,s)}return a.loop&&0===i.activeIndex&&a.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const a=this;let r=a.activeIndex;const n=Math.min(a.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/a.params.slidesPerGroup),o=a.rtlTranslate?a.translate:-a.translate;if(o>=a.snapGrid[l]){const e=a.snapGrid[l];o-e>(a.snapGrid[l+1]-e)*i&&(r+=a.params.slidesPerGroup)}else{const e=a.snapGrid[l-1];o-e<=(a.snapGrid[l]-e)*i&&(r-=a.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,a.slidesGrid.length-1),a.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,r=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;a=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-i/2||r>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),r=e.getSlideIndex(C(s,`${n}[data-swiper-slide-index="${a}"]`)[0]),g((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-i?(e.loopFix(),r=e.getSlideIndex(C(s,`${n}[data-swiper-slide-index="${a}"]`)[0]),g((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};var W={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const a=()=>{C(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},r=t.grid&&s.grid&&s.grid.rows>1,n=s.slidesPerGroup*(r?s.grid.rows:1),l=t.slides.length%n!=0,o=r&&t.slides.length%s.grid.rows!=0,d=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?_("swiper-slide",[s.slideBlankClass]):_("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){d(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else if(o){if(s.loopAddBlankSlides){d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else a();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:a,activeSlideIndex:r,byController:n,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:h}=o,{centeredSlides:m}=h;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&h.virtual.enabled)return s&&(h.centeredSlides||0!==o.snapIndex?h.centeredSlides&&o.snapIndex<h.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let f=h.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(h.slidesPerView,10)),m&&f%2==0&&(f+=1));const v=h.slidesPerGroupAuto?f:h.slidesPerGroup;let g=v;g%v!=0&&(g+=v-g%v),g+=h.loopAdditionalSlides,o.loopedSlides=g;const b=o.grid&&h.grid&&h.grid.rows>1;d.length<f+g?L("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&L("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let S=o.activeIndex;void 0===r?r=o.getSlideIndex(d.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):S=r;const E="next"===i||!i,x="prev"===i||!i;let T=0,C=0;const _=b?Math.ceil(d.length/h.grid.rows):d.length,P=(b?d[r].column:r)+(m&&void 0===a?-f/2+.5:0);if(P<g){T=Math.max(g-P,v);for(let e=0;e<g-P;e+=1){const t=e-Math.floor(e/_)*_;if(b){const e=_-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&w.push(t)}else w.push(_-t-1)}}else if(P+f>_-g){C=Math.max(P-(_-2*g),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/_)*_;b?d.forEach(((e,s)=>{e.column===t&&y.push(s)})):y.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),x&&w.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),E&&y.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===h.slidesPerView?o.updateSlides():b&&(w.length>0&&x||y.length>0&&E)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),h.watchSlidesProgress&&o.updateSlidesOffset(),s)if(w.length>0&&x){if(void 0===t){const e=o.slidesGrid[S],t=o.slidesGrid[S+T]-e;l?o.setTranslate(o.translate-t):(o.slideTo(S+T,0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(a){const e=b?w.length/h.grid.rows:w.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(y.length>0&&E)if(void 0===t){const e=o.slidesGrid[S],t=o.slidesGrid[S-C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(S-C,0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?y.length/h.grid.rows:y.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!n){const e={slideRealIndex:t,direction:i,setTranslate:a,activeSlideIndex:r,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===h.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function Y(e,t,s){const i=v(),{params:a}=e,r=a.edgeSwipeDetection,n=a.edgeSwipeThreshold;return!r||!(s<=n||s>=i.innerWidth-n)||"prevent"===r&&(t.preventDefault(),!0)}function X(e){const t=this,s=m();let i=e;i.originalEvent&&(i=i.originalEvent);const a=t.touchEventsData;if("pointerdown"===i.type){if(null!==a.pointerId&&a.pointerId!==i.pointerId)return;a.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(a.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void Y(t,i,i.targetTouches[0].pageX);const{params:r,touches:n,enabled:l}=t;if(!l)return;if(!r.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let o=i.target;if("wrapper"===r.touchEventsTarget&&!t.wrapperEl.contains(o))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(a.isTouched&&a.isMoved)return;const d=!!r.noSwipingClass&&""!==r.noSwipingClass,c=i.composedPath?i.composedPath():i.path;d&&i.target&&i.target.shadowRoot&&c&&(o=c[0]);const p=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,u=!(!i.target||!i.target.shadowRoot);if(r.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===m()||s===v())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(p,o):o.closest(p)))return void(t.allowClick=!0);if(r.swipeHandler&&!o.closest(r.swipeHandler))return;n.currentX=i.pageX,n.currentY=i.pageY;const h=n.currentX,f=n.currentY;if(!Y(t,i,h))return;Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=h,n.startY=f,a.touchStartTime=b(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(a.allowThresholdMove=!1);let g=!0;o.matches(a.focusableElements)&&(g=!1,"SELECT"===o.nodeName&&(a.isTouched=!1)),s.activeElement&&s.activeElement.matches(a.focusableElements)&&s.activeElement!==o&&s.activeElement.blur();const w=g&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!w||o.isContentEditable||i.preventDefault(),r.freeMode&&r.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function U(e){const t=m(),s=this,i=s.touchEventsData,{params:a,touches:r,rtlTranslate:n,enabled:l}=s;if(!l)return;if(!a.simulateTouch&&"mouse"===e.pointerType)return;let o,d=e;if(d.originalEvent&&(d=d.originalEvent),"pointermove"===d.type){if(null!==i.touchId)return;if(d.pointerId!==i.pointerId)return}if("touchmove"===d.type){if(o=[...d.changedTouches].filter((e=>e.identifier===i.touchId))[0],!o||o.identifier!==i.touchId)return}else o=d;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",d));const c=o.pageX,p=o.pageY;if(d.preventedByNestedSwiper)return r.startX=c,void(r.startY=p);if(!s.allowTouchMove)return d.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(r,{startX:c,startY:p,currentX:c,currentY:p}),i.touchStartTime=b()));if(a.touchReleaseOnEdges&&!a.loop)if(s.isVertical()){if(p<r.startY&&s.translate<=s.maxTranslate()||p>r.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<r.startX&&s.translate<=s.maxTranslate()||c>r.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",d),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=c,r.currentY=p;const u=r.currentX-r.startX,h=r.currentY-r.startY;if(s.params.threshold&&Math.sqrt(u**2+h**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&r.currentY===r.startY||s.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:u*u+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,i.isScrolling=s.isHorizontal()?e>a.touchAngle:90-e>a.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",d),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!a.cssMode&&d.cancelable&&d.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&d.stopPropagation();let f=s.isHorizontal()?u:h,v=s.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;a.oneWayMovement&&(f=Math.abs(f)*(n?1:-1),v=Math.abs(v)*(n?1:-1)),r.diff=f,f*=a.touchRatio,n&&(f=-f,v=-v);const g=s.touchesDirection;s.swipeDirection=f>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const w=s.params.loop&&!a.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(w&&y&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!a.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",d)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&g!==s.touchesDirection&&w&&y&&Math.abs(f)>=1)return Object.assign(r,{startX:c,startY:p,currentX:c,currentY:p,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",d),i.isMoved=!0,i.currentTranslate=f+i.startTranslate;let S=!0,E=a.resistanceRatio;if(a.touchReleaseOnEdges&&(E=0),f>0?(w&&y&&i.allowThresholdMove&&i.currentTranslate>(a.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(S=!1,a.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+f)**E))):f<0&&(w&&y&&i.allowThresholdMove&&i.currentTranslate<(a.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===a.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(a.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(S=!1,a.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-f)**E))),S&&(d.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),a.threshold>0){if(!(Math.abs(f)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=s.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}a.followFinger&&!a.cssMode&&((a.freeMode&&a.freeMode.enabled&&s.freeMode||a.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),a.freeMode&&a.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function K(e){const t=this,s=t.touchEventsData;let i,a=e;a.originalEvent&&(a=a.originalEvent);if("touchend"===a.type||"touchcancel"===a.type){if(i=[...a.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(a.pointerId!==s.pointerId)return;i=a}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(a.type)){if(!(["pointercancel","contextmenu"].includes(a.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:r,touches:n,rtlTranslate:l,slidesGrid:o,enabled:d}=t;if(!d)return;if(!r.simulateTouch&&"mouse"===a.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",a),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=b(),p=c-s.touchStartTime;if(t.allowClick){const e=a.path||a.composedPath&&a.composedPath();t.updateClickedSlide(e&&e[0]||a.target,e),t.emit("tap click",a),p<300&&c-s.lastClickTime<300&&t.emit("doubleTap doubleClick",a)}if(s.lastClickTime=b(),g((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===n.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let u;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,u=r.followFinger?l?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[e+t]?u>=o[e]&&u<o[e+t]&&(h=e,m=o[e+t]-o[e]):u>=o[e]&&(h=e,m=o[o.length-1]-o[o.length-2])}let f=null,v=null;r.rewind&&(t.isBeginning?v=r.virtual&&r.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const w=(u-o[h])/m,y=h<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(p>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?f:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(w>1-r.longSwipesRatio?t.slideTo(h+y):null!==v&&w<0&&Math.abs(w)>r.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(a.target===t.navigation.nextEl||a.target===t.navigation.prevEl)?a.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==f?f:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h))}}function Q(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:a,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=a,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function J(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Z(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let a;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();a=0===r?0:(e.translate-e.minTranslate())/r,a!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ee(e){const t=this;B(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function te(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const se=(e,t)=>{const s=m(),{params:i,el:a,wrapperEl:r,device:n}=e,l=!!i.nested,o="on"===t?"addEventListener":"removeEventListener",d=t;s[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),a[o]("touchstart",e.onTouchStart,{passive:!1}),a[o]("pointerdown",e.onTouchStart,{passive:!1}),s[o]("touchmove",e.onTouchMove,{passive:!1,capture:l}),s[o]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[o]("touchend",e.onTouchEnd,{passive:!0}),s[o]("pointerup",e.onTouchEnd,{passive:!0}),s[o]("pointercancel",e.onTouchEnd,{passive:!0}),s[o]("touchcancel",e.onTouchEnd,{passive:!0}),s[o]("pointerout",e.onTouchEnd,{passive:!0}),s[o]("pointerleave",e.onTouchEnd,{passive:!0}),s[o]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&a[o]("click",e.onClick,!0),i.cssMode&&r[o]("scroll",e.onScroll),i.updateOnWindowResize?e[d](n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",Q,!0):e[d]("observerUpdate",Q,!0),a[o]("load",e.onLoad,{capture:!0})};const ie=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var ae={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function re(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],a=s[i];"object"==typeof a&&null!==a?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in a?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),S(t,s)):S(t,s)):S(t,s)}}const ne={eventsEmitter:q,update:N,translate:F,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),j({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),j({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:R,loop:W,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=X.bind(e),e.onTouchMove=U.bind(e),e.onTouchEnd=K.bind(e),e.onDocumentTouchStart=te.bind(e),t.cssMode&&(e.onScroll=Z.bind(e)),e.onClick=J.bind(e),e.onLoad=ee.bind(e),se(e,"on")},detachEvents:function(){se(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:a}=e,r=i.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const n=e.getBreakpoint(r,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in r?r[n]:void 0)||e.originalParams,o=ie(e,i),d=ie(e,l),c=i.enabled;o&&!d?(a.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(a.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&a.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,a=l[t]&&l[t].enabled;s&&!a&&e[t].disable(),!s&&a&&e[t].enable()}));const p=l.direction&&l.direction!==i.direction,u=i.loop&&(l.slidesPerView!==i.slidesPerView||p),h=i.loop;p&&s&&e.changeDirection(),S(e.params,l);const m=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!m?e.disable():!c&&m&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),s&&(u?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&f?(e.loopCreate(t),e.updateSlides()):h&&!f&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const a=v(),r="window"===t?a.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:r,value:l}=n[e];"window"===t?a.matchMedia(`(min-width: ${l}px)`).matches&&(i=r):l<=s.clientWidth&&(i=r)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:a,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),a.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},le={};class oe{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),a=0;a<s;a++)i[a]=arguments[a];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=S({},t),e&&!t.el&&(t.el=e);const r=m();if(t.el&&"string"==typeof t.el&&r.querySelectorAll(t.el).length>1){const e=[];return r.querySelectorAll(t.el).forEach((s=>{const i=S({},t,{el:s});e.push(new oe(i))})),e}const n=this;n.__swiper__=!0,n.support=z(),n.device=D({userAgent:t.userAgent}),n.browser=G(),n.eventsListeners={},n.eventsAnyListeners=[],n.modules=[...n.__modules__],t.modules&&Array.isArray(t.modules)&&n.modules.push(...t.modules);const l={};n.modules.forEach((e=>{e({params:t,swiper:n,extendParams:re(t,l),on:n.on.bind(n),once:n.once.bind(n),off:n.off.bind(n),emit:n.emit.bind(n)})}));const o=S({},ae,l);return n.params=S({},o,le,t),n.originalParams=S({},n.params),n.passedParams=S({},t),n.params&&n.params.on&&Object.keys(n.params.on).forEach((e=>{n.on(e,n.params.on[e])})),n.params&&n.params.onAny&&n.onAny(n.params.onAny),Object.assign(n,{enabled:n.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===n.params.direction,isVertical:()=>"vertical"===n.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:n.params.allowSlideNext,allowSlidePrev:n.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:n.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:n.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),n.emit("_swiper"),n.params.init&&n.init(),n}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=M(C(t,`.${s.slideClass}, swiper-slide`)[0]);return M(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=C(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),a=(s.maxTranslate()-i)*e+i;s.translateTo(a,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:a,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?i[l].swiperSlideSize:0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?a[e]+r[e]-a[l]<n:a[e]-a[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){a[l]-a[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let a;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&B(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;a=e.slideTo(t.length-1,0,!1,!0)}else a=e.slideTo(e.activeIndex,0,!1,!0);a||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return C(s,i())[0]})();return!a&&t.params.createElements&&(a=_("div",t.params.wrapperClass),s.append(a),C(s,`.${t.params.slideClass}`).forEach((e=>{a.append(e)}))),Object.assign(t,{el:s,wrapperEl:a,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:a,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===P(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===P(s,"direction")),wrongRTL:"-webkit-box"===P(a,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?B(t,e):e.addEventListener("load",(e=>{B(t,e.target)}))})),H(t),t.initialized=!0,H(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:a,wrapperEl:r,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),a.removeAttribute("style"),r.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){S(le,e)}static get extendedDefaults(){return le}static get defaults(){return ae}static installModule(e){oe.prototype.__modules__||(oe.prototype.__modules__=[]);const t=oe.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>oe.installModule(e))),oe):(oe.installModule(e),oe)}}function de(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((a=>{if(!s[a]&&!0===s.auto){let r=C(e.el,`.${i[a]}`)[0];r||(r=_("div",i[a]),r.className=i[a],e.el.append(r)),s[a]=r,t[a]=r}})),s}function ce(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const r=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function l(e,s){const i=t.params.navigation;(e=r(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return l(s,!1),void l(e,!1);l(s,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function d(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),a("navigationPrev"))}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),a("navigationNext"))}function p(){const e=t.params.navigation;if(t.params.navigation=de(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=r(s),i=r(i);const a=(s,i)=>{s&&s.addEventListener("click","next"===i?c:d),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>a(e,"next"))),i.forEach((e=>a(e,"prev")))}function u(){let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?c:d),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?h():(p(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{u()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s),t.enabled?o():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=r(i),n=r(n);const l=s.target;if(t.params.navigation.hideOnClick&&!n.includes(l)&&!i.includes(l)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),a(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),p(),o()},disable:h,update:o,init:p,destroy:u})}function pe(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function ue(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;const r="swiper-pagination";let n;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;const o=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function p(e){const s=e.target.closest(pe(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=M(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function u(){const e=t.rtl,s=t.params.pagination;if(d())return;let i,r,p=t.pagination.el;p=o(p);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,r=t.previousSnapIndex):(r=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const a=t.pagination.bullets;let o,d,u;if(s.dynamicBullets&&(n=k(a[0],t.isHorizontal()?"width":"height",!0),p.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==r&&(l+=i-(r||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),d=o+(Math.min(a.length,s.dynamicMainBullets)-1),u=(d+o)/2),a.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)a.forEach((e=>{const a=M(e);a===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(a>=o&&a<=d&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),a===o&&c(e,"prev"),a===d&&c(e,"next"))}));else{const e=a[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&a.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=a[o],t=a[d];for(let e=o;e<=d;e+=1)a[e]&&a[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(s.dynamicBullets){const i=Math.min(a.length,s.dynamicMainBullets+4),r=(n*i-n)/2-u*n,l=e?"right":"left";a.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${r}px`}))}}p.forEach(((e,r)=>{if("fraction"===s.type&&(e.querySelectorAll(pe(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(pe(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(h)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const r=(i+1)/h;let n=1,l=1;"horizontal"===a?n=r:l=r,e.querySelectorAll(pe(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,h),0===r&&a("paginationRender",e)):(0===r&&a("paginationRender",e),a("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(d())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=o(i);let r="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?r+=e.renderBullet.call(t,s,e.bulletClass):r+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=r||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(pe(e.bulletClass)))})),"custom"!==e.type&&a("paginationRender",i[0])}function m(){t.params.pagination=de(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>A(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=o(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",p),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(d())return;let s=t.pagination.el;s&&(s=o(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",p))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=o(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?v():(m(),h(),u())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),i("snapIndexChange",(()=>{u()})),i("snapGridLengthChange",(()=>{h(),u()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{u()})),i("click",((e,s)=>{const i=s.target,r=o(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=r[0].classList.contains(t.params.pagination.hiddenClass);a(!0===e?"paginationShow":"paginationHide"),r.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const v=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),h(),u()},disable:v,render:h,update:u,init:m,destroy:f})}function he(e,t){const s=T(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function me(e){let{swiper:t,duration:s,transformElements:i,allSlides:a}=e;const{activeIndex:r}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=a?i:i.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0];return e.parentElement})(e):e;return t.getSlideIndex(s)===r})),e.forEach((e=>{!function(e,t){t&&e.addEventListener("transitionend",(function s(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",s))}))}(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function fe(e){let{swiper:t,extendParams:s,on:i}=e;s({fadeEffect:{crossFade:!1}});!function(e){const{effect:t,swiper:s,on:i,setTranslate:a,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;i("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),i("setTranslate",(()=>{s.params.effect===t&&a()})),i("setTransition",((e,i)=>{s.params.effect===t&&r(i)})),i("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),i("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(a(),c=!1)})))}))}({effect:"fade",swiper:t,on:i,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let s=0;s<e.length;s+=1){const e=t.slides[s];let i=-e.swiperSlideOffset;t.params.virtualTranslate||(i-=t.translate);let a=0;t.isHorizontal()||(a=i,i=0);const r=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),n=he(0,e);n.style.opacity=r,n.style.transform=`translate3d(${i}px, ${a}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>T(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),me({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}Object.keys(ne).forEach((e=>{Object.keys(ne[e]).forEach((t=>{oe.prototype[t]=ne[e][t]}))})),oe.use([function(e){let{swiper:t,on:s,emit:i}=e;const a=v();let r=null,n=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==a.ResizeObserver?t&&!t.destroyed&&t.initialized&&(r=new ResizeObserver((e=>{n=a.requestAnimationFrame((()=>{const{width:s,height:i}=t;let a=s,r=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(a=i?i.width:(s[0]||s).inlineSize,r=i?i.height:(s[0]||s).blockSize)})),a===s&&r===i||l()}))})),r.observe(t.el)):(a.addEventListener("resize",l),a.addEventListener("orientationchange",o))})),s("destroy",(()=>{n&&a.cancelAnimationFrame(n),r&&r.unobserve&&t.el&&(r.unobserve(t.el),r=null),a.removeEventListener("resize",l),a.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;const r=[],n=v(),l=function(e,s){void 0===s&&(s={});const i=new(n.MutationObserver||n.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void a("observerUpdate",e[0]);const s=function(){a("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(s):n.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),r.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=A(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{r.forEach((e=>{e.disconnect()})),r.splice(0,r.length)}))}]);let ve=null;const ge=(e,t,s)=>{const i=e.slides;i.length&&t&&i.forEach((e=>{e.querySelector(s).innerHTML=`${t.querySelector(".swiper-pagination-bullet-active").innerHTML}`}))},be=(e,t)=>{t&&e.el&&(t.innerHTML=`${e.el.querySelector(".swiper-pagination-bullet-active").innerHTML}`)},we=e=>{if(e.slides.length>=4){const t=e.pagination.bullets,s=e.slides,i=e.realIndex;t.length?(n(t,"_revealed"),window.innerWidth<=768&&t[i].classList.add("_revealed"),t[i+1]&&t[i+1].classList.add("_revealed"),t[i+2]&&t[i+2].classList.add("_revealed"),window.innerWidth>768&&t[i+3]&&t[i+3].classList.add("_revealed"),window.innerWidth<=768&&(i===s.length-2||i===s.length-1)&&(t[s.length-3].classList.add("_revealed"),t[s.length-2].classList.add("_revealed"),t[s.length-1].classList.add("_revealed")),window.innerWidth>768&&i===s.length-1&&(t[0].classList.add("_revealed"),t[1].classList.add("_revealed"),t[2].classList.add("_revealed"))):window.innerWidth>768&&t.forEach((e=>{e.classList.contains("swiper-pagination-bullet-active")||e.classList.add("_revealed")}))}},ye=e=>{const t=Array.from(e.el.querySelectorAll(".swiper-slide"));n(t,"_revealed"),t.forEach(((e,s)=>{e.classList.contains("swiper-slide-active")&&(t[s].classList.add("_revealed"),window.innerWidth>768&&(t[s+1]&&t[s+1].classList.add("_revealed"),t[s+2]&&t[s+2].classList.add("_revealed")))}))};window.addEventListener("load",(function(e){setTimeout((()=>{document.querySelector(".search-box__slider")&&new oe(".search-box__slider",{modules:[ce,fe],observer:!0,observeParents:!0,observeSlideChildren:!0,slidesPerView:1,speed:700,loop:!0,effect:"fade",navigation:{prevEl:".search-box__slider-nav .search-box__slider-arr_prev",nextEl:".search-box__slider-nav .search-box__slider-arr_next"}}),document.querySelector(".hero__slider")&&new oe(".hero__slider",{modules:[ce,ue],observer:!0,observeParents:!0,autoHeight:!0,slidesPerView:1,speed:800,loop:!0,navigation:{prevEl:".hero .sl-nav__arrow_prev",nextEl:".hero .sl-nav__arrow_next"},pagination:{el:".hero__sl-control .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{direction:"vertical",slidesPerView:"auto"}},on:{init:e=>{const t=e.passedParams.spaceBetween,s=e.slides[0].clientHeight+t;e.el.style.height=s+"px",ge(e,e.pagination.el,".slide-hero__number")},slideChange:e=>{ge(e,e.pagination.el,".slide-hero__number"),we(e)}}}),document.querySelector(".recommendations__slider")&&new oe(".recommendations__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:1.4,spaceBetween:65,speed:800,loop:!0,longSwipes:!1,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".recommendations .sl-nav__arrow_prev",nextEl:".recommendations .sl-nav__arrow_next"},pagination:{el:".recommendations .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:4,spaceBetween:137}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".recommendations__number")),we(e),ye(e)},realIndexChange:e=>{be(e.pagination,document.querySelector(".recommendations__number")),we(e)},slideChangeTransitionStart:e=>{ye(e)},touchMove:e=>{ye(e)}}}),document.querySelector(".tests__slider")&&new oe(".tests__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:1,spaceBetween:30,speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".tests .sl-nav__arrow_prev",nextEl:".tests .sl-nav__arrow_next"},pagination:{el:".tests .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:1.01}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".tests__active-number")),we(e)},slideChange:e=>{be(e.pagination,document.querySelector(".tests__active-number"))},realIndexChange:e=>{we(e)}}}),document.querySelector(".collections__slider")&&new oe(".collections__slider",{modules:[ce,ue],observer:!0,observeParents:!0,speed:1e3,loop:!0,slidesPerView:1.6,spaceBetween:64,watchSlidesProgress:!0,watchSlidesVisibility:!0,resistance:!1,navigation:{prevEl:".collections .sl-nav__arrow_prev",nextEl:".collections .sl-nav__arrow_next"},pagination:{el:".collections .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:"auto",spaceBetween:420}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".collections__active-number"))},slideChange:e=>{e.el.classList.contains("_slide")||e.el.classList.add("_slide"),be(e.pagination,document.querySelector(".collections__active-number")),we(e)}}}),document.querySelector(".categories__slider")&&(window.innerWidth<=768&&!ve?ve=new oe(".categories__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:2,spaceBetween:l(.8),speed:1e3,loop:!0,navigation:{prevEl:".categories .sl-nav__arrow_prev",nextEl:".categories .sl-nav__arrow_next"},pagination:{el:".categories .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1<10?"0":"")+(e+1)+"</span>"}},on:{afterInit:e=>{setTimeout((()=>{we(e)}),0)},slideChangeTransitionStart:e=>{we(e)}}}):window.innerWidth>768&&ve&&(ve.destroy(),ve=null))}),0)}));s(23);new class{constructor(){this._this=this,this.classes={sel:"select",body:"select__body",label:"select__label",title:"select__title",val:"select__value",content:"select__content",options:"select__options",option:"select__option",scroll:"select__scroll",group:"select__group",inp:"select__input",asset:"select__asset",txt:"select__text",hint:"select__hint",active:"_select-active",focused:"_select-focused",opened:"_select-opened",filled:"_select-filled",selected:"_select-selected",disabled:"_select-disabled",list:"_select-list",error:"_select-error",multiple:"_select-multiple",checkbox:"_select-checkbox",label:"_select-label"};const e=document.querySelectorAll("select");e.length&&this.init(e)}init(e){e.forEach(((e,t)=>{this.initSelItem(e,t+1)})),document.addEventListener("click",function(e){this.setActions(e)}.bind(this)),document.addEventListener("keydown",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusin",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusout",function(e){this.setActions(e)}.bind(this))}initSelItem(e,t){const s=this,i=document.createElement("div");if(i.classList.add(this.classes.sel),e.parentNode.insertBefore(i,e),i.appendChild(e),e.hidden=!0,t&&(e.dataset.selId=t),this.getPlaceholder(e)&&(e.dataset.optPlaceholder=this.getPlaceholder(e).value,this.getPlaceholder(e).label.show)){this.getSelect(i,this.classes.title).twinSel.insertAdjacentHTML("afterbegin",`<span class="${this.classes.label}">${this.getPlaceholder(e).label.text?this.getPlaceholder(e).label.text:this.getPlaceholder(e).value}</span>`)}i.insertAdjacentHTML("beforeend",`<div class="${this.classes.body}"><div hidden class="${this.classes.options}"></div></div>`),this.build(e),e.dataset.speed=e.dataset.speed?e.dataset.speed:"150",e.addEventListener("change",(function(e){s.initSelections(e)}))}build(e){const t=e.parentElement;t.dataset.selId=e.dataset.selId,this.setValue(t,e),this.setOptions(t,e),e.dataset.selAddonClass&&t.classList.add(`select_${e.dataset.selAddonClass}`),e.multiple?t.classList.add(this.classes.multiple):t.classList.remove(this.classes.multiple),e.hasAttribute("data-sel-checkboxes")&&e.multiple?t.classList.add(this.classes.checkbox):t.classList.remove(this.classes.checkbox),this.disableSelect(t,e),e.hasAttribute("data-sel-search")&&this.setSearchActions(t),e.hasAttribute("data-sel-opened")&&this.setAction(t),e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selHint}</div>`),e.hasAttribute("data-show-val")?t.classList.add("_select-show-val"):t.classList.remove("_select-show-val")}setValue(e,t){const s=this.getSelect(e,this.classes.body).twinSel,i=this.getSelect(e,this.classes.title).twinSel;i&&i.remove(),s.insertAdjacentHTML("afterbegin",this.getValue(e,t))}setOptions(e,t){const s=this.getSelect(e,this.classes.options).twinSel;s.innerHTML=this.getOptions(t),s.querySelector(`.${this.classes.option}`).classList.add(this.classes.selected)}disableSelect(e,t){t.disabled?(e.classList.add(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!0):(e.classList.remove(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!1)}setActions(e){const t=e.target,s=e.type;if(t.closest(this.getClass(this.classes.sel))||t.closest(this.getClass(this.classes.list))){const i=t.closest(".select")?t.closest(".select"):document.querySelector(`.${this.classes.sel}[data-sel-id="${t.closest(this.getClass(this.classes.list)).dataset.selectId}"]`),a=this.getSelect(i).relativeSel;if("click"===s){if(!a.disabled)if(t.closest(this.getClass(this.classes.list))){const e=t.closest(this.getClass(this.classes.list)),s=document.querySelector(`.${this.classes.sel}[data-sel-id="${e.dataset.selId}"] .select__option[data-opt-val="${e.dataset.optVal}"]`);this.setOptionAction(i,a,s)}else if(t.closest(this.getClass(this.classes.title)))this.setAction(i);else if(t.closest(this.getClass(this.classes.option))){const e=t.closest(this.getClass(this.classes.option));this.setOptionAction(i,a,e)}}else"focusin"===s||"focusout"===s?t.closest(this.getClass(this.classes.sel))&&("focusin"===s?i.classList.add(this.classes.focused):(i.classList.remove(this.classes.focused),a.hasAttribute("data-validate")&&(i.classList.contains(this.classes.filled)?this.removeErr(a,i):this.addErr(a,i)))):"keydown"===s&&"Escape"===e.code&&this.closeGroup()}else this.closeGroup()}setAction(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;if(t.closest("[data-one-select]")){const e=t.closest("[data-one-select]");this.closeGroup(e)}s.classList.contains("_slide")||(e.classList.toggle(this.classes.opened),d(s,t.dataset.speed),e.classList.contains(this.classes.opened)&&t.hasAttribute("data-validate")&&e.classList.contains(this.classes.error)&&this.removeErr(t,e))}closeGroup(e){const t=(e||document).querySelectorAll(`${this.getClass(this.classes.sel)}${this.getClass(this.classes.opened)}`);t.length&&t.forEach((e=>{this.closeItem(e)}))}closeItem(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;s.classList.contains("_slide")||(e.classList.remove(this.classes.opened),o(s,t.dataset.speed))}setOptionAction(e,t,s){if(t.multiple){s.classList.toggle(this.classes.selected);this.getData(t).elements.forEach((e=>{e.removeAttribute("selected")}));e.querySelectorAll(this.getClass(this.classes.selected)).forEach((e=>{t.querySelector(`option[value="${e.dataset.optVal}"]`).setAttribute("selected","selected")})),s.classList.contains(this.classes.selected)||(console.log(t.querySelector(`option[value="${s.dataset.optVal}"]`)),t.querySelector(`option[value="${s.dataset.optVal}"]`).removeAttribute("selected"))}else e.querySelectorAll(".select__option").forEach((e=>e.classList.remove(this.classes.selected))),s.classList.add(this.classes.selected),t.hasAttribute("data-show-selection")||(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`)&&(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`).hidden=!1),s.hidden=!0),t.value=s.hasAttribute("data-opt-val")?s.dataset.optVal:s.textContent,this.setAction(e);this.setValue(e,t),this.setSelections(t)}setSearchActions(e){const t=this,s=this.getSelect(e,this.classes.inp).twinSel,i=this.getSelect(e,this.classes.options).twinSel.querySelectorAll(`.${this.classes.option}`);s.addEventListener("input",(function(){i.forEach((e=>{e.textContent.toUpperCase().indexOf(s.value.toUpperCase())>=0?e.hidden=!1:e.hidden=!0})),!0===i.hidden&&t.setAction(e)}))}setSubtitle(e){}addErr(e,t){t.classList.add(this.classes.error),e.dataset.selError&&!e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selError}</div>`)}removeErr(e,t){t.classList.contains(this.classes.error)&&t.classList.remove(this.classes.error),e.parentElement.querySelector(".select__hint")&&!e.dataset.selHint&&e.parentElement.removeChild(e.parentElement.querySelector(".select__hint"))}getClass(e){return`.${e}`}getSelect(e,t){return{relativeSel:e.querySelector("select"),twinSel:e.querySelector(this.getClass(t))}}getValue(e,t){let s,i,a=this.getData(t,2).html;if(a=a.length?a:t.dataset.selLabel?t.dataset.selLabel:"",this.getData(t).values.length?e.classList.add(this.classes.active):e.classList.remove(this.classes.active),t.hasAttribute("data-sel-label")&&(s=t.dataset.selLabel?` data-sel-label="${t.dataset.selLabel}"`:' data-sel-label="Выбор"',i=` ${this.classes.label}`),t.multiple&&t.hasAttribute("data-sel-list")&&(a=this.getData(t).elements.map((t=>`<span data-opt-id="${e.dataset.selId}" data-opt-val="${t.value}" class="_list-item">${this.getContent(t)}</span>`)).join(""),t.dataset.list&&document.querySelector(t.dataset.list)&&(document.querySelector(t.dataset.list).innerHTML=a,t.hasAttribute("data-sel-search")&&(a=!1))),t.hasAttribute("data-sel-search"))return`<div class="${this.classes.title}"><span ${s} class="${this.classes.val}"><input autocomplete="off" type="search" placeholder="${a}" data-placeholder="${a}" class="${this.classes.inp}"></span></div>`;{const e=this.getData(t).elements.length&&this.getData(t).elements[0].dataset.optClass?` ${this.getData(t).elements[0].dataset.optClass}`:"";return`<button type="button" class="${this.classes.title}"><span ${s||""} class="${this.classes.val} ${i||""}"><span class="${this.classes.content}${e}">${a}</span></span></button>`}}getOptions(e){const t=e.hasAttribute("data-sel-scroll")?"data-simplebar":"";let s=e.dataset.selScroll?`style="max-height:${e.dataset.selScroll}px"`:"",i=Array.from(e.options);if(i.length){let a="";return(this.getPlaceholder(e)&&!this.getPlaceholder(e).show||e.multiple)&&(i=i.filter((e=>e.value))),a+=t?`<div ${t} ${s} class="${this.classes.scroll}">`:"",i.forEach((t=>{a+=this.getOption(t,e)})),a+=t?"</div>":"",a}}getOption(e,t){const s=e.selected&&t.multiple?` ${this.classes.selected}`:"",i=!e.selected||t.hasAttribute("data-show-selection")||t.multiple?"":"hidden",a=e.dataset.optClass?` ${e.dataset.optClass}`:"",r=!!e.dataset.optionLink&&e.dataset.optionLink,n=e.hasAttribute("data-option-link-target")?'target="_blank"':"";let l="";return l+=r?`<a ${n} ${i} href="${r}" data-opt-val="${e.value}" class="${this.classes.option}${a}${s}">`:`<button ${i} class="${this.classes.option}${a}${s}" data-opt-val="${e.value}" type="button">`,l+=this.getContent(e),l+=r?"</a>":"</button>",l}getContent(e){const t=e.dataset.optAsset?`${e.dataset.optAsset}`:"",s=t.indexOf("img")>=0?`<img src="${t}" alt="">`:t;let i="";return i+=t?`<span class="${this.classes.group}">`:"",i+=t?`<span class="${this.classes.asset}">`:"",i+=t?s:"",i+=t?"</span>":"",i+=t?`<span class="${this.classes.txt}">`:"",i+=e.textContent,i+=t?"</span>":"",i+=t?"</span>":"",i}getPlaceholder(e){const t=Array.from(e.options).find((e=>!e.value));if(t)return t.classList.add(this.classes.subtitle),{value:t.textContent,show:t.hasAttribute("data-sel-ph-show"),label:{show:t.hasAttribute("data-sel-ph"),text:t.dataset.optPlaceholder}}}getData(e){let t=[];return e.multiple?t=Array.from(e.options).filter((e=>e.value)).filter((e=>e.selected)):t.push(e.options[e.selectedIndex]),{elements:t.map((e=>e)),values:t.filter((e=>e.value)).map((e=>e.value)),html:t.map((e=>this.getContent(e)))}}initSelections(e){const t=e.target;this.build(t),this.setSelections(t)}setSelections(e){const t=e.parentElement;if(e.hasAttribute("data-submit")&&e.value){let t=document.createElement("button");t.type="submit",e.closest("form").append(t),t.click(),t.remove()}e.parentElement.classList.add(this.classes.filled),this.selection(t,e)}selection(e,t){document.dispatchEvent(new CustomEvent("selection",{detail:{select:t}}))}}({});s(726);window.addEventListener("load",(function(){document.body.style.opacity=1})),document.addEventListener("DOMContentLoaded",(function(){const e=document.querySelector(".header__search-input");e&&(e.addEventListener("focusin",(function(){document.documentElement.classList.add("_search-box-opened")})),e.addEventListener("input",(function(){e.querySelector("input").value.length?e.closest("form").classList.contains("_filled")||e.closest("form").classList.add("_filled"):e.closest("form").classList.contains("_filled")&&e.closest("form").classList.remove("_filled")})),e.closest("form").addEventListener("submit",(function(){document.documentElement.classList.contains("_search-box-opened")&&document.documentElement.classList.remove("_search-box-opened"),e.closest("form").classList.contains("_filled")&&e.closest("form").classList.remove("_filled"),e.querySelector("input").blur()})));document.addEventListener("click",(e=>{const t=e.target;if(t.closest(".heart-btn__icon")&&(t.closest(".heart-btn__icon").classList.toggle("_active"),e.preventDefault()),document.documentElement.classList.contains("_search-box-opened")&&!t.closest(".header__search")&&document.documentElement.classList.remove("_search-box-opened"),t.closest(".search-box__delete-btn")){const e=t.closest(".search-box__group");t.closest(".search-box__item").remove(),e.querySelectorAll(".search-box__item").length||e.remove()}t.closest(".menu-bar__item")&&(n(document.querySelectorAll(".menu-bar__item"),"_active"),t.closest(".menu-bar__item").classList.add("_active"))}))})),document.querySelector(".hamburger")&&document.addEventListener("click",(function(t){e&&t.target.closest(".hamburger")?a():e&&document.documentElement.classList.contains("_menu-opened")&&(t.target.closest(".menu__close-btn")||!t.target.closest(".menu"))&&r()})),function(){const e=document.querySelectorAll("[data-spoilers]");if(e.length>0){const t=Array.from(e).filter((function(e,t,s){return!e.dataset.spoilers.split(",")[0]}));t.length&&i(t);let s=function(e,t){const s=Array.from(e).filter((function(e,s,i){if(e.dataset[t])return e.dataset[t].split(",")[0]}));if(s.length){const e=[];s.forEach((s=>{const i={},a=s.dataset[t].split(",");i.value=a[0],i.type=a[1]?a[1].trim():"max",i.item=s,e.push(i)}));let i=e.map((function(e){return"("+e.type+"-width: "+e.value+"px),"+e.value+","+e.type}));i=function(e){return e.filter((function(e,t,s){return s.indexOf(e)===t}))}(i);const a=[];if(i.length)return i.forEach((t=>{const s=t.split(","),i=s[1],r=s[2],n=window.matchMedia(s[0]),l=e.filter((function(e){if(e.value===i&&e.type===r)return!0}));a.push({itemsArray:l,matchMedia:n})})),a}}(e,"spoilers");function i(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.forEach((e=>{e=t?e.item:e,t.matches||!t?(e.classList.add("_spoiler-init"),a(e),e.addEventListener("click",r)):(e.classList.remove("_spoiler-init"),a(e,!1),e.removeEventListener("click",r))}))}function a(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=e.querySelectorAll("[data-spoiler]");s.length&&(s=Array.from(s).filter((t=>t.closest("[data-spoilers]")===e)),s.forEach((e=>{t?(e.removeAttribute("tabindex"),e.classList.contains("_spoiler-active")||(e.nextElementSibling.hidden=!0)):(e.setAttribute("tabindex","-1"),e.nextElementSibling.hidden=!1)})))}function r(e){const t=e.target;if(t.closest("[data-spoiler]")){const s=t.closest("[data-spoiler]"),i=s.closest("[data-spoilers]"),a=i.hasAttribute("data-one-spoiler"),r=i.dataset.spoilersSpeed?parseInt(i.dataset.spoilersSpeed):500;i.querySelectorAll("._slide").length||(a&&!s.classList.contains("_spoiler-active")&&n(i),s.classList.toggle("_spoiler-active"),d(s.nextElementSibling,r)),e.preventDefault()}}function n(e){const t=e.querySelector("[data-spoiler]._spoiler-active"),s=e.dataset.spoilersSpeed?parseInt(e.dataset.spoilersSpeed):500;t&&!e.querySelectorAll("._slide").length&&(t.classList.remove("_spoiler-active"),o(t.nextElementSibling,s))}s&&s.length&&s.forEach((e=>{e.matchMedia.addEventListener("change",(function(){i(e.itemsArray,e.matchMedia)})),i(e.itemsArray,e.matchMedia)}));const l=document.querySelectorAll("[data-spoiler-close]");l.length&&document.addEventListener("click",(function(e){e.target.closest("[data-spoilers]")||l.forEach((e=>{const t=e.closest("[data-spoilers]"),s=spollersBlock.dataset.spoilersSpeed?parseInt(t.dataset.spoilersSpeed):500;e.classList.remove("_spoiler-active"),o(e.nextElementSibling,s)}))}))}}(),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{viewPass:!1};const t=document.querySelectorAll("input[placeholder],textarea[placeholder]");t.length&&t.forEach((e=>{e.hasAttribute("data-placeholder-nohide")||(e.dataset.placeholder=e.placeholder)})),document.body.addEventListener("focusin",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=""),t.hasAttribute("data-no-focus-classes")||(t.classList.add("_form-focus"),t.parentElement.classList.add("_form-focus")),c.removeError(t))})),document.body.addEventListener("focusout",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=t.dataset.placeholder),t.hasAttribute("data-no-focus-classes")||(t.classList.remove("_form-focus"),t.parentElement.classList.remove("_form-focus")),t.hasAttribute("data-validate")&&c.validateInput(t))})),e.viewPass&&document.addEventListener("click",(function(e){let t=e.target;if(t.closest('[class*="__viewpass"]')){let e=t.classList.contains("_viewpass-active")?"password":"text";t.parentElement.querySelector("input").setAttribute("type",e),t.classList.toggle("_viewpass-active")}}))}({viewPass:!1}),function(){const e=document.forms;if(e.length)for(const s of e)s.addEventListener("submit",(function(e){t(e.target,e)})),s.addEventListener("reset",(function(e){const t=e.target;c.formClean(t)}));async function t(e,t){if(0===(e.hasAttribute("data-no-validate")?0:c.getErrors(e))){if(e.hasAttribute("data-ajax")){t.preventDefault();const i=e.getAttribute("action")?e.getAttribute("action").trim():"#",a=e.getAttribute("method")?e.getAttribute("method").trim():"GET",r=new FormData(e);e.classList.add("_sending");const n=await fetch(i,{method:a,body:r});if(n.ok){let t=await n.json();e.classList.remove("_sending"),s(e,t)}else alert("error"),e.classList.remove("_sending")}else e.hasAttribute("data-dev")&&(t.preventDefault(),s(e))}else{t.preventDefault();const s=e.querySelector("._form-error");s&&e.hasAttribute("data-goto-error")&&gotoBlock(s,!0,1e3)}}function s(e){document.dispatchEvent(new CustomEvent("formSent",{detail:{form:e}})),c.formClean(e)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,