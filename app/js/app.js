(()=>{var e={726:()=>{function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],s=t.dataset.da.trim().split(","),i={};i.element=t,i.parent=t.parentNode,i.destination=document.querySelector(s[0].trim()),i.breakpoint=s[1]?s[1].trim():"767",i.place=s[2]?s[2].trim():"last",i.index=this.indexInParent(i.parent,i.element),this.оbjects.push(i)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,s){return Array.prototype.indexOf.call(s,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const s=this.mediaQueries[t],i=String.prototype.split.call(s,","),a=window.matchMedia(i[0]),r=i[1],n=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===r}));a.addListener((function(){e.mediaHandler(a,n)})),this.mediaHandler(a,n)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const s=t[e];s.index=this.indexInParent(s.parent,s.element),this.moveTo(s.place,s.element,s.destination)}else for(let e=t.length-1;e>=0;e--){const s=t[e];s.element.classList.contains(this.daClassname)&&this.moveBack(s.parent,s.element,s.index)}},e.prototype.moveTo=function(e,t,s){t.classList.add(this.daClassname),"last"===e||e>=s.children.length?s.insertAdjacentElement("beforeend",t):"first"!==e?s.children[e].insertAdjacentElement("beforebegin",t):s.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,s){t.classList.remove(this.daClassname),void 0!==e.children[s]?e.children[s].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const s=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(s,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},23:()=>{if(document.getElementById("map")){window.map=null,async function(){await ymaps3.ready;const e={center:window.innerWidth>768?[30.29070872801772,59.96487327442857]:[30.285804994973198,59.96628435583354],zoom:15},t={center:[30.286780500000003,59.96677256415152],zoom:15},{YMap:s,YMapDefaultSchemeLayer:i,YMapDefaultFeaturesLayer:a,YMapMarker:r}=ymaps3,n=new s(document.getElementById("map"),{location:e});n.addChild(new i),n.addChild(new a);const l=document.createElement("img");l.className="marker",l.src="../app/img/icons/pin.svg",l.onclick=()=>n.update({location:{...t,duration:400}}),n.addChild(new r({coordinates:t.center},l))}()}}},t={};function s(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}(()=>{"use strict";let e=!0;const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),t),e=!1,setTimeout((function(){e=!0}),t))},i=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(document.documentElement.classList.add("lock"),e=!1,setTimeout((function(){e=!0}),t))},a=()=>{i(),document.documentElement.classList.add("_menu-opened")},r=()=>{t(),document.documentElement.classList.remove("_menu-opened")},n=(e,t)=>{for(var s=0;s<e.length;s++)e[s].classList.remove(t)},l=e=>window.innerWidth>768?.005208335*window.innerWidth*e:100/390*(.1*window.innerWidth)*e;let o=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;e.classList.contains("_slide")||(e.classList.add("_slide"),e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=`${e.offsetHeight}px`,e.offsetHeight,e.style.overflow="hidden",e.style.height=s?`${s}px`:"0px",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,window.setTimeout((()=>{e.hidden=!s,!s&&e.style.removeProperty("height"),e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),!s&&e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideUpDone",{detail:{target:e}}))}),t))},d=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;return e.hidden?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(!e.classList.contains("_slide")){e.classList.add("_slide"),e.hidden=!e.hidden&&null,s&&e.style.removeProperty("height");let i=e.offsetHeight;e.style.overflow="hidden",e.style.height=s?`${s}px`:"0px",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,e.offsetHeight,e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=i+"px",e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),window.setTimeout((()=>{e.style.removeProperty("height"),e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideDownDone",{detail:{target:e}}))}),t)}}(e,t):o(e,t)};let c={getErrors(e){let t=0,s=e.querySelectorAll("*[data-required]");return s.length&&s.forEach((e=>{null===e.offsetParent&&"SELECT"!==e.tagName||e.disabled||(t+=this.validateInput(e))})),t},validateInput(e){let t=0;return"email"===e.dataset.required?(e.value=e.value.replace(" ",""),this.emailTest(e)?(this.addError(e),t++):this.removeError(e)):("checkbox"!==e.type||e.checked)&&e.value.trim()?this.removeError(e):(this.addError(e),t++),t},addError(e){e.classList.add("_form-error"),e.parentElement.classList.add("_form-error");let t=e.parentElement.querySelector(".form__error");t&&e.parentElement.removeChild(t),e.dataset.error&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="form__error">${e.dataset.error}</div>`)},removeError(e){e.classList.remove("_form-error"),e.parentElement.classList.remove("_form-error"),e.parentElement.querySelector(".form__error")&&e.parentElement.removeChild(e.parentElement.querySelector(".form__error"))},formClean(e){e.reset(),setTimeout((()=>{let t=e.querySelectorAll("input,textarea");for(let e=0;e<t.length;e++){const s=t[e];s.parentElement.classList.remove("_form-focus"),s.classList.remove("_form-focus"),c.removeError(s)}let s=e.querySelectorAll(".checkbox__input");if(s.length>0)for(let e=0;e<s.length;e++){s[e].checked=!1}}),0)},emailTest:e=>!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)};function p(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function u(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:p(t[s])&&p(e[s])&&Object.keys(t[s]).length>0&&u(e[s],t[s])}))}const h={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function m(){const e="undefined"!=typeof document?document:{};return u(e,h),e}const f={document:h,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function v(){const e="undefined"!=typeof window?window:{};return u(e,f),e}function g(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function b(){return Date.now()}function w(e,t){void 0===t&&(t="x");const s=v();let i,a,r;const n=function(e){const t=v();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(a=n.transform||n.webkitTransform,a.split(",").length>6&&(a=a.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new s.WebKitCSSMatrix("none"===a?"":a)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(",")),"x"===t&&(a=s.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(a=s.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),a||0}function y(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function S(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const a=i<0||arguments.length<=i?void 0:arguments[i];if(null!=a&&(s=a,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(a)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],r=Object.getOwnPropertyDescriptor(a,i);void 0!==r&&r.enumerable&&(y(e[i])&&y(a[i])?a[i].__swiper__?e[i]=a[i]:S(e[i],a[i]):!y(e[i])&&y(a[i])?(e[i]={},a[i].__swiper__?e[i]=a[i]:S(e[i],a[i])):e[i]=a[i])}}}var s;return e}function E(e,t,s){e.style.setProperty(t,s)}function x(e){let{swiper:t,targetPosition:s,side:i}=e;const a=v(),r=-t.translate;let n,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(t.cssModeFrameID);const d=s>r?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{n=(new Date).getTime(),null===l&&(l=n);const e=Math.max(Math.min((n-l)/o,1),0),d=.5-Math.cos(e*Math.PI)/2;let u=r+d*(s-r);if(c(u,s)&&(u=s),t.wrapperEl.scrollTo({[i]:u}),c(u,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:u})})),void a.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=a.requestAnimationFrame(p)};p()}function T(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function C(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function L(e){try{return void console.warn(e)}catch(e){}}function _(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function P(e,t){return v().getComputedStyle(e,null).getPropertyValue(t)}function M(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function A(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function k(e,t,s){const i=v();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let I,$,O;function z(){return I||(I=function(){const e=v(),t=m();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),I}function D(e){return void 0===e&&(e={}),$||($=function(e){let{userAgent:t}=void 0===e?{}:e;const s=z(),i=v(),a=i.navigator.platform,r=t||i.navigator.userAgent,n={ios:!1,android:!1},l=i.screen.width,o=i.screen.height,d=r.match(/(Android);?[\s\/]+([\d.]+)?/);let c=r.match(/(iPad).*OS\s([\d_]+)/);const p=r.match(/(iPod)(.*OS\s([\d_]+))?/),u=!c&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===a;let m="MacIntel"===a;return!c&&m&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(c=r.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),m=!1),d&&!h&&(n.os="android",n.android=!0),(c||u||p)&&(n.os="ios",n.ios=!0),n}(e)),$}function G(){return O||(O=function(){const e=v();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),O}var q={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const a=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function a(){i.off(e,a),a.__emitterProxy&&delete a.__emitterProxy;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];t.apply(i,r)}return a.__emitterProxy=t,i.on(e,a,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,a)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(a,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var a=arguments.length,r=new Array(a),n=0;n<a;n++)r[n]=arguments[n];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),i=e):(t=r[0].events,s=r[0].data,i=r[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const B=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},V=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},H=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),a=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=a,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&V(e,s)}))}const r=a+i-1;if(e.params.rewind||e.params.loop)for(let i=a-t;i<=r+t;i+=1){const t=(i%s+s)%s;(t<a||t>r)&&V(e,t)}else for(let i=Math.max(a-t,0);i<=Math.min(r+t,s-1);i+=1)i!==a&&(i>r||i<a)&&V(e,i)};var N={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(P(i,"padding-left")||0,10)-parseInt(P(i,"padding-right")||0,10),s=s-parseInt(P(i,"padding-top")||0,10)-parseInt(P(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:a,size:r,rtlTranslate:n,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=C(a,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let u=[];const h=[],m=[];let f=s.slidesOffsetBefore;"function"==typeof f&&(f=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const g=e.snapGrid.length,b=e.slidesGrid.length;let w=s.spaceBetween,y=-f,S=0,x=0;if(void 0===r)return;"string"==typeof w&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*r:"string"==typeof w&&(w=parseFloat(w)),e.virtualSize=-w,c.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(E(i,"--swiper-centered-offset-before",""),E(i,"--swiper-centered-offset-after",""));const T=s.grid&&s.grid.rows>1&&e.grid;let L;T?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const _="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){let a;if(L=0,c[i]&&(a=c[i]),T&&e.grid.updateSlide(i,a,c),!c[i]||"none"!==P(a,"display")){if("auto"===s.slidesPerView){_&&(c[i].style[e.getDirectionLabel("width")]="");const r=getComputedStyle(a),n=a.style.transform,l=a.style.webkitTransform;if(n&&(a.style.transform="none"),l&&(a.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?k(a,"width",!0):k(a,"height",!0);else{const e=t(r,"width"),s=t(r,"padding-left"),i=t(r,"padding-right"),n=t(r,"margin-left"),l=t(r,"margin-right"),o=r.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+n+l;else{const{clientWidth:t,offsetWidth:r}=a;L=e+s+i+n+l+(r-t)}}n&&(a.style.transform=n),l&&(a.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(r-(s.slidesPerView-1)*w)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),c[i]&&(c[i].style[e.getDirectionLabel("width")]=`${L}px`);c[i]&&(c[i].swiperSlideSize=L),m.push(L),s.centeredSlides?(y=y+L/2+S/2+w,0===S&&0!==i&&(y=y-r/2-w),0===i&&(y=y-r/2-w),Math.abs(y)<.001&&(y=0),s.roundLengths&&(y=Math.floor(y)),x%s.slidesPerGroup==0&&u.push(y),h.push(y)):(s.roundLengths&&(y=Math.floor(y)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&u.push(y),h.push(y),y=y+L+w),e.virtualSize+=L+w,S=L,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+v,n&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+w}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),T&&e.grid.updateWrapperSize(L,u),!s.centeredSlides){const t=[];for(let i=0;i<u.length;i+=1){let a=u[i];s.roundLengths&&(a=Math.floor(a)),u[i]<=e.virtualSize-r&&t.push(a)}u=t,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(o&&s.loop){const t=m[0]+w;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),a=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)u.push(u[u.length-1]+a)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&u.push(u[u.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==w){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${w}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(w||0)})),e-=w;const t=e-r;u=u.map((e=>e<=0?-f:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;if(m.forEach((t=>{e+=t+(w||0)})),e-=w,e<r){const t=(r-e)/2;u.forEach(((e,s)=>{u[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:h,slidesSizesGrid:m}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){E(i,"--swiper-centered-offset-before",-u[0]+"px"),E(i,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let a,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){const e=t.activeIndex+a;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(a=0;a<s.length;a+=1)if(void 0!==s[a]){const e=s[a].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:a,snapGrid:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;a&&(n=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(n-d),h=u+t.slidesSizesGrid[e],m=u>=0&&u<=t.size-t.slidesSizesGrid[e];(u>=0&&u<t.size-1||h>1&&h<=t.size||u<=0&&h>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),m&&i[e].classList.add(s.slideFullyVisibleClass),o.progress=a?-c:c,o.originalProgress=a?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===i)a=0,r=!0,n=!0;else{a=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||a<=0,n=l||a>=1,s&&(a=0),l&&(a=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),a=t.slidesGrid[s],r=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=a?(o-a)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:a,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:a}=e,r=e.virtual&&s.virtual.enabled,n=e.grid&&s.grid&&s.grid.rows>1,l=e=>C(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),r)if(s.loop){let t=a-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${a}"]`);else n?(o=t.filter((e=>e.column===a))[0],c=t.filter((e=>e.column===a+1))[0],d=t.filter((e=>e.column===a-1))[0]):o=t[a];o&&(o.classList.add(s.slideActiveClass),n?(c&&c.classList.add(s.slideNextClass),d&&d.classList.add(s.slidePrevClass)):(c=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),c&&c.classList.add(s.slideNextClass),d=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]),d&&d.classList.add(s.slidePrevClass))),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:a,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let a;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?a=e:i>=t[e]&&i<t[e+1]&&(a=e+1):i>=t[e]&&(a=e);return s.normalizeSlideIndex&&(a<0||void 0===a)&&(a=0),a}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(a.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/a.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===r&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&a.grid&&a.grid.rows>1;let u;if(t.virtual&&a.virtual.enabled&&a.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/a.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:r,activeIndex:d}),t.initialized&&H(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let a=e.closest(`.${i.slideClass}, swiper-slide`);!a&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!a&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(a=e)}));let r,n=!1;if(a)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===a){n=!0,r=e;break}if(!a||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=a,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var F={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:a}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let r=w(a,e);return r+=this.cssOverflowAdjustment(),s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:a,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,a.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,a.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:a.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;const o=r.minTranslate(),d=r.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,r.updateProgress(c),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return x({swiper:r,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function j(e){let{swiper:t,runCallbacks:s,direction:i,step:a}=e;const{activeIndex:r,previousIndex:n}=t;let l=i;if(l||(l=r>n?"next":r<n?"prev":"reset"),t.emit(`transition${a}`),s&&r!==n){if("reset"===l)return void t.emit(`slideResetTransition${a}`);t.emit(`slideChangeTransition${a}`),"next"===l?t.emit(`slideNextTransition${a}`):t.emit(`slidePrevTransition${a}`)}}var R={slideTo:function(e,t,s,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:h,enabled:m}=r;if(r.animating&&l.preventInteractionOnTransition||!m&&!i&&!a)return!1;const f=Math.min(r.params.slidesPerGroupSkip,n);let v=f+Math.floor((n-f)/r.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const g=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*g),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?n=e:t>=s&&t<i&&(n=e+1):t>=s&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&(u?g>r.translate&&g>r.minTranslate():g<r.translate&&g<r.minTranslate()))return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(p||0)!==n)return!1}let b;if(n!==(c||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(g),b=n>p?"next":n<p?"prev":"reset",u&&-g===r.translate||!u&&g===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(g),"reset"!==b&&(r.transitionStart(s,b),r.transitionEnd(s,b)),!1;if(l.cssMode){const e=r.isHorizontal(),s=u?g:-g;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),t&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return x({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(s,b),0===t?r.transitionEnd(s,b):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,b))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const a=this,r=a.grid&&a.params.grid&&a.params.grid.rows>1;let n=e;if(a.params.loop)if(a.virtual&&a.params.virtual.enabled)n+=a.virtual.slidesBefore;else{let e;if(r){const t=n*a.params.grid.rows;e=a.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=a.getSlideIndexByData(n);const t=r?Math.ceil(a.slides.length/a.params.grid.rows):a.slides.length,{centeredSlides:s}=a.params;let i=a.params.slidesPerView;"auto"===i?i=a.slidesPerViewDynamic():(i=Math.ceil(parseFloat(a.params.slidesPerView,10)),s&&i%2==0&&(i+=1));let l=t-e<i;if(s&&(l=l||e<Math.ceil(i/2)),l){const i=s?e<a.activeIndex?"prev":"next":e-a.activeIndex-1<a.params.slidesPerView?"next":"prev";a.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?a.realIndex:void 0})}if(r){const e=n*a.params.grid.rows;n=a.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=a.getSlideIndexByData(n)}return requestAnimationFrame((()=>{a.slideTo(n,t,s,i)})),a},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:a,params:r,animating:n}=i;if(!a)return i;let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<r.slidesPerGroupSkip?1:l,d=i.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return r.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:a,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o)return i;const c=i.virtual&&a.virtual.enabled;if(a.loop){if(d&&!c&&a.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),h=r.map((e=>p(e)));let m=r[h.indexOf(u)-1];if(void 0===m&&a.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(m=r[e>0?e-1:e])}let f=0;if(void 0!==m&&(f=n.indexOf(m),f<0&&(f=i.activeIndex-1),"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),a.rewind&&i.isBeginning){const a=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(a,e,t,s)}return a.loop&&0===i.activeIndex&&a.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const a=this;let r=a.activeIndex;const n=Math.min(a.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/a.params.slidesPerGroup),o=a.rtlTranslate?a.translate:-a.translate;if(o>=a.snapGrid[l]){const e=a.snapGrid[l];o-e>(a.snapGrid[l+1]-e)*i&&(r+=a.params.slidesPerGroup)}else{const e=a.snapGrid[l-1];o-e<=(a.snapGrid[l]-e)*i&&(r-=a.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,a.slidesGrid.length-1),a.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,r=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;a=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-i/2||r>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),r=e.getSlideIndex(C(s,`${n}[data-swiper-slide-index="${a}"]`)[0]),g((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-i?(e.loopFix(),r=e.getSlideIndex(C(s,`${n}[data-swiper-slide-index="${a}"]`)[0]),g((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};var W={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const a=()=>{C(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},r=t.grid&&s.grid&&s.grid.rows>1,n=s.slidesPerGroup*(r?s.grid.rows:1),l=t.slides.length%n!=0,o=r&&t.slides.length%s.grid.rows!=0,d=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?_("swiper-slide",[s.slideBlankClass]):_("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){d(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else if(o){if(s.loopAddBlankSlides){d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");a()}else a();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:a,activeSlideIndex:r,byController:n,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:h}=o,{centeredSlides:m}=h;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&h.virtual.enabled)return s&&(h.centeredSlides||0!==o.snapIndex?h.centeredSlides&&o.snapIndex<h.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let f=h.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(h.slidesPerView,10)),m&&f%2==0&&(f+=1));const v=h.slidesPerGroupAuto?f:h.slidesPerGroup;let g=v;g%v!=0&&(g+=v-g%v),g+=h.loopAdditionalSlides,o.loopedSlides=g;const b=o.grid&&h.grid&&h.grid.rows>1;d.length<f+g?L("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&L("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let S=o.activeIndex;void 0===r?r=o.getSlideIndex(d.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):S=r;const E="next"===i||!i,x="prev"===i||!i;let T=0,C=0;const _=b?Math.ceil(d.length/h.grid.rows):d.length,P=(b?d[r].column:r)+(m&&void 0===a?-f/2+.5:0);if(P<g){T=Math.max(g-P,v);for(let e=0;e<g-P;e+=1){const t=e-Math.floor(e/_)*_;if(b){const e=_-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&w.push(t)}else w.push(_-t-1)}}else if(P+f>_-g){C=Math.max(P-(_-2*g),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/_)*_;b?d.forEach(((e,s)=>{e.column===t&&y.push(s)})):y.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),x&&w.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),E&&y.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===h.slidesPerView?o.updateSlides():b&&(w.length>0&&x||y.length>0&&E)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),h.watchSlidesProgress&&o.updateSlidesOffset(),s)if(w.length>0&&x){if(void 0===t){const e=o.slidesGrid[S],t=o.slidesGrid[S+T]-e;l?o.setTranslate(o.translate-t):(o.slideTo(S+T,0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(a){const e=b?w.length/h.grid.rows:w.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(y.length>0&&E)if(void 0===t){const e=o.slidesGrid[S],t=o.slidesGrid[S-C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(S-C,0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?y.length/h.grid.rows:y.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!n){const e={slideRealIndex:t,direction:i,setTranslate:a,activeSlideIndex:r,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===h.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function Y(e,t,s){const i=v(),{params:a}=e,r=a.edgeSwipeDetection,n=a.edgeSwipeThreshold;return!r||!(s<=n||s>=i.innerWidth-n)||"prevent"===r&&(t.preventDefault(),!0)}function X(e){const t=this,s=m();let i=e;i.originalEvent&&(i=i.originalEvent);const a=t.touchEventsData;if("pointerdown"===i.type){if(null!==a.pointerId&&a.pointerId!==i.pointerId)return;a.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(a.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void Y(t,i,i.targetTouches[0].pageX);const{params:r,touches:n,enabled:l}=t;if(!l)return;if(!r.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let o=i.target;if("wrapper"===r.touchEventsTarget&&!t.wrapperEl.contains(o))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(a.isTouched&&a.isMoved)return;const d=!!r.noSwipingClass&&""!==r.noSwipingClass,c=i.composedPath?i.composedPath():i.path;d&&i.target&&i.target.shadowRoot&&c&&(o=c[0]);const p=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,u=!(!i.target||!i.target.shadowRoot);if(r.noSwiping&&(u?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===m()||s===v())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(p,o):o.closest(p)))return void(t.allowClick=!0);if(r.swipeHandler&&!o.closest(r.swipeHandler))return;n.currentX=i.pageX,n.currentY=i.pageY;const h=n.currentX,f=n.currentY;if(!Y(t,i,h))return;Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=h,n.startY=f,a.touchStartTime=b(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(a.allowThresholdMove=!1);let g=!0;o.matches(a.focusableElements)&&(g=!1,"SELECT"===o.nodeName&&(a.isTouched=!1)),s.activeElement&&s.activeElement.matches(a.focusableElements)&&s.activeElement!==o&&s.activeElement.blur();const w=g&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!w||o.isContentEditable||i.preventDefault(),r.freeMode&&r.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function U(e){const t=m(),s=this,i=s.touchEventsData,{params:a,touches:r,rtlTranslate:n,enabled:l}=s;if(!l)return;if(!a.simulateTouch&&"mouse"===e.pointerType)return;let o,d=e;if(d.originalEvent&&(d=d.originalEvent),"pointermove"===d.type){if(null!==i.touchId)return;if(d.pointerId!==i.pointerId)return}if("touchmove"===d.type){if(o=[...d.changedTouches].filter((e=>e.identifier===i.touchId))[0],!o||o.identifier!==i.touchId)return}else o=d;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",d));const c=o.pageX,p=o.pageY;if(d.preventedByNestedSwiper)return r.startX=c,void(r.startY=p);if(!s.allowTouchMove)return d.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(r,{startX:c,startY:p,currentX:c,currentY:p}),i.touchStartTime=b()));if(a.touchReleaseOnEdges&&!a.loop)if(s.isVertical()){if(p<r.startY&&s.translate<=s.maxTranslate()||p>r.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<r.startX&&s.translate<=s.maxTranslate()||c>r.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",d),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=c,r.currentY=p;const u=r.currentX-r.startX,h=r.currentY-r.startY;if(s.params.threshold&&Math.sqrt(u**2+h**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&r.currentY===r.startY||s.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:u*u+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(u))/Math.PI,i.isScrolling=s.isHorizontal()?e>a.touchAngle:90-e>a.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",d),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!a.cssMode&&d.cancelable&&d.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&d.stopPropagation();let f=s.isHorizontal()?u:h,v=s.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;a.oneWayMovement&&(f=Math.abs(f)*(n?1:-1),v=Math.abs(v)*(n?1:-1)),r.diff=f,f*=a.touchRatio,n&&(f=-f,v=-v);const g=s.touchesDirection;s.swipeDirection=f>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const w=s.params.loop&&!a.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(w&&y&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!a.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",d)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&g!==s.touchesDirection&&w&&y&&Math.abs(f)>=1)return Object.assign(r,{startX:c,startY:p,currentX:c,currentY:p,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",d),i.isMoved=!0,i.currentTranslate=f+i.startTranslate;let S=!0,E=a.resistanceRatio;if(a.touchReleaseOnEdges&&(E=0),f>0?(w&&y&&i.allowThresholdMove&&i.currentTranslate>(a.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(S=!1,a.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+f)**E))):f<0&&(w&&y&&i.allowThresholdMove&&i.currentTranslate<(a.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===a.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(a.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(S=!1,a.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-f)**E))),S&&(d.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),a.threshold>0){if(!(Math.abs(f)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=s.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}a.followFinger&&!a.cssMode&&((a.freeMode&&a.freeMode.enabled&&s.freeMode||a.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),a.freeMode&&a.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function K(e){const t=this,s=t.touchEventsData;let i,a=e;a.originalEvent&&(a=a.originalEvent);if("touchend"===a.type||"touchcancel"===a.type){if(i=[...a.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(a.pointerId!==s.pointerId)return;i=a}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(a.type)){if(!(["pointercancel","contextmenu"].includes(a.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:r,touches:n,rtlTranslate:l,slidesGrid:o,enabled:d}=t;if(!d)return;if(!r.simulateTouch&&"mouse"===a.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",a),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=b(),p=c-s.touchStartTime;if(t.allowClick){const e=a.path||a.composedPath&&a.composedPath();t.updateClickedSlide(e&&e[0]||a.target,e),t.emit("tap click",a),p<300&&c-s.lastClickTime<300&&t.emit("doubleTap doubleClick",a)}if(s.lastClickTime=b(),g((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===n.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let u;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,u=r.followFinger?l?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[e+t]?u>=o[e]&&u<o[e+t]&&(h=e,m=o[e+t]-o[e]):u>=o[e]&&(h=e,m=o[o.length-1]-o[o.length-2])}let f=null,v=null;r.rewind&&(t.isBeginning?v=r.virtual&&r.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const w=(u-o[h])/m,y=h<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(p>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?f:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(w>1-r.longSwipesRatio?t.slideTo(h+y):null!==v&&w<0&&Math.abs(w)>r.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(a.target===t.navigation.nextEl||a.target===t.navigation.prevEl)?a.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==f?f:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h))}}function Q(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:a,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=a,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function J(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Z(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let a;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();a=0===r?0:(e.translate-e.minTranslate())/r,a!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ee(e){const t=this;B(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function te(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const se=(e,t)=>{const s=m(),{params:i,el:a,wrapperEl:r,device:n}=e,l=!!i.nested,o="on"===t?"addEventListener":"removeEventListener",d=t;s[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),a[o]("touchstart",e.onTouchStart,{passive:!1}),a[o]("pointerdown",e.onTouchStart,{passive:!1}),s[o]("touchmove",e.onTouchMove,{passive:!1,capture:l}),s[o]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[o]("touchend",e.onTouchEnd,{passive:!0}),s[o]("pointerup",e.onTouchEnd,{passive:!0}),s[o]("pointercancel",e.onTouchEnd,{passive:!0}),s[o]("touchcancel",e.onTouchEnd,{passive:!0}),s[o]("pointerout",e.onTouchEnd,{passive:!0}),s[o]("pointerleave",e.onTouchEnd,{passive:!0}),s[o]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&a[o]("click",e.onClick,!0),i.cssMode&&r[o]("scroll",e.onScroll),i.updateOnWindowResize?e[d](n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",Q,!0):e[d]("observerUpdate",Q,!0),a[o]("load",e.onLoad,{capture:!0})};const ie=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var ae={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function re(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],a=s[i];"object"==typeof a&&null!==a?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in a?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),S(t,s)):S(t,s)):S(t,s)}}const ne={eventsEmitter:q,update:N,translate:F,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),j({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),j({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:R,loop:W,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=X.bind(e),e.onTouchMove=U.bind(e),e.onTouchEnd=K.bind(e),e.onDocumentTouchStart=te.bind(e),t.cssMode&&(e.onScroll=Z.bind(e)),e.onClick=J.bind(e),e.onLoad=ee.bind(e),se(e,"on")},detachEvents:function(){se(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:a}=e,r=i.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const n=e.getBreakpoint(r,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in r?r[n]:void 0)||e.originalParams,o=ie(e,i),d=ie(e,l),c=i.enabled;o&&!d?(a.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(a.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&a.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,a=l[t]&&l[t].enabled;s&&!a&&e[t].disable(),!s&&a&&e[t].enable()}));const p=l.direction&&l.direction!==i.direction,u=i.loop&&(l.slidesPerView!==i.slidesPerView||p),h=i.loop;p&&s&&e.changeDirection(),S(e.params,l);const m=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!m?e.disable():!c&&m&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),s&&(u?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&f?(e.loopCreate(t),e.updateSlides()):h&&!f&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const a=v(),r="window"===t?a.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:r,value:l}=n[e];"window"===t?a.matchMedia(`(min-width: ${l}px)`).matches&&(i=r):l<=s.clientWidth&&(i=r)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:a,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),a.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},le={};class oe{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),a=0;a<s;a++)i[a]=arguments[a];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=S({},t),e&&!t.el&&(t.el=e);const r=m();if(t.el&&"string"==typeof t.el&&r.querySelectorAll(t.el).length>1){const e=[];return r.querySelectorAll(t.el).forEach((s=>{const i=S({},t,{el:s});e.push(new oe(i))})),e}const n=this;n.__swiper__=!0,n.support=z(),n.device=D({userAgent:t.userAgent}),n.browser=G(),n.eventsListeners={},n.eventsAnyListeners=[],n.modules=[...n.__modules__],t.modules&&Array.isArray(t.modules)&&n.modules.push(...t.modules);const l={};n.modules.forEach((e=>{e({params:t,swiper:n,extendParams:re(t,l),on:n.on.bind(n),once:n.once.bind(n),off:n.off.bind(n),emit:n.emit.bind(n)})}));const o=S({},ae,l);return n.params=S({},o,le,t),n.originalParams=S({},n.params),n.passedParams=S({},t),n.params&&n.params.on&&Object.keys(n.params.on).forEach((e=>{n.on(e,n.params.on[e])})),n.params&&n.params.onAny&&n.onAny(n.params.onAny),Object.assign(n,{enabled:n.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===n.params.direction,isVertical:()=>"vertical"===n.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:n.params.allowSlideNext,allowSlidePrev:n.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:n.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:n.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),n.emit("_swiper"),n.params.init&&n.init(),n}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=M(C(t,`.${s.slideClass}, swiper-slide`)[0]);return M(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=C(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),a=(s.maxTranslate()-i)*e+i;s.translateTo(a,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:a,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?i[l].swiperSlideSize:0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?a[e]+r[e]-a[l]<n:a[e]-a[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){a[l]-a[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let a;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&B(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;a=e.slideTo(t.length-1,0,!1,!0)}else a=e.slideTo(e.activeIndex,0,!1,!0);a||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return C(s,i())[0]})();return!a&&t.params.createElements&&(a=_("div",t.params.wrapperClass),s.append(a),C(s,`.${t.params.slideClass}`).forEach((e=>{a.append(e)}))),Object.assign(t,{el:s,wrapperEl:a,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:a,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===P(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===P(s,"direction")),wrongRTL:"-webkit-box"===P(a,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?B(t,e):e.addEventListener("load",(e=>{B(t,e.target)}))})),H(t),t.initialized=!0,H(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:a,wrapperEl:r,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),a.removeAttribute("style"),r.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){S(le,e)}static get extendedDefaults(){return le}static get defaults(){return ae}static installModule(e){oe.prototype.__modules__||(oe.prototype.__modules__=[]);const t=oe.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>oe.installModule(e))),oe):(oe.installModule(e),oe)}}function de(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((a=>{if(!s[a]&&!0===s.auto){let r=C(e.el,`.${i[a]}`)[0];r||(r=_("div",i[a]),r.className=i[a],e.el.append(r)),s[a]=r,t[a]=r}})),s}function ce(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const r=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function l(e,s){const i=t.params.navigation;(e=r(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return l(s,!1),void l(e,!1);l(s,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function d(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),a("navigationPrev"))}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),a("navigationNext"))}function p(){const e=t.params.navigation;if(t.params.navigation=de(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=r(s),i=r(i);const a=(s,i)=>{s&&s.addEventListener("click","next"===i?c:d),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>a(e,"next"))),i.forEach((e=>a(e,"prev")))}function u(){let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?c:d),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?h():(p(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{u()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s),t.enabled?o():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=r(i),n=r(n);const l=s.target;if(t.params.navigation.hideOnClick&&!n.includes(l)&&!i.includes(l)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),a(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),p(),o()},disable:h,update:o,init:p,destroy:u})}function pe(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function ue(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;const r="swiper-pagination";let n;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;const o=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function p(e){const s=e.target.closest(pe(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=M(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function u(){const e=t.rtl,s=t.params.pagination;if(d())return;let i,r,p=t.pagination.el;p=o(p);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,r=t.previousSnapIndex):(r=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const a=t.pagination.bullets;let o,d,u;if(s.dynamicBullets&&(n=k(a[0],t.isHorizontal()?"width":"height",!0),p.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==r&&(l+=i-(r||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),d=o+(Math.min(a.length,s.dynamicMainBullets)-1),u=(d+o)/2),a.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)a.forEach((e=>{const a=M(e);a===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(a>=o&&a<=d&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),a===o&&c(e,"prev"),a===d&&c(e,"next"))}));else{const e=a[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&a.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=a[o],t=a[d];for(let e=o;e<=d;e+=1)a[e]&&a[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(s.dynamicBullets){const i=Math.min(a.length,s.dynamicMainBullets+4),r=(n*i-n)/2-u*n,l=e?"right":"left";a.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${r}px`}))}}p.forEach(((e,r)=>{if("fraction"===s.type&&(e.querySelectorAll(pe(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(pe(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(h)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const r=(i+1)/h;let n=1,l=1;"horizontal"===a?n=r:l=r,e.querySelectorAll(pe(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,h),0===r&&a("paginationRender",e)):(0===r&&a("paginationRender",e),a("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(d())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=o(i);let r="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?r+=e.renderBullet.call(t,s,e.bulletClass):r+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=r||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(pe(e.bulletClass)))})),"custom"!==e.type&&a("paginationRender",i[0])}function m(){t.params.pagination=de(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>A(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=o(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",p),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(d())return;let s=t.pagination.el;s&&(s=o(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",p))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=o(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?v():(m(),h(),u())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),i("snapIndexChange",(()=>{u()})),i("snapGridLengthChange",(()=>{h(),u()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{u()})),i("click",((e,s)=>{const i=s.target,r=o(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=r[0].classList.contains(t.params.pagination.hiddenClass);a(!0===e?"paginationShow":"paginationHide"),r.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const v=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),h(),u()},disable:v,render:h,update:u,init:m,destroy:f})}function he(e,t){const s=T(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function me(e){let{swiper:t,duration:s,transformElements:i,allSlides:a}=e;const{activeIndex:r}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=a?i:i.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0];return e.parentElement})(e):e;return t.getSlideIndex(s)===r})),e.forEach((e=>{!function(e,t){t&&e.addEventListener("transitionend",(function s(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",s))}))}(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function fe(e){let{swiper:t,extendParams:s,on:i}=e;s({fadeEffect:{crossFade:!1}});!function(e){const{effect:t,swiper:s,on:i,setTranslate:a,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;i("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),i("setTranslate",(()=>{s.params.effect===t&&a()})),i("setTransition",((e,i)=>{s.params.effect===t&&r(i)})),i("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),i("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(a(),c=!1)})))}))}({effect:"fade",swiper:t,on:i,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let s=0;s<e.length;s+=1){const e=t.slides[s];let i=-e.swiperSlideOffset;t.params.virtualTranslate||(i-=t.translate);let a=0;t.isHorizontal()||(a=i,i=0);const r=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),n=he(0,e);n.style.opacity=r,n.style.transform=`translate3d(${i}px, ${a}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>T(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),me({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}Object.keys(ne).forEach((e=>{Object.keys(ne[e]).forEach((t=>{oe.prototype[t]=ne[e][t]}))})),oe.use([function(e){let{swiper:t,on:s,emit:i}=e;const a=v();let r=null,n=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==a.ResizeObserver?t&&!t.destroyed&&t.initialized&&(r=new ResizeObserver((e=>{n=a.requestAnimationFrame((()=>{const{width:s,height:i}=t;let a=s,r=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(a=i?i.width:(s[0]||s).inlineSize,r=i?i.height:(s[0]||s).blockSize)})),a===s&&r===i||l()}))})),r.observe(t.el)):(a.addEventListener("resize",l),a.addEventListener("orientationchange",o))})),s("destroy",(()=>{n&&a.cancelAnimationFrame(n),r&&r.unobserve&&t.el&&(r.unobserve(t.el),r=null),a.removeEventListener("resize",l),a.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:a}=e;const r=[],n=v(),l=function(e,s){void 0===s&&(s={});const i=new(n.MutationObserver||n.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void a("observerUpdate",e[0]);const s=function(){a("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(s):n.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),r.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=A(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{r.forEach((e=>{e.disconnect()})),r.splice(0,r.length)}))}]);let ve=null;const ge=(e,t,s)=>{const i=e.slides;i.length&&t&&i.forEach((e=>{e.querySelector(s).innerHTML=`${t.querySelector(".swiper-pagination-bullet-active").innerHTML}`}))},be=(e,t)=>{t&&e.el&&(t.innerHTML=`${e.el.querySelector(".swiper-pagination-bullet-active").innerHTML}`)},we=e=>{if(e.slides.length>=4){const t=e.pagination.bullets,s=e.slides,i=e.realIndex;t.length?(n(t,"_revealed"),window.innerWidth<=768&&t[i].classList.add("_revealed"),t[i+1]&&t[i+1].classList.add("_revealed"),t[i+2]&&t[i+2].classList.add("_revealed"),window.innerWidth>768&&t[i+3]&&t[i+3].classList.add("_revealed"),window.innerWidth<=768&&(i===s.length-2||i===s.length-1)&&(t[s.length-3].classList.add("_revealed"),t[s.length-2].classList.add("_revealed"),t[s.length-1].classList.add("_revealed")),window.innerWidth>768&&i===s.length-1&&(t[0].classList.add("_revealed"),t[1].classList.add("_revealed"),t[2].classList.add("_revealed"))):window.innerWidth>768&&t.forEach((e=>{e.classList.contains("swiper-pagination-bullet-active")||e.classList.add("_revealed")}))}},ye=e=>{const t=Array.from(e.el.querySelectorAll(".swiper-slide"));n(t,"_revealed"),t.forEach(((e,s)=>{e.classList.contains("swiper-slide-active")&&(t[s].classList.add("_revealed"),window.innerWidth>768&&(t[s+1]&&t[s+1].classList.add("_revealed"),t[s+2]&&t[s+2].classList.add("_revealed")))}))};window.addEventListener("load",(function(e){document.querySelector(".search-box__slider")&&new oe(".search-box__slider",{modules:[ce,fe],observer:!0,observeParents:!0,observeSlideChildren:!0,slidesPerView:1,speed:700,loop:!0,effect:"fade",navigation:{prevEl:".search-box__slider-nav .search-box__slider-arr_prev",nextEl:".search-box__slider-nav .search-box__slider-arr_next"}}),document.querySelector(".hero__slider")&&new oe(".hero__slider",{modules:[ce,ue],observer:!0,observeParents:!0,autoHeight:!0,slidesPerView:1,speed:800,loop:!0,navigation:{prevEl:".hero .sl-nav__arrow_prev",nextEl:".hero .sl-nav__arrow_next"},pagination:{el:".hero__sl-control .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{direction:"vertical",slidesPerView:"auto"}},on:{init:e=>{const t=e.passedParams.spaceBetween,s=e.slides[0].clientHeight+t;e.el.style.height=s+"px",ge(e,e.pagination.el,".slide-hero__number")},slideChange:e=>{ge(e,e.pagination.el,".slide-hero__number"),we(e)}}}),document.querySelector(".recommendations__slider")&&new oe(".recommendations__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:1.4,spaceBetween:65,speed:800,loop:!0,longSwipes:!1,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".recommendations .sl-nav__arrow_prev",nextEl:".recommendations .sl-nav__arrow_next"},pagination:{el:".recommendations .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:4,spaceBetween:137}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".recommendations__number")),we(e),ye(e)},realIndexChange:e=>{be(e.pagination,document.querySelector(".recommendations__number")),we(e)},slideChangeTransitionStart:e=>{ye(e)},touchMove:e=>{ye(e)}}}),document.querySelector(".tests__slider")&&new oe(".tests__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:1,spaceBetween:30,speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".tests .sl-nav__arrow_prev",nextEl:".tests .sl-nav__arrow_next"},pagination:{el:".tests .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:1.01}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".tests__active-number")),we(e)},slideChange:e=>{be(e.pagination,document.querySelector(".tests__active-number"))},realIndexChange:e=>{we(e)}}}),document.querySelector(".collections__slider")&&new oe(".collections__slider",{modules:[ce,ue],observer:!0,observeParents:!0,speed:1e3,loop:!0,slidesPerView:1.6,spaceBetween:64,watchSlidesProgress:!0,watchSlidesVisibility:!0,resistance:!1,navigation:{prevEl:".collections .sl-nav__arrow_prev",nextEl:".collections .sl-nav__arrow_next"},pagination:{el:".collections .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:"auto",spaceBetween:420}},on:{afterInit:e=>{be(e.pagination,document.querySelector(".collections__active-number"))},slideChange:e=>{e.el.classList.contains("_slide")||e.el.classList.add("_slide"),be(e.pagination,document.querySelector(".collections__active-number")),we(e)}}}),document.querySelector(".categories__slider")&&(window.innerWidth<=768&&!ve?ve=new oe(".categories__slider",{modules:[ce,ue],observer:!0,observeParents:!0,slidesPerView:2,spaceBetween:l(.8),speed:1e3,loop:!0,navigation:{prevEl:".categories .sl-nav__arrow_prev",nextEl:".categories .sl-nav__arrow_next"},pagination:{el:".categories .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1<10?"0":"")+(e+1)+"</span>"}},on:{afterInit:e=>{setTimeout((()=>{we(e)}),0)},slideChangeTransitionStart:e=>{we(e)}}}):window.innerWidth>768&&ve&&(ve.destroy(),ve=null))}));s(23);new class{constructor(){this._this=this,this.classes={sel:"select",body:"select__body",label:"select__label",title:"select__title",val:"select__value",content:"select__content",options:"select__options",option:"select__option",scroll:"select__scroll",group:"select__group",inp:"select__input",asset:"select__asset",txt:"select__text",hint:"select__hint",active:"_select-active",focused:"_select-focused",opened:"_select-opened",filled:"_select-filled",selected:"_select-selected",disabled:"_select-disabled",list:"_select-list",error:"_select-error",multiple:"_select-multiple",checkbox:"_select-checkbox",label:"_select-label"};const e=document.querySelectorAll("select");e.length&&this.init(e)}init(e){e.forEach(((e,t)=>{this.initSelItem(e,t+1)})),document.addEventListener("click",function(e){this.setActions(e)}.bind(this)),document.addEventListener("keydown",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusin",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusout",function(e){this.setActions(e)}.bind(this))}initSelItem(e,t){const s=this,i=document.createElement("div");if(i.classList.add(this.classes.sel),e.parentNode.insertBefore(i,e),i.appendChild(e),e.hidden=!0,t&&(e.dataset.selId=t),this.getPlaceholder(e)&&(e.dataset.optPlaceholder=this.getPlaceholder(e).value,this.getPlaceholder(e).label.show)){this.getSelect(i,this.classes.title).twinSel.insertAdjacentHTML("afterbegin",`<span class="${this.classes.label}">${this.getPlaceholder(e).label.text?this.getPlaceholder(e).label.text:this.getPlaceholder(e).value}</span>`)}i.insertAdjacentHTML("beforeend",`<div class="${this.classes.body}"><div hidden class="${this.classes.options}"></div></div>`),this.build(e),e.dataset.speed=e.dataset.speed?e.dataset.speed:"150",e.addEventListener("change",(function(e){s.initSelections(e)}))}build(e){const t=e.parentElement;t.dataset.selId=e.dataset.selId,this.setValue(t,e),this.setOptions(t,e),e.dataset.selAddonClass&&t.classList.add(`select_${e.dataset.selAddonClass}`),e.multiple?t.classList.add(this.classes.multiple):t.classList.remove(this.classes.multiple),e.hasAttribute("data-sel-checkboxes")&&e.multiple?t.classList.add(this.classes.checkbox):t.classList.remove(this.classes.checkbox),this.disableSelect(t,e),e.hasAttribute("data-sel-search")&&this.setSearchActions(t),e.hasAttribute("data-sel-opened")&&this.setAction(t),e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selHint}</div>`),e.hasAttribute("data-show-val")?t.classList.add("_select-show-val"):t.classList.remove("_select-show-val")}setValue(e,t){const s=this.getSelect(e,this.classes.body).twinSel,i=this.getSelect(e,this.classes.title).twinSel;i&&i.remove(),s.insertAdjacentHTML("afterbegin",this.getValue(e,t))}setOptions(e,t){const s=this.getSelect(e,this.classes.options).twinSel;s.innerHTML=this.getOptions(t),s.querySelector(`.${this.classes.option}`).classList.add(this.classes.selected)}disableSelect(e,t){t.disabled?(e.classList.add(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!0):(e.classList.remove(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!1)}setActions(e){const t=e.target,s=e.type;if(t.closest(this.getClass(this.classes.sel))||t.closest(this.getClass(this.classes.list))){const i=t.closest(".select")?t.closest(".select"):document.querySelector(`.${this.classes.sel}[data-sel-id="${t.closest(this.getClass(this.classes.list)).dataset.selectId}"]`),a=this.getSelect(i).relativeSel;if("click"===s){if(!a.disabled)if(t.closest(this.getClass(this.classes.list))){const e=t.closest(this.getClass(this.classes.list)),s=document.querySelector(`.${this.classes.sel}[data-sel-id="${e.dataset.selId}"] .select__option[data-opt-val="${e.dataset.optVal}"]`);this.setOptionAction(i,a,s)}else if(t.closest(this.getClass(this.classes.title)))this.setAction(i);else if(t.closest(this.getClass(this.classes.option))){const e=t.closest(this.getClass(this.classes.option));this.setOptionAction(i,a,e)}}else"focusin"===s||"focusout"===s?t.closest(this.getClass(this.classes.sel))&&("focusin"===s?i.classList.add(this.classes.focused):(i.classList.remove(this.classes.focused),a.hasAttribute("data-validate")&&(i.classList.contains(this.classes.filled)?this.removeErr(a,i):this.addErr(a,i)))):"keydown"===s&&"Escape"===e.code&&this.closeGroup()}else this.closeGroup()}setAction(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;if(t.closest("[data-one-select]")){const e=t.closest("[data-one-select]");this.closeGroup(e)}s.classList.contains("_slide")||(e.classList.toggle(this.classes.opened),d(s,t.dataset.speed),e.classList.contains(this.classes.opened)&&t.hasAttribute("data-validate")&&e.classList.contains(this.classes.error)&&this.removeErr(t,e))}closeGroup(e){const t=(e||document).querySelectorAll(`${this.getClass(this.classes.sel)}${this.getClass(this.classes.opened)}`);t.length&&t.forEach((e=>{this.closeItem(e)}))}closeItem(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;s.classList.contains("_slide")||(e.classList.remove(this.classes.opened),o(s,t.dataset.speed))}setOptionAction(e,t,s){if(t.multiple){s.classList.toggle(this.classes.selected);this.getData(t).elements.forEach((e=>{e.removeAttribute("selected")}));e.querySelectorAll(this.getClass(this.classes.selected)).forEach((e=>{t.querySelector(`option[value="${e.dataset.optVal}"]`).setAttribute("selected","selected")})),s.classList.contains(this.classes.selected)||(console.log(t.querySelector(`option[value="${s.dataset.optVal}"]`)),t.querySelector(`option[value="${s.dataset.optVal}"]`).removeAttribute("selected"))}else e.querySelectorAll(".select__option").forEach((e=>e.classList.remove(this.classes.selected))),s.classList.add(this.classes.selected),t.hasAttribute("data-show-selection")||(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`)&&(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`).hidden=!1),s.hidden=!0),t.value=s.hasAttribute("data-opt-val")?s.dataset.optVal:s.textContent,this.setAction(e);this.setValue(e,t),this.setSelections(t)}setSearchActions(e){const t=this,s=this.getSelect(e,this.classes.inp).twinSel,i=this.getSelect(e,this.classes.options).twinSel.querySelectorAll(`.${this.classes.option}`);s.addEventListener("input",(function(){i.forEach((e=>{e.textContent.toUpperCase().indexOf(s.value.toUpperCase())>=0?e.hidden=!1:e.hidden=!0})),!0===i.hidden&&t.setAction(e)}))}setSubtitle(e){}addErr(e,t){t.classList.add(this.classes.error),e.dataset.selError&&!e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selError}</div>`)}removeErr(e,t){t.classList.contains(this.classes.error)&&t.classList.remove(this.classes.error),e.parentElement.querySelector(".select__hint")&&!e.dataset.selHint&&e.parentElement.removeChild(e.parentElement.querySelector(".select__hint"))}getClass(e){return`.${e}`}getSelect(e,t){return{relativeSel:e.querySelector("select"),twinSel:e.querySelector(this.getClass(t))}}getValue(e,t){let s,i,a=this.getData(t,2).html;if(a=a.length?a:t.dataset.selLabel?t.dataset.selLabel:"",this.getData(t).values.length?e.classList.add(this.classes.active):e.classList.remove(this.classes.active),t.hasAttribute("data-sel-label")&&(s=t.dataset.selLabel?` data-sel-label="${t.dataset.selLabel}"`:' data-sel-label="Выбор"',i=` ${this.classes.label}`),t.multiple&&t.hasAttribute("data-sel-list")&&(a=this.getData(t).elements.map((t=>`<span data-opt-id="${e.dataset.selId}" data-opt-val="${t.value}" class="_list-item">${this.getContent(t)}</span>`)).join(""),t.dataset.list&&document.querySelector(t.dataset.list)&&(document.querySelector(t.dataset.list).innerHTML=a,t.hasAttribute("data-sel-search")&&(a=!1))),t.hasAttribute("data-sel-search"))return`<div class="${this.classes.title}"><span ${s} class="${this.classes.val}"><input autocomplete="off" type="search" placeholder="${a}" data-placeholder="${a}" class="${this.classes.inp}"></span></div>`;{const e=this.getData(t).elements.length&&this.getData(t).elements[0].dataset.optClass?` ${this.getData(t).elements[0].dataset.optClass}`:"";return`<button type="button" class="${this.classes.title}"><span ${s||""} class="${this.classes.val} ${i||""}"><span class="${this.classes.content}${e}">${a}</span></span></button>`}}getOptions(e){const t=e.hasAttribute("data-sel-scroll")?"data-simplebar":"";let s=e.dataset.selScroll?`style="max-height:${e.dataset.selScroll}px"`:"",i=Array.from(e.options);if(i.length){let a="";return(this.getPlaceholder(e)&&!this.getPlaceholder(e).show||e.multiple)&&(i=i.filter((e=>e.value))),a+=t?`<div ${t} ${s} class="${this.classes.scroll}">`:"",i.forEach((t=>{a+=this.getOption(t,e)})),a+=t?"</div>":"",a}}getOption(e,t){const s=e.selected&&t.multiple?` ${this.classes.selected}`:"",i=!e.selected||t.hasAttribute("data-show-selection")||t.multiple?"":"hidden",a=e.dataset.optClass?` ${e.dataset.optClass}`:"",r=!!e.dataset.optionLink&&e.dataset.optionLink,n=e.hasAttribute("data-option-link-target")?'target="_blank"':"";let l="";return l+=r?`<a ${n} ${i} href="${r}" data-opt-val="${e.value}" class="${this.classes.option}${a}${s}">`:`<button ${i} class="${this.classes.option}${a}${s}" data-opt-val="${e.value}" type="button">`,l+=this.getContent(e),l+=r?"</a>":"</button>",l}getContent(e){const t=e.dataset.optAsset?`${e.dataset.optAsset}`:"",s=t.indexOf("img")>=0?`<img src="${t}" alt="">`:t;let i="";return i+=t?`<span class="${this.classes.group}">`:"",i+=t?`<span class="${this.classes.asset}">`:"",i+=t?s:"",i+=t?"</span>":"",i+=t?`<span class="${this.classes.txt}">`:"",i+=e.textContent,i+=t?"</span>":"",i+=t?"</span>":"",i}getPlaceholder(e){const t=Array.from(e.options).find((e=>!e.value));if(t)return t.classList.add(this.classes.subtitle),{value:t.textContent,show:t.hasAttribute("data-sel-ph-show"),label:{show:t.hasAttribute("data-sel-ph"),text:t.dataset.optPlaceholder}}}getData(e){let t=[];return e.multiple?t=Array.from(e.options).filter((e=>e.value)).filter((e=>e.selected)):t.push(e.options[e.selectedIndex]),{elements:t.map((e=>e)),values:t.filter((e=>e.value)).map((e=>e.value)),html:t.map((e=>this.getContent(e)))}}initSelections(e){const t=e.target;this.build(t),this.setSelections(t)}setSelections(e){const t=e.parentElement;if(e.hasAttribute("data-submit")&&e.value){let t=document.createElement("button");t.type="submit",e.closest("form").append(t),t.click(),t.remove()}e.parentElement.classList.add(this.classes.filled),this.selection(t,e)}selection(e,t){document.dispatchEvent(new CustomEvent("selection",{detail:{select:t}}))}}({});s(726);document.addEventListener("DOMContentLoaded",(function(){const e=document.querySelector(".header__search-input");e&&(e.addEventListener("focusin",(function(){document.documentElement.classList.add("_search-box-opened")})),e.addEventListener("input",(function(){e.querySelector("input").value.length?e.closest("form").classList.contains("_filled")||e.closest("form").classList.add("_filled"):e.closest("form").classList.contains("_filled")&&e.closest("form").classList.remove("_filled")})),e.closest("form").addEventListener("submit",(function(){document.documentElement.classList.contains("_search-box-opened")&&document.documentElement.classList.remove("_search-box-opened"),e.closest("form").classList.contains("_filled")&&e.closest("form").classList.remove("_filled"),e.querySelector("input").blur()})));document.addEventListener("click",(e=>{const t=e.target;if(t.closest(".heart-btn__icon")&&(t.closest(".heart-btn__icon").classList.toggle("_active"),e.preventDefault()),document.documentElement.classList.contains("_search-box-opened")&&!t.closest(".header__search")&&document.documentElement.classList.remove("_search-box-opened"),t.closest(".search-box__delete-btn")){const e=t.closest(".search-box__group");t.closest(".search-box__item").remove(),e.querySelectorAll(".search-box__item").length||e.remove()}t.closest(".menu-bar__item")&&(n(document.querySelectorAll(".menu-bar__item"),"_active"),t.closest(".menu-bar__item").classList.add("_active"))}))})),document.querySelector(".hamburger")&&document.addEventListener("click",(function(t){e&&t.target.closest(".hamburger")?a():e&&document.documentElement.classList.contains("_menu-opened")&&(t.target.closest(".menu__close-btn")||!t.target.closest(".menu"))&&r()})),function(){const e=document.querySelectorAll("[data-spoilers]");if(e.length>0){const t=Array.from(e).filter((function(e,t,s){return!e.dataset.spoilers.split(",")[0]}));t.length&&i(t);let s=function(e,t){const s=Array.from(e).filter((function(e,s,i){if(e.dataset[t])return e.dataset[t].split(",")[0]}));if(s.length){const e=[];s.forEach((s=>{const i={},a=s.dataset[t].split(",");i.value=a[0],i.type=a[1]?a[1].trim():"max",i.item=s,e.push(i)}));let i=e.map((function(e){return"("+e.type+"-width: "+e.value+"px),"+e.value+","+e.type}));i=function(e){return e.filter((function(e,t,s){return s.indexOf(e)===t}))}(i);const a=[];if(i.length)return i.forEach((t=>{const s=t.split(","),i=s[1],r=s[2],n=window.matchMedia(s[0]),l=e.filter((function(e){if(e.value===i&&e.type===r)return!0}));a.push({itemsArray:l,matchMedia:n})})),a}}(e,"spoilers");function i(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.forEach((e=>{e=t?e.item:e,t.matches||!t?(e.classList.add("_spoiler-init"),a(e),e.addEventListener("click",r)):(e.classList.remove("_spoiler-init"),a(e,!1),e.removeEventListener("click",r))}))}function a(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=e.querySelectorAll("[data-spoiler]");s.length&&(s=Array.from(s).filter((t=>t.closest("[data-spoilers]")===e)),s.forEach((e=>{t?(e.removeAttribute("tabindex"),e.classList.contains("_spoiler-active")||(e.nextElementSibling.hidden=!0)):(e.setAttribute("tabindex","-1"),e.nextElementSibling.hidden=!1)})))}function r(e){const t=e.target;if(t.closest("[data-spoiler]")){const s=t.closest("[data-spoiler]"),i=s.closest("[data-spoilers]"),a=i.hasAttribute("data-one-spoiler"),r=i.dataset.spoilersSpeed?parseInt(i.dataset.spoilersSpeed):500;i.querySelectorAll("._slide").length||(a&&!s.classList.contains("_spoiler-active")&&n(i),s.classList.toggle("_spoiler-active"),d(s.nextElementSibling,r)),e.preventDefault()}}function n(e){const t=e.querySelector("[data-spoiler]._spoiler-active"),s=e.dataset.spoilersSpeed?parseInt(e.dataset.spoilersSpeed):500;t&&!e.querySelectorAll("._slide").length&&(t.classList.remove("_spoiler-active"),o(t.nextElementSibling,s))}s&&s.length&&s.forEach((e=>{e.matchMedia.addEventListener("change",(function(){i(e.itemsArray,e.matchMedia)})),i(e.itemsArray,e.matchMedia)}));const l=document.querySelectorAll("[data-spoiler-close]");l.length&&document.addEventListener("click",(function(e){e.target.closest("[data-spoilers]")||l.forEach((e=>{const t=e.closest("[data-spoilers]"),s=spollersBlock.dataset.spoilersSpeed?parseInt(t.dataset.spoilersSpeed):500;e.classList.remove("_spoiler-active"),o(e.nextElementSibling,s)}))}))}}(),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{viewPass:!1};const t=document.querySelectorAll("input[placeholder],textarea[placeholder]");t.length&&t.forEach((e=>{e.hasAttribute("data-placeholder-nohide")||(e.dataset.placeholder=e.placeholder)})),document.body.addEventListener("focusin",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=""),t.hasAttribute("data-no-focus-classes")||(t.classList.add("_form-focus"),t.parentElement.classList.add("_form-focus")),c.removeError(t))})),document.body.addEventListener("focusout",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=t.dataset.placeholder),t.hasAttribute("data-no-focus-classes")||(t.classList.remove("_form-focus"),t.parentElement.classList.remove("_form-focus")),t.hasAttribute("data-validate")&&c.validateInput(t))})),e.viewPass&&document.addEventListener("click",(function(e){let t=e.target;if(t.closest('[class*="__viewpass"]')){let e=t.classList.contains("_viewpass-active")?"password":"text";t.parentElement.querySelector("input").setAttribute("type",e),t.classList.toggle("_viewpass-active")}}))}({viewPass:!1}),function(){const e=document.forms;if(e.length)for(const s of e)s.addEventListener("submit",(function(e){t(e.target,e)})),s.addEventListener("reset",(function(e){const t=e.target;c.formClean(t)}));async function t(e,t){if(0===(e.hasAttribute("data-no-validate")?0:c.getErrors(e))){if(e.hasAttribute("data-ajax")){t.preventDefault();const i=e.getAttribute("action")?e.getAttribute("action").trim():"#",a=e.getAttribute("method")?e.getAttribute("method").trim():"GET",r=new FormData(e);e.classList.add("_sending");const n=await fetch(i,{method:a,body:r});if(n.ok){let t=await n.json();e.classList.remove("_sending"),s(e,t)}else alert("error"),e.classList.remove("_sending")}else e.hasAttribute("data-dev")&&(t.preventDefault(),s(e))}else{t.preventDefault();const s=e.querySelector("._form-error");s&&e.hasAttribute("data-goto-error")&&gotoBlock(s,!0,1e3)}}function s(e){document.dispatchEvent(new CustomEvent("formSent",{detail:{form:e}})),c.formClean(e)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvYXBwLmpzIiwibWFwcGluZ3MiOiJzQkFBQSxTQUFTQSxFQUFhQyxHQUNwQkMsS0FBS0QsS0FBT0EsQ0FDZCxDQUNBRCxFQUFhRyxVQUFVQyxLQUFPLFdBQzVCLE1BQU1DLEVBQVFILEtBQ2RBLEtBQUtJLFFBQVUsR0FDZkosS0FBS0ssWUFBYyxrQkFDbkJMLEtBQUtNLE1BQVFDLFNBQVNDLGlCQUFpQixhQUN2QyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSVQsS0FBS00sTUFBTUksT0FBUUQsSUFBSyxDQUMxQyxNQUFNRSxFQUFPWCxLQUFLTSxNQUFNRyxHQUVsQkcsRUFET0QsRUFBS0UsUUFBUUMsR0FBR0MsT0FDTkMsTUFBTSxLQUN2QkMsRUFBUyxDQUFDLEVBQ2hCQSxFQUFPQyxRQUFVUCxFQUNqQk0sRUFBT0UsT0FBU1IsRUFBS1MsV0FDckJILEVBQU9JLFlBQWNkLFNBQVNlLGNBQWNWLEVBQVUsR0FBR0csUUFDekRFLEVBQU9NLFdBQWFYLEVBQVUsR0FBS0EsRUFBVSxHQUFHRyxPQUFTLE1BQ3pERSxFQUFPTyxNQUFRWixFQUFVLEdBQUtBLEVBQVUsR0FBR0csT0FBUyxPQUNwREUsRUFBT1EsTUFBUXpCLEtBQUswQixjQUFjVCxFQUFPRSxPQUFRRixFQUFPQyxTQUN4RGxCLEtBQUtJLFFBQVF1QixLQUFLVixFQUNwQixDQUNBakIsS0FBSzRCLFVBQVU1QixLQUFLSSxTQUNwQkosS0FBSzZCLGFBQWVDLE1BQU03QixVQUFVOEIsSUFBSUMsS0FDdENoQyxLQUFLSSxTQUNMLFNBQVU2QixHQUNSLE1BQ0UsSUFDQWpDLEtBQUtELEtBQ0wsV0FDQWtDLEVBQUtWLFdBQ0wsT0FDQVUsRUFBS1YsVUFFVCxHQUNBdkIsTUFFRkEsS0FBSzZCLGFBQWVDLE1BQU03QixVQUFVaUMsT0FBT0YsS0FDekNoQyxLQUFLNkIsY0FDTCxTQUFVSSxFQUFNUixFQUFPVSxHQUNyQixPQUFPTCxNQUFNN0IsVUFBVW1DLFFBQVFKLEtBQUtHLEVBQU1GLEtBQVVSLENBQ3RELElBRUYsSUFBSyxJQUFJaEIsRUFBSSxFQUFHQSxFQUFJVCxLQUFLNkIsYUFBYW5CLE9BQVFELElBQUssQ0FDakQsTUFBTTRCLEVBQVFyQyxLQUFLNkIsYUFBYXBCLEdBQzFCNkIsRUFBYUMsT0FBT3RDLFVBQVVlLE1BQU1nQixLQUFLSyxFQUFPLEtBQ2hERyxFQUFhQyxPQUFPRCxXQUFXRixFQUFXLElBQzFDSSxFQUFrQkosRUFBVyxHQUM3QkssRUFBZ0JiLE1BQU03QixVQUFVaUMsT0FBT0YsS0FDM0NoQyxLQUFLSSxTQUNMLFNBQVU2QixHQUNSLE9BQU9BLEVBQUtWLGFBQWVtQixDQUM3QixJQUVGRixFQUFXSSxhQUFZLFdBQ3JCekMsRUFBTTBDLGFBQWFMLEVBQVlHLEVBQ2pDLElBQ0EzQyxLQUFLNkMsYUFBYUwsRUFBWUcsRUFDaEMsQ0FDRixFQUNBN0MsRUFBYUcsVUFBVTRDLGFBQWUsU0FBVUwsRUFBWXBDLEdBQzFELEdBQUlvQyxFQUFXTSxRQUNiLElBQUssSUFBSXJDLEVBQUksRUFBR0EsRUFBSUwsRUFBUU0sT0FBUUQsSUFBSyxDQUN2QyxNQUFNUSxFQUFTYixFQUFRSyxHQUN2QlEsRUFBT1EsTUFBUXpCLEtBQUswQixjQUFjVCxFQUFPRSxPQUFRRixFQUFPQyxTQUN4RGxCLEtBQUsrQyxPQUFPOUIsRUFBT08sTUFBT1AsRUFBT0MsUUFBU0QsRUFBT0ksWUFDbkQsTUFHQSxJQUFLLElBQUlaLEVBQUlMLEVBQVFNLE9BQVMsRUFBR0QsR0FBSyxFQUFHQSxJQUFLLENBQzVDLE1BQU1RLEVBQVNiLEVBQVFLLEdBQ25CUSxFQUFPQyxRQUFROEIsVUFBVUMsU0FBU2pELEtBQUtLLGNBQ3pDTCxLQUFLa0QsU0FBU2pDLEVBQU9FLE9BQVFGLEVBQU9DLFFBQVNELEVBQU9RLE1BRXhELENBRUosRUFDQTNCLEVBQWFHLFVBQVU4QyxPQUFTLFNBQVV2QixFQUFPTixFQUFTRyxHQUN4REgsRUFBUThCLFVBQVVHLElBQUluRCxLQUFLSyxhQUNiLFNBQVZtQixHQUFvQkEsR0FBU0gsRUFBWStCLFNBQVMxQyxPQUNwRFcsRUFBWWdDLHNCQUFzQixZQUFhbkMsR0FHbkMsVUFBVk0sRUFJSkgsRUFBWStCLFNBQVM1QixHQUFPNkIsc0JBQXNCLGNBQWVuQyxHQUgvREcsRUFBWWdDLHNCQUFzQixhQUFjbkMsRUFJcEQsRUFDQXBCLEVBQWFHLFVBQVVpRCxTQUFXLFNBQVUvQixFQUFRRCxFQUFTTyxHQUMzRFAsRUFBUThCLFVBQVVNLE9BQU90RCxLQUFLSyxrQkFDQ2tELElBQTNCcEMsRUFBT2lDLFNBQVMzQixHQUNsQk4sRUFBT2lDLFNBQVMzQixHQUFPNEIsc0JBQXNCLGNBQWVuQyxHQUU1REMsRUFBT2tDLHNCQUFzQixZQUFhbkMsRUFFOUMsRUFDQXBCLEVBQWFHLFVBQVV5QixjQUFnQixTQUFVUCxFQUFRRCxHQUN2RCxNQUFNc0MsRUFBUTFCLE1BQU03QixVQUFVd0QsTUFBTXpCLEtBQUtiLEVBQU9pQyxVQUNoRCxPQUFPdEIsTUFBTTdCLFVBQVVtQyxRQUFRSixLQUFLd0IsRUFBT3RDLEVBQzdDLEVBQ0FwQixFQUFhRyxVQUFVMkIsVUFBWSxTQUFVOEIsR0FDekIsUUFBZDFELEtBQUtELEtBQ1ArQixNQUFNN0IsVUFBVTBELEtBQUszQixLQUFLMEIsR0FBSyxTQUFVRSxFQUFHQyxHQUMxQyxPQUFJRCxFQUFFckMsYUFBZXNDLEVBQUV0QyxXQUNqQnFDLEVBQUVwQyxRQUFVcUMsRUFBRXJDLE1BQ1QsRUFHTyxVQUFab0MsRUFBRXBDLE9BQWlDLFNBQVpxQyxFQUFFckMsT0FDbkIsRUFHTSxTQUFab0MsRUFBRXBDLE9BQWdDLFVBQVpxQyxFQUFFckMsTUFDbkIsRUFHRm9DLEVBQUVwQyxNQUFRcUMsRUFBRXJDLE1BR2RvQyxFQUFFckMsV0FBYXNDLEVBQUV0QyxVQUMxQixJQUVBTyxNQUFNN0IsVUFBVTBELEtBQUszQixLQUFLMEIsR0FBSyxTQUFVRSxFQUFHQyxHQUMxQyxPQUFJRCxFQUFFckMsYUFBZXNDLEVBQUV0QyxXQUNqQnFDLEVBQUVwQyxRQUFVcUMsRUFBRXJDLE1BQ1QsRUFHTyxVQUFab0MsRUFBRXBDLE9BQWlDLFNBQVpxQyxFQUFFckMsTUFDcEIsRUFHTyxTQUFab0MsRUFBRXBDLE9BQWdDLFVBQVpxQyxFQUFFckMsT0FDbEIsRUFHSHFDLEVBQUVyQyxNQUFRb0MsRUFBRXBDLE1BR2RxQyxFQUFFdEMsV0FBYXFDLEVBQUVyQyxVQUMxQixHQUdKLEVBQ1csSUFBSXpCLEVBQWEsT0FDekJJLE0sVUNqSkgsR0FBSUssU0FBU3VELGVBQWUsT0FBUSxDQUNsQ3JCLE9BQU9WLElBQU0sS0FFYmdDLHVCQUNRQyxPQUFPQyxNQUViLE1BQU1DLEVBQVcsQ0FDZkMsT0FDRTFCLE9BQU8yQixXQUFhLElBQ2hCLENBQUMsa0JBQW1CLG1CQUNwQixDQUFDLG1CQUFvQixtQkFDM0JDLEtBQU0sSUFFRkMsRUFBZSxDQUNuQkgsT0FBUSxDQUFDLG1CQUFvQixtQkFDN0JFLEtBQU0sS0FHRixLQUNKRSxFQUFJLHVCQUNKQyxFQUFzQix5QkFDdEJDLEVBQXdCLFdBQ3hCQyxHQUNFVixPQUVFakMsRUFBTSxJQUFJd0MsRUFDZGhFLFNBQVN1RCxlQUFlLE9BRXhCLENBQUVhLFNBQVVULElBR2RuQyxFQUFJNkMsU0FBUyxJQUFJSixHQUNqQnpDLEVBQUk2QyxTQUFTLElBQUlILEdBRWpCLE1BQU1JLEVBQUt0RSxTQUFTdUUsY0FBYyxPQUNsQ0QsRUFBR0UsVUFBWSxTQUNmRixFQUFHRyxJQUFNLDJCQUNUSCxFQUFHSSxRQUFVLElBQ1hsRCxFQUFJbUQsT0FBTyxDQUFFUCxTQUFVLElBQUtMLEVBQWNhLFNBQVUsT0FDdERwRCxFQUFJNkMsU0FBUyxJQUFJRixFQUFXLENBQUVVLFlBQWFkLEVBQWFILFFBQVVVLEdBQ3BFLENBQ0FRLEVBQ0YsQyxHQ3pDSUMsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCakMsSUFBakJrQyxFQUNILE9BQU9BLEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkosR0FBVUcsRUFBUUEsRUFBT0QsUUFBU0gsR0FHL0NJLEVBQU9ELE9BQ2YsQyxtQkNyQk8sSUFBSUcsR0FBaUIsRUFDckIsTUFPTUMsRUFBYSxXQUFpQixJQUFoQkMsRUFBS0MsVUFBQXRGLE9BQUEsUUFBQTZDLElBQUF5QyxVQUFBLEdBQUFBLFVBQUEsR0FBRyxJQUM3QkgsSUFDRkksWUFBVyxLQUNUMUYsU0FBUzJGLGdCQUFnQmxELFVBQVVNLE9BQU8sT0FBTyxHQUNoRHlDLEdBQ0hGLEdBQWlCLEVBQ2pCSSxZQUFXLFdBQ1RKLEdBQWlCLENBQ25CLEdBQUdFLEdBRVAsRUFDYUksRUFBVyxXQUFpQixJQUFoQkosRUFBS0MsVUFBQXRGLE9BQUEsUUFBQTZDLElBQUF5QyxVQUFBLEdBQUFBLFVBQUEsR0FBRyxJQUMzQkgsSUFDRnRGLFNBQVMyRixnQkFBZ0JsRCxVQUFVRyxJQUFJLFFBRXZDMEMsR0FBaUIsRUFDakJJLFlBQVcsV0FDVEosR0FBaUIsQ0FDbkIsR0FBR0UsR0FFUCxFQWtCYUssRUFBV0EsS0FDdEJELElBQ0E1RixTQUFTMkYsZ0JBQWdCbEQsVUFBVUcsSUFBSSxlQUFlLEVBRTNDa0QsRUFBWUEsS0FDdkJQLElBQ0F2RixTQUFTMkYsZ0JBQWdCbEQsVUFBVU0sT0FBTyxlQUFlLEVBSTlDZ0QsRUFBZ0JBLENBQUM5QyxFQUFPdUIsS0FDbkMsSUFBSyxJQUFJdEUsRUFBSSxFQUFHQSxFQUFJK0MsRUFBTTlDLE9BQVFELElBQ2hDK0MsRUFBTS9DLEdBQUd1QyxVQUFVTSxPQUFPeUIsRUFDNUIsRUFJV3dCLEVBQU1BLEdBQ2I5RCxPQUFPMkIsV0FBYSxJQUNmLFdBQWMzQixPQUFPMkIsV0FBYW1DLEVBRWpDLElBQU0sS0FBUSxHQUFNOUQsT0FBTzJCLFlBQWNtQyxFQUs5QyxJQUFJQyxFQUFXLFNBQUNDLEdBQXlDLElBQWpDdEIsRUFBUWEsVUFBQXRGLE9BQUEsUUFBQTZDLElBQUF5QyxVQUFBLEdBQUFBLFVBQUEsR0FBRyxJQUFLVSxFQUFRVixVQUFBdEYsT0FBQSxRQUFBNkMsSUFBQXlDLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEVBQ25EUyxFQUFPekQsVUFBVUMsU0FBUyxZQUM3QndELEVBQU96RCxVQUFVRyxJQUFJLFVBQ3JCc0QsRUFBT0UsTUFBTUMsbUJBQXFCLDBCQUNsQ0gsRUFBT0UsTUFBTUUsbUJBQXFCMUIsRUFBVyxLQUM3Q3NCLEVBQU9FLE1BQU1HLE9BQVUsR0FBRUwsRUFBT00saUJBQ2hDTixFQUFPTSxhQUNQTixFQUFPRSxNQUFNSyxTQUFXLFNBQ3hCUCxFQUFPRSxNQUFNRyxPQUFTSixFQUFZLEdBQUVBLE1BQWdCLE1BQ3BERCxFQUFPRSxNQUFNTSxXQUFhLEVBQzFCUixFQUFPRSxNQUFNTyxjQUFnQixFQUM3QlQsRUFBT0UsTUFBTVEsVUFBWSxFQUN6QlYsRUFBT0UsTUFBTVMsYUFBZSxFQUM1QjNFLE9BQU93RCxZQUFXLEtBQ2hCUSxFQUFPWSxRQUFVWCxHQUNoQkEsR0FBV0QsRUFBT0UsTUFBTVcsZUFBZSxVQUN4Q2IsRUFBT0UsTUFBTVcsZUFBZSxlQUM1QmIsRUFBT0UsTUFBTVcsZUFBZSxrQkFDNUJiLEVBQU9FLE1BQU1XLGVBQWUsY0FDNUJiLEVBQU9FLE1BQU1XLGVBQWUsa0JBQzNCWixHQUFXRCxFQUFPRSxNQUFNVyxlQUFlLFlBQ3hDYixFQUFPRSxNQUFNVyxlQUFlLHVCQUM1QmIsRUFBT0UsTUFBTVcsZUFBZSx1QkFDNUJiLEVBQU96RCxVQUFVTSxPQUFPLFVBRXhCL0MsU0FBU2dILGNBQ1AsSUFBSUMsWUFBWSxjQUFlLENBQzdCQyxPQUFRLENBQ05oQixPQUFRQSxLQUdiLEdBQ0F0QixHQUVQLEVBc0NXdUMsRUFBZSxTQUFDakIsR0FBMkIsSUFBbkJ0QixFQUFRYSxVQUFBdEYsT0FBQSxRQUFBNkMsSUFBQXlDLFVBQUEsR0FBQUEsVUFBQSxHQUFHLElBQzVDLE9BQUlTLEVBQU9ZLE9BdENXLFNBQUNaLEdBQXlDLElBQWpDdEIsRUFBUWEsVUFBQXRGLE9BQUEsUUFBQTZDLElBQUF5QyxVQUFBLEdBQUFBLFVBQUEsR0FBRyxJQUFLVSxFQUFRVixVQUFBdEYsT0FBQSxRQUFBNkMsSUFBQXlDLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEVBQzFELElBQUtTLEVBQU96RCxVQUFVQyxTQUFTLFVBQVcsQ0FDeEN3RCxFQUFPekQsVUFBVUcsSUFBSSxVQUNyQnNELEVBQU9ZLFFBQVNaLEVBQU9ZLFFBQWlCLEtBQ3hDWCxHQUFXRCxFQUFPRSxNQUFNVyxlQUFlLFVBQ3ZDLElBQUlSLEVBQVNMLEVBQU9NLGFBQ3BCTixFQUFPRSxNQUFNSyxTQUFXLFNBQ3hCUCxFQUFPRSxNQUFNRyxPQUFTSixFQUFZLEdBQUVBLE1BQWdCLE1BQ3BERCxFQUFPRSxNQUFNTSxXQUFhLEVBQzFCUixFQUFPRSxNQUFNTyxjQUFnQixFQUM3QlQsRUFBT0UsTUFBTVEsVUFBWSxFQUN6QlYsRUFBT0UsTUFBTVMsYUFBZSxFQUM1QlgsRUFBT00sYUFDUE4sRUFBT0UsTUFBTUMsbUJBQXFCLDBCQUNsQ0gsRUFBT0UsTUFBTUUsbUJBQXFCMUIsRUFBVyxLQUM3Q3NCLEVBQU9FLE1BQU1HLE9BQVNBLEVBQVMsS0FDL0JMLEVBQU9FLE1BQU1XLGVBQWUsZUFDNUJiLEVBQU9FLE1BQU1XLGVBQWUsa0JBQzVCYixFQUFPRSxNQUFNVyxlQUFlLGNBQzVCYixFQUFPRSxNQUFNVyxlQUFlLGlCQUM1QjdFLE9BQU93RCxZQUFXLEtBQ2hCUSxFQUFPRSxNQUFNVyxlQUFlLFVBQzVCYixFQUFPRSxNQUFNVyxlQUFlLFlBQzVCYixFQUFPRSxNQUFNVyxlQUFlLHVCQUM1QmIsRUFBT0UsTUFBTVcsZUFBZSx1QkFDNUJiLEVBQU96RCxVQUFVTSxPQUFPLFVBRXhCL0MsU0FBU2dILGNBQ1AsSUFBSUMsWUFBWSxnQkFBaUIsQ0FDL0JDLE9BQVEsQ0FDTmhCLE9BQVFBLEtBR2IsR0FDQXRCLEVBQ0wsQ0FDRixDQUdXd0MsQ0FBV2xCLEVBQVF0QixHQUVuQnFCLEVBQVNDLEVBQVF0QixFQUU1QixFQ3ZGTyxJQUFJeUMsRUFBZSxDQUN4QkMsU0FBQUEsQ0FBVUMsR0FDUixJQUFJQyxFQUFRLEVBQ1JDLEVBQW9CRixFQUFLdEgsaUJBQWlCLG9CQVk5QyxPQVhJd0gsRUFBa0J0SCxRQUNwQnNILEVBQWtCQyxTQUFRQyxJQUVhLE9BQWxDQSxFQUFpQkMsY0FDYSxXQUE3QkQsRUFBaUJFLFNBQ2xCRixFQUFpQkcsV0FFbEJOLEdBQVMvSCxLQUFLc0ksY0FBY0osR0FDOUIsSUFHR0gsQ0FDVCxFQUNBTyxhQUFBQSxDQUFjSixHQUNaLElBQUlILEVBQVEsRUF1QlosTUF0QjBDLFVBQXRDRyxFQUFpQnJILFFBQVEwSCxVQUMzQkwsRUFBaUJNLE1BQVFOLEVBQWlCTSxNQUFNQyxRQUFRLElBQUssSUFDekR6SSxLQUFLMEksVUFBVVIsSUFDakJsSSxLQUFLMkksU0FBU1QsR0FDZEgsS0FFQS9ILEtBQUs0SSxZQUFZVixLQUdPLGFBQTFCQSxFQUFpQm5JLE1BQ2hCbUksRUFBaUJXLFVBS2JYLEVBQWlCTSxNQUFNekgsT0FJMUJmLEtBQUs0SSxZQUFZVixJQVBuQmxJLEtBQUsySSxTQUFTVCxHQUNkSCxLQVNLQSxDQUNULEVBQ0FZLFFBQUFBLENBQVNULEdBQ1BBLEVBQWlCbEYsVUFBVUcsSUFBSSxlQUMvQitFLEVBQWlCWSxjQUFjOUYsVUFBVUcsSUFBSSxlQUM3QyxJQUFJNEYsRUFDRmIsRUFBaUJZLGNBQWN4SCxjQUFjLGdCQUMzQ3lILEdBQVliLEVBQWlCWSxjQUFjRSxZQUFZRCxHQUN2RGIsRUFBaUJySCxRQUFRa0gsT0FDM0JHLEVBQWlCWSxjQUFjRyxtQkFDN0IsWUFDQyw0QkFBMkJmLEVBQWlCckgsUUFBUWtILGNBRzNELEVBQ0FhLFdBQUFBLENBQVlWLEdBQ1ZBLEVBQWlCbEYsVUFBVU0sT0FBTyxlQUNsQzRFLEVBQWlCWSxjQUFjOUYsVUFBVU0sT0FBTyxlQUM1QzRFLEVBQWlCWSxjQUFjeEgsY0FBYyxpQkFDL0M0RyxFQUFpQlksY0FBY0UsWUFDN0JkLEVBQWlCWSxjQUFjeEgsY0FBYyxnQkFHbkQsRUFDQTRILFNBQUFBLENBQVVwQixHQUNSQSxFQUFLcUIsUUFDTGxELFlBQVcsS0FDVCxJQUFJbUQsRUFBU3RCLEVBQUt0SCxpQkFBaUIsa0JBQ25DLElBQUssSUFBSWlCLEVBQVEsRUFBR0EsRUFBUTJILEVBQU8xSSxPQUFRZSxJQUFTLENBQ2xELE1BQU1vRCxFQUFLdUUsRUFBTzNILEdBQ2xCb0QsRUFBR2lFLGNBQWM5RixVQUFVTSxPQUFPLGVBQ2xDdUIsRUFBRzdCLFVBQVVNLE9BQU8sZUFDcEJzRSxFQUFhZ0IsWUFBWS9ELEVBQzNCLENBQ0EsSUFBSXdFLEVBQWF2QixFQUFLdEgsaUJBQWlCLG9CQUN2QyxHQUFJNkksRUFBVzNJLE9BQVMsRUFDdEIsSUFBSyxJQUFJZSxFQUFRLEVBQUdBLEVBQVE0SCxFQUFXM0ksT0FBUWUsSUFBUyxDQUNyQzRILEVBQVc1SCxHQUNuQm9ILFNBQVUsQ0FDckIsQ0FDRixHQUNDLEVBQ0wsRUFDQUgsVUFBVVIsSUFDQSxnREFBZ0RvQixLQUN0RHBCLEVBQWlCTSxRQzFJdkIsU0FBUyxFQUFTZSxHQUNoQixPQUFlLE9BQVJBLEdBQStCLGlCQUFSQSxHQUFvQixnQkFBaUJBLEdBQU9BLEVBQUlDLGNBQWdCQyxNQUNoRyxDQUNBLFNBQVNDLEVBQU9qRCxFQUFRekIsUUFDUCxJQUFYeUIsSUFDRkEsRUFBUyxDQUFDLFFBRUEsSUFBUnpCLElBQ0ZBLEVBQU0sQ0FBQyxHQUVUeUUsT0FBT0UsS0FBSzNFLEdBQUtpRCxTQUFRMkIsU0FDSSxJQUFoQm5ELEVBQU9tRCxHQUFzQm5ELEVBQU9tRCxHQUFPNUUsRUFBSTRFLEdBQWMsRUFBUzVFLEVBQUk0RSxLQUFTLEVBQVNuRCxFQUFPbUQsS0FBU0gsT0FBT0UsS0FBSzNFLEVBQUk0RSxJQUFNbEosT0FBUyxHQUNwSmdKLEVBQU9qRCxFQUFPbUQsR0FBTTVFLEVBQUk0RSxHQUMxQixHQUVKLENBQ0EsTUFBTUMsRUFBYyxDQUNsQkMsS0FBTSxDQUFDLEVBQ1AsZ0JBQUFDLEdBQW9CLEVBQ3BCLG1CQUFBQyxHQUF1QixFQUN2QkMsY0FBZSxDQUNiLElBQUFDLEdBQVEsRUFDUkMsU0FBVSxJQUVaN0ksY0FBYSxJQUNKLEtBRVRkLGlCQUFnQixJQUNQLEdBRVRzRCxlQUFjLElBQ0wsS0FFVHNHLFlBQVcsS0FDRixDQUNMLFNBQUFDLEdBQWEsSUFHakJ2RixjQUFhLEtBQ0osQ0FDTDFCLFNBQVUsR0FDVmtILFdBQVksR0FDWjNELE1BQU8sQ0FBQyxFQUNSLFlBQUE0RCxHQUFnQixFQUNoQkMscUJBQW9CLElBQ1gsS0FJYkMsZ0JBQWUsS0FDTixDQUFDLEdBRVZDLFdBQVUsSUFDRCxLQUVUL0YsU0FBVSxDQUNSZ0csS0FBTSxHQUNOQyxLQUFNLEdBQ05DLFNBQVUsR0FDVkMsS0FBTSxHQUNOQyxPQUFRLEdBQ1JDLFNBQVUsR0FDVkMsU0FBVSxHQUNWQyxPQUFRLEtBR1osU0FBUyxJQUNQLE1BQU1DLEVBQTBCLG9CQUFiNUssU0FBMkJBLFNBQVcsQ0FBQyxFQUUxRCxPQURBbUosRUFBT3lCLEVBQUt0QixHQUNMc0IsQ0FDVCxDQUNBLE1BQU1DLEVBQVksQ0FDaEI3SyxTQUFVc0osRUFDVndCLFVBQVcsQ0FDVEMsVUFBVyxJQUViM0csU0FBVSxDQUNSZ0csS0FBTSxHQUNOQyxLQUFNLEdBQ05DLFNBQVUsR0FDVkMsS0FBTSxHQUNOQyxPQUFRLEdBQ1JDLFNBQVUsR0FDVkMsU0FBVSxHQUNWQyxPQUFRLElBRVZLLFFBQVMsQ0FDUCxZQUFBQyxHQUFnQixFQUNoQixTQUFBQyxHQUFhLEVBQ2IsRUFBQUMsR0FBTSxFQUNOLElBQUFDLEdBQVEsR0FFVm5FLFlBQWEsV0FDWCxPQUFPeEgsSUFDVCxFQUNBLGdCQUFBK0osR0FBb0IsRUFDcEIsbUJBQUFDLEdBQXVCLEVBQ3ZCNEIsaUJBQWdCLEtBQ1AsQ0FDTEMsaUJBQWdCLElBQ1AsS0FJYixLQUFBQyxHQUFTLEVBQ1QsSUFBQUMsR0FBUSxFQUNSQyxPQUFRLENBQUMsRUFDVCxVQUFBL0YsR0FBYyxFQUNkLFlBQUFnRyxHQUFnQixFQUNoQnpKLFdBQVUsS0FDRCxDQUFDLEdBRVYwSixzQkFBc0JDLEdBQ00sb0JBQWZsRyxZQUNUa0csSUFDTyxNQUVGbEcsV0FBV2tHLEVBQVUsR0FFOUIsb0JBQUFDLENBQXFCQyxHQUNPLG9CQUFmcEcsWUFHWGdHLGFBQWFJLEVBQ2YsR0FFRixTQUFTLElBQ1AsTUFBTUMsRUFBd0Isb0JBQVg3SixPQUF5QkEsT0FBUyxDQUFDLEVBRXRELE9BREFpSCxFQUFPNEMsRUFBS2xCLEdBQ0xrQixDQUNULENDdEhBLFNBQVMsRUFBU0gsRUFBVXBHLEdBSTFCLFlBSGMsSUFBVkEsSUFDRkEsRUFBUSxHQUVIRSxXQUFXa0csRUFBVXBHLEVBQzlCLENBQ0EsU0FBUyxJQUNQLE9BQU9nRyxLQUFLUSxLQUNkLENBZUEsU0FBUyxFQUFhMUgsRUFBSTJILFFBQ1gsSUFBVEEsSUFDRkEsRUFBTyxLQUVULE1BQU0vSixFQUFTLElBQ2YsSUFBSWdLLEVBQ0FDLEVBQ0FDLEVBQ0osTUFBTUMsRUF0QlIsU0FBMEIvSCxHQUN4QixNQUFNcEMsRUFBUyxJQUNmLElBQUlrRSxFQVVKLE9BVElsRSxFQUFPbUosbUJBQ1RqRixFQUFRbEUsRUFBT21KLGlCQUFpQi9HLEVBQUksUUFFakM4QixHQUFTOUIsRUFBR2dJLGVBQ2ZsRyxFQUFROUIsRUFBR2dJLGNBRVJsRyxJQUNIQSxFQUFROUIsRUFBRzhCLE9BRU5BLENBQ1QsQ0FTbUIsQ0FBaUI5QixHQTZCbEMsT0E1QklwQyxFQUFPcUssaUJBQ1RKLEVBQWVFLEVBQVNHLFdBQWFILEVBQVNJLGdCQUMxQ04sRUFBYTFMLE1BQU0sS0FBS04sT0FBUyxJQUNuQ2dNLEVBQWVBLEVBQWExTCxNQUFNLE1BQU1lLEtBQUk2QixHQUFLQSxFQUFFNkUsUUFBUSxJQUFLLE9BQU13RSxLQUFLLE9BSTdFTixFQUFrQixJQUFJbEssRUFBT3FLLGdCQUFpQyxTQUFqQkosRUFBMEIsR0FBS0EsS0FFNUVDLEVBQWtCQyxFQUFTTSxjQUFnQk4sRUFBU08sWUFBY1AsRUFBU1EsYUFBZVIsRUFBU1MsYUFBZVQsRUFBU0csV0FBYUgsRUFBU2YsaUJBQWlCLGFBQWFwRCxRQUFRLGFBQWMsc0JBQ3JNZ0UsRUFBU0UsRUFBZ0JXLFdBQVd0TSxNQUFNLE1BRS9CLE1BQVR3TCxJQUUwQkUsRUFBeEJqSyxFQUFPcUssZ0JBQWdDSCxFQUFnQlksSUFFaEMsS0FBbEJkLEVBQU8vTCxPQUE4QjhNLFdBQVdmLEVBQU8sS0FFNUNlLFdBQVdmLEVBQU8sS0FFM0IsTUFBVEQsSUFFMEJFLEVBQXhCakssRUFBT3FLLGdCQUFnQ0gsRUFBZ0JjLElBRWhDLEtBQWxCaEIsRUFBTy9MLE9BQThCOE0sV0FBV2YsRUFBTyxLQUU1Q2UsV0FBV2YsRUFBTyxLQUVqQ0MsR0FBZ0IsQ0FDekIsQ0FDQSxTQUFTLEVBQVNnQixHQUNoQixNQUFvQixpQkFBTkEsR0FBd0IsT0FBTkEsR0FBY0EsRUFBRWxFLGFBQWtFLFdBQW5EQyxPQUFPeEosVUFBVXFOLFNBQVN0TCxLQUFLMEwsR0FBR2pLLE1BQU0sR0FBSSxFQUM3RyxDQVFBLFNBQVMsSUFDUCxNQUFNa0ssRUFBS2xFLE9BQU96RCxVQUFVdEYsUUFBVSxPQUFJNkMsRUFBWXlDLFVBQVUsSUFDMUQ0SCxFQUFXLENBQUMsWUFBYSxjQUFlLGFBQzlDLElBQUssSUFBSW5OLEVBQUksRUFBR0EsRUFBSXVGLFVBQVV0RixPQUFRRCxHQUFLLEVBQUcsQ0FDNUMsTUFBTW9OLEVBQWFwTixFQUFJLEdBQUt1RixVQUFVdEYsUUFBVUQsT0FBSThDLEVBQVl5QyxVQUFVdkYsR0FDMUUsR0FBSW9OLFVBWlFsTixFQVltRGtOLElBVjNDLG9CQUFYcEwsYUFBd0QsSUFBdkJBLE9BQU9xTCxZQUMxQ25OLGFBQWdCbU4sWUFFbEJuTixJQUEyQixJQUFsQkEsRUFBS29OLFVBQW9DLEtBQWxCcE4sRUFBS29OLFlBT2tDLENBQzFFLE1BQU1DLEVBQVl2RSxPQUFPRSxLQUFLRixPQUFPb0UsSUFBYTNMLFFBQU8wSCxHQUFPZ0UsRUFBU3hMLFFBQVF3SCxHQUFPLElBQ3hGLElBQUssSUFBSXFFLEVBQVksRUFBR0MsRUFBTUYsRUFBVXROLE9BQVF1TixFQUFZQyxFQUFLRCxHQUFhLEVBQUcsQ0FDL0UsTUFBTUUsRUFBVUgsRUFBVUMsR0FDcEJHLEVBQU8zRSxPQUFPNEUseUJBQXlCUixFQUFZTSxRQUM1QzVLLElBQVQ2SyxHQUFzQkEsRUFBS0UsYUFDekIsRUFBU1gsRUFBR1EsS0FBYSxFQUFTTixFQUFXTSxJQUMzQ04sRUFBV00sR0FBU0ksV0FDdEJaLEVBQUdRLEdBQVdOLEVBQVdNLEdBRXpCLEVBQU9SLEVBQUdRLEdBQVVOLEVBQVdNLEtBRXZCLEVBQVNSLEVBQUdRLEtBQWEsRUFBU04sRUFBV00sS0FDdkRSLEVBQUdRLEdBQVcsQ0FBQyxFQUNYTixFQUFXTSxHQUFTSSxXQUN0QlosRUFBR1EsR0FBV04sRUFBV00sR0FFekIsRUFBT1IsRUFBR1EsR0FBVU4sRUFBV00sS0FHakNSLEVBQUdRLEdBQVdOLEVBQVdNLEdBRy9CLENBQ0YsQ0FDRixDQXJDRixJQUFnQnhOLEVBc0NkLE9BQU9nTixDQUNULENBQ0EsU0FBUyxFQUFlOUksRUFBSTJKLEVBQVNDLEdBQ25DNUosRUFBRzhCLE1BQU0rSCxZQUFZRixFQUFTQyxFQUNoQyxDQUNBLFNBQVNFLEVBQXFCQyxHQUM1QixJQUFJLE9BQ0ZDLEVBQU0sZUFDTkMsRUFBYyxLQUNkQyxHQUNFSCxFQUNKLE1BQU1uTSxFQUFTLElBQ1R1TSxHQUFpQkgsRUFBT0ksVUFDOUIsSUFDSUMsRUFEQUMsRUFBWSxLQUVoQixNQUFNaEssRUFBVzBKLEVBQU9PLE9BQU9DLE1BQy9CUixFQUFPUyxVQUFVM0ksTUFBTTRJLGVBQWlCLE9BQ3hDOU0sRUFBTzJKLHFCQUFxQnlDLEVBQU9XLGdCQUNuQyxNQUFNQyxFQUFNWCxFQUFpQkUsRUFBZ0IsT0FBUyxPQUNoRFUsRUFBZSxDQUFDQyxFQUFTbEosSUFDZCxTQUFSZ0osR0FBa0JFLEdBQVdsSixHQUFrQixTQUFSZ0osR0FBa0JFLEdBQVdsSixFQUV2RW1KLEVBQVUsS0FDZFYsR0FBTyxJQUFJbkQsTUFBTzhELFVBQ0EsT0FBZFYsSUFDRkEsRUFBWUQsR0FFZCxNQUFNWSxFQUFXQyxLQUFLQyxJQUFJRCxLQUFLRSxLQUFLZixFQUFPQyxHQUFhaEssRUFBVSxHQUFJLEdBQ2hFK0ssRUFBZSxHQUFNSCxLQUFLSSxJQUFJTCxFQUFXQyxLQUFLSyxJQUFNLEVBQzFELElBQUlDLEVBQWtCckIsRUFBZ0JrQixHQUFnQnBCLEVBQWlCRSxHQU92RSxHQU5JVSxFQUFhVyxFQUFpQnZCLEtBQ2hDdUIsRUFBa0J2QixHQUVwQkQsRUFBT1MsVUFBVWdCLFNBQVMsQ0FDeEIsQ0FBQ3ZCLEdBQU9zQixJQUVOWCxFQUFhVyxFQUFpQnZCLEdBVWhDLE9BVEFELEVBQU9TLFVBQVUzSSxNQUFNSyxTQUFXLFNBQ2xDNkgsRUFBT1MsVUFBVTNJLE1BQU00SSxlQUFpQixHQUN4Q3RKLFlBQVcsS0FDVDRJLEVBQU9TLFVBQVUzSSxNQUFNSyxTQUFXLEdBQ2xDNkgsRUFBT1MsVUFBVWdCLFNBQVMsQ0FDeEIsQ0FBQ3ZCLEdBQU9zQixHQUNSLFNBRUo1TixFQUFPMkoscUJBQXFCeUMsRUFBT1csZ0JBR3JDWCxFQUFPVyxlQUFpQi9NLEVBQU95SixzQkFBc0IwRCxFQUFRLEVBRS9EQSxHQUNGLENBQ0EsU0FBUyxFQUFvQlcsR0FDM0IsT0FBT0EsRUFBUWpQLGNBQWMsNEJBQThCaVAsRUFBUUMsWUFBY0QsRUFBUUMsV0FBV2xQLGNBQWMsNEJBQThCaVAsQ0FDbEosQ0FDQSxTQUFTLEVBQWdCclAsRUFBU3VQLEdBSWhDLFlBSGlCLElBQWJBLElBQ0ZBLEVBQVcsSUFFTixJQUFJdlAsRUFBUWtDLFVBQVVsQixRQUFPMkMsR0FBTUEsRUFBRy9CLFFBQVEyTixJQUN2RCxDQUNBLFNBQVNDLEVBQVlDLEdBQ25CLElBRUUsWUFEQUMsUUFBUUMsS0FBS0YsRUFFZixDQUFFLE1BQU9HLEdBRVQsQ0FDRixDQUNBLFNBQVMsRUFBY0MsRUFBS0MsUUFDVixJQUFaQSxJQUNGQSxFQUFVLElBRVosTUFBTW5NLEVBQUt0RSxTQUFTdUUsY0FBY2lNLEdBRWxDLE9BREFsTSxFQUFHN0IsVUFBVUcsT0FBUXJCLE1BQU1tUCxRQUFRRCxHQUFXQSxFQXZNaEQsU0FBeUJBLEdBSXZCLFlBSGdCLElBQVpBLElBQ0ZBLEVBQVUsSUFFTEEsRUFBUWpRLE9BQU9DLE1BQU0sS0FBS2tCLFFBQU9nUCxLQUFPQSxFQUFFblEsUUFDbkQsQ0FrTTBELENBQWdCaVEsSUFDakVuTSxDQUNULENBcUNBLFNBQVNzTSxFQUFhdE0sRUFBSXVNLEdBRXhCLE9BRGUsSUFDRHhGLGlCQUFpQi9HLEVBQUksTUFBTWdILGlCQUFpQnVGLEVBQzVELENBQ0EsU0FBUyxFQUFhdk0sR0FDcEIsSUFDSXBFLEVBREE0USxFQUFReE0sRUFFWixHQUFJd00sRUFBTyxDQUdULElBRkE1USxFQUFJLEVBRXVDLFFBQW5DNFEsRUFBUUEsRUFBTUMsa0JBQ0csSUFBbkJELEVBQU10RCxXQUFnQnROLEdBQUssR0FFakMsT0FBT0EsQ0FDVCxDQUVGLENBQ0EsU0FBUyxFQUFlb0UsRUFBSTRMLEdBQzFCLE1BQU1jLEVBQVUsR0FDaEIsSUFBSXBRLEVBQVMwRCxFQUFHaUUsY0FDaEIsS0FBTzNILEdBQ0RzUCxFQUNFdFAsRUFBTzJCLFFBQVEyTixJQUFXYyxFQUFRNVAsS0FBS1IsR0FFM0NvUSxFQUFRNVAsS0FBS1IsR0FFZkEsRUFBU0EsRUFBTzJILGNBRWxCLE9BQU95SSxDQUNULENBV0EsU0FBU0MsRUFBaUIzTSxFQUFJNE0sRUFBTUMsR0FDbEMsTUFBTWpQLEVBQVMsSUFDZixPQUFJaVAsRUFDSzdNLEVBQVksVUFBVDRNLEVBQW1CLGNBQWdCLGdCQUFrQmpFLFdBQVcvSyxFQUFPbUosaUJBQWlCL0csRUFBSSxNQUFNZ0gsaUJBQTBCLFVBQVQ0RixFQUFtQixlQUFpQixlQUFpQmpFLFdBQVcvSyxFQUFPbUosaUJBQWlCL0csRUFBSSxNQUFNZ0gsaUJBQTBCLFVBQVQ0RixFQUFtQixjQUFnQixrQkFFOVE1TSxFQUFHOE0sV0FDWixDQzNSQSxJQUFJQyxFQWdCQUMsRUFxREFDLEVBNURKLFNBQVNDLElBSVAsT0FIS0gsSUFDSEEsRUFWSixXQUNFLE1BQU1uUCxFQUFTLElBQ1RsQyxFQUFXLElBQ2pCLE1BQU8sQ0FDTHlSLGFBQWN6UixFQUFTMkYsaUJBQW1CM0YsRUFBUzJGLGdCQUFnQlMsT0FBUyxtQkFBb0JwRyxFQUFTMkYsZ0JBQWdCUyxNQUN6SHNMLFNBQVUsaUJBQWtCeFAsR0FBVUEsRUFBT3lQLGVBQWlCM1IsYUFBb0JrQyxFQUFPeVAsZUFFN0YsQ0FHY0MsSUFFTFAsQ0FDVCxDQTZDQSxTQUFTUSxFQUFVQyxHQU9qQixZQU5rQixJQUFkQSxJQUNGQSxFQUFZLENBQUMsR0FFVlIsSUFDSEEsRUEvQ0osU0FBb0JTLEdBQ2xCLElBQUksVUFDRmhILFFBQ1ksSUFBVmdILEVBQW1CLENBQUMsRUFBSUEsRUFDNUIsTUFBTVYsRUFBVUcsSUFDVnRQLEVBQVMsSUFDVDhQLEVBQVc5UCxFQUFPNEksVUFBVWtILFNBQzVCQyxFQUFLbEgsR0FBYTdJLEVBQU80SSxVQUFVQyxVQUNuQ21ILEVBQVMsQ0FDYkMsS0FBSyxFQUNMQyxTQUFTLEdBRUxDLEVBQWNuUSxFQUFPdUosT0FBTzZHLE1BQzVCQyxFQUFlclEsRUFBT3VKLE9BQU9sRixPQUM3QjZMLEVBQVVILEVBQUdPLE1BQU0sK0JBQ3pCLElBQUlDLEVBQU9SLEVBQUdPLE1BQU0sd0JBQ3BCLE1BQU1FLEVBQU9ULEVBQUdPLE1BQU0sMkJBQ2hCRyxHQUFVRixHQUFRUixFQUFHTyxNQUFNLDhCQUMzQkksRUFBdUIsVUFBYlosRUFDaEIsSUFBSWEsRUFBcUIsYUFBYmIsRUFxQlosT0FqQktTLEdBQVFJLEdBQVN4QixFQUFRSyxPQURWLENBQUMsWUFBYSxZQUFhLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQ3hHN1AsUUFBUSxHQUFHd1EsS0FBZUUsTUFBbUIsSUFDOUZFLEVBQU9SLEVBQUdPLE1BQU0sdUJBQ1hDLElBQU1BLEVBQU8sQ0FBQyxFQUFHLEVBQUcsV0FDekJJLEdBQVEsR0FJTlQsSUFBWVEsSUFDZFYsRUFBT1ksR0FBSyxVQUNaWixFQUFPRSxTQUFVLElBRWZLLEdBQVFFLEdBQVVELEtBQ3BCUixFQUFPWSxHQUFLLE1BQ1paLEVBQU9DLEtBQU0sR0FJUkQsQ0FDVCxDQU1tQmEsQ0FBV2pCLElBRXJCUixDQUNULENBdUJBLFNBQVMwQixJQUlQLE9BSEt6QixJQUNIQSxFQXRCSixXQUNFLE1BQU1yUCxFQUFTLElBQ2YsSUFBSStRLEdBQXFCLEVBQ3pCLFNBQVNDLElBQ1AsTUFBTWpCLEVBQUsvUCxFQUFPNEksVUFBVUMsVUFBVW9JLGNBQ3RDLE9BQU9sQixFQUFHcFEsUUFBUSxXQUFhLEdBQUtvUSxFQUFHcFEsUUFBUSxVQUFZLEdBQUtvUSxFQUFHcFEsUUFBUSxXQUFhLENBQzFGLENBQ0EsR0FBSXFSLElBQVksQ0FDZCxNQUFNakIsRUFBS2pRLE9BQU9FLEVBQU80SSxVQUFVQyxXQUNuQyxHQUFJa0gsRUFBR21CLFNBQVMsWUFBYSxDQUMzQixNQUFPQyxFQUFPQyxHQUFTckIsRUFBR3hSLE1BQU0sWUFBWSxHQUFHQSxNQUFNLEtBQUssR0FBR0EsTUFBTSxLQUFLZSxLQUFJK1IsR0FBT0MsT0FBT0QsS0FDMUZOLEVBQXFCSSxFQUFRLElBQWdCLEtBQVZBLEdBQWdCQyxFQUFRLENBQzdELENBQ0YsQ0FDQSxNQUFPLENBQ0xKLFNBQVVELEdBQXNCQyxJQUNoQ0QscUJBQ0FRLFVBQVcsK0NBQStDMUssS0FBSzdHLEVBQU80SSxVQUFVQyxXQUVwRixDQUdjMkksSUFFTG5DLENBQ1QsQ0FpSkEsSUFBSW9DLEVBQWdCLENBQ2xCLEVBQUFDLENBQUdDLEVBQVFDLEVBQVNDLEdBQ2xCLE1BQU1uUyxFQUFPbkMsS0FDYixJQUFLbUMsRUFBS29TLGlCQUFtQnBTLEVBQUtxUyxVQUFXLE9BQU9yUyxFQUNwRCxHQUF1QixtQkFBWmtTLEVBQXdCLE9BQU9sUyxFQUMxQyxNQUFNc1MsRUFBU0gsRUFBVyxVQUFZLE9BS3RDLE9BSkFGLEVBQU9wVCxNQUFNLEtBQUtpSCxTQUFReU0sSUFDbkJ2UyxFQUFLb1MsZ0JBQWdCRyxLQUFRdlMsRUFBS29TLGdCQUFnQkcsR0FBUyxJQUNoRXZTLEVBQUtvUyxnQkFBZ0JHLEdBQU9ELEdBQVFKLEVBQVEsSUFFdkNsUyxDQUNULEVBQ0EsSUFBQXdTLENBQUtQLEVBQVFDLEVBQVNDLEdBQ3BCLE1BQU1uUyxFQUFPbkMsS0FDYixJQUFLbUMsRUFBS29TLGlCQUFtQnBTLEVBQUtxUyxVQUFXLE9BQU9yUyxFQUNwRCxHQUF1QixtQkFBWmtTLEVBQXdCLE9BQU9sUyxFQUMxQyxTQUFTeVMsSUFDUHpTLEVBQUswUyxJQUFJVCxFQUFRUSxHQUNiQSxFQUFZRSx1QkFDUEYsRUFBWUUsZUFFckIsSUFBSyxJQUFJQyxFQUFPL08sVUFBVXRGLE9BQVFzVSxFQUFPLElBQUlsVCxNQUFNaVQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUWpQLFVBQVVpUCxHQUV6QlosRUFBUWEsTUFBTS9TLEVBQU02UyxFQUN0QixDQUVBLE9BREFKLEVBQVlFLGVBQWlCVCxFQUN0QmxTLEVBQUtnUyxHQUFHQyxFQUFRUSxFQUFhTixFQUN0QyxFQUNBLEtBQUFhLENBQU1kLEVBQVNDLEdBQ2IsTUFBTW5TLEVBQU9uQyxLQUNiLElBQUttQyxFQUFLb1MsaUJBQW1CcFMsRUFBS3FTLFVBQVcsT0FBT3JTLEVBQ3BELEdBQXVCLG1CQUFaa1MsRUFBd0IsT0FBT2xTLEVBQzFDLE1BQU1zUyxFQUFTSCxFQUFXLFVBQVksT0FJdEMsT0FISW5TLEVBQUtpVCxtQkFBbUJoVCxRQUFRaVMsR0FBVyxHQUM3Q2xTLEVBQUtpVCxtQkFBbUJYLEdBQVFKLEdBRTNCbFMsQ0FDVCxFQUNBLE1BQUFrVCxDQUFPaEIsR0FDTCxNQUFNbFMsRUFBT25DLEtBQ2IsSUFBS21DLEVBQUtvUyxpQkFBbUJwUyxFQUFLcVMsVUFBVyxPQUFPclMsRUFDcEQsSUFBS0EsRUFBS2lULG1CQUFvQixPQUFPalQsRUFDckMsTUFBTVYsRUFBUVUsRUFBS2lULG1CQUFtQmhULFFBQVFpUyxHQUk5QyxPQUhJNVMsR0FBUyxHQUNYVSxFQUFLaVQsbUJBQW1CRSxPQUFPN1QsRUFBTyxHQUVqQ1UsQ0FDVCxFQUNBLEdBQUEwUyxDQUFJVCxFQUFRQyxHQUNWLE1BQU1sUyxFQUFPbkMsS0FDYixPQUFLbUMsRUFBS29TLGlCQUFtQnBTLEVBQUtxUyxVQUFrQnJTLEVBQy9DQSxFQUFLb1MsaUJBQ1ZILEVBQU9wVCxNQUFNLEtBQUtpSCxTQUFReU0sU0FDRCxJQUFaTCxFQUNUbFMsRUFBS29TLGdCQUFnQkcsR0FBUyxHQUNyQnZTLEVBQUtvUyxnQkFBZ0JHLElBQzlCdlMsRUFBS29TLGdCQUFnQkcsR0FBT3pNLFNBQVEsQ0FBQ3NOLEVBQWM5VCxNQUM3QzhULElBQWlCbEIsR0FBV2tCLEVBQWFULGdCQUFrQlMsRUFBYVQsaUJBQW1CVCxJQUM3RmxTLEVBQUtvUyxnQkFBZ0JHLEdBQU9ZLE9BQU83VCxFQUFPLEVBQzVDLEdBRUosSUFFS1UsR0FaMkJBLENBYXBDLEVBQ0EsSUFBQXFULEdBQ0UsTUFBTXJULEVBQU9uQyxLQUNiLElBQUttQyxFQUFLb1MsaUJBQW1CcFMsRUFBS3FTLFVBQVcsT0FBT3JTLEVBQ3BELElBQUtBLEVBQUtvUyxnQkFBaUIsT0FBT3BTLEVBQ2xDLElBQUlpUyxFQUNBcUIsRUFDQUMsRUFDSixJQUFLLElBQUlDLEVBQVEzUCxVQUFVdEYsT0FBUXNVLEVBQU8sSUFBSWxULE1BQU02VCxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGWixFQUFLWSxHQUFTNVAsVUFBVTRQLEdBRUgsaUJBQVpaLEVBQUssSUFBbUJsVCxNQUFNbVAsUUFBUStELEVBQUssS0FDcERaLEVBQVNZLEVBQUssR0FDZFMsRUFBT1QsRUFBS3ZSLE1BQU0sRUFBR3VSLEVBQUt0VSxRQUMxQmdWLEVBQVV2VCxJQUVWaVMsRUFBU1ksRUFBSyxHQUFHWixPQUNqQnFCLEVBQU9ULEVBQUssR0FBR1MsS0FDZkMsRUFBVVYsRUFBSyxHQUFHVSxTQUFXdlQsR0FFL0JzVCxFQUFLSSxRQUFRSCxHQWNiLE9BYm9CNVQsTUFBTW1QLFFBQVFtRCxHQUFVQSxFQUFTQSxFQUFPcFQsTUFBTSxNQUN0RGlILFNBQVF5TSxJQUNkdlMsRUFBS2lULG9CQUFzQmpULEVBQUtpVCxtQkFBbUIxVSxRQUNyRHlCLEVBQUtpVCxtQkFBbUJuTixTQUFRc04sSUFDOUJBLEVBQWFMLE1BQU1RLEVBQVMsQ0FBQ2hCLEtBQVVlLEdBQU0sSUFHN0N0VCxFQUFLb1MsaUJBQW1CcFMsRUFBS29TLGdCQUFnQkcsSUFDL0N2UyxFQUFLb1MsZ0JBQWdCRyxHQUFPek0sU0FBUXNOLElBQ2xDQSxFQUFhTCxNQUFNUSxFQUFTRCxFQUFLLEdBRXJDLElBRUt0VCxDQUNULEdBcWlCRixNQUFNMlQsRUFBdUIsQ0FBQ2pILEVBQVFrSCxLQUNwQyxJQUFLbEgsR0FBVUEsRUFBTzJGLFlBQWMzRixFQUFPTyxPQUFRLE9BQ25ELE1BQ01tQixFQUFVd0YsRUFBUUMsUUFESW5ILEVBQU9vSCxVQUFZLGVBQWlCLElBQUlwSCxFQUFPTyxPQUFPOEcsY0FFbEYsR0FBSTNGLEVBQVMsQ0FDWCxJQUFJNEYsRUFBUzVGLEVBQVFqUCxjQUFjLElBQUl1TixFQUFPTyxPQUFPZ0gsdUJBQ2hERCxHQUFVdEgsRUFBT29ILFlBQ2hCMUYsRUFBUUMsV0FDVjJGLEVBQVM1RixFQUFRQyxXQUFXbFAsY0FBYyxJQUFJdU4sRUFBT08sT0FBT2dILHNCQUc1RGxLLHVCQUFzQixLQUNoQnFFLEVBQVFDLGFBQ1YyRixFQUFTNUYsRUFBUUMsV0FBV2xQLGNBQWMsSUFBSXVOLEVBQU9PLE9BQU9nSCxzQkFDeERELEdBQVFBLEVBQU83UyxTQUNyQixLQUlGNlMsR0FBUUEsRUFBTzdTLFFBQ3JCLEdBRUkrUyxFQUFTLENBQUN4SCxFQUFRcE4sS0FDdEIsSUFBS29OLEVBQU95SCxPQUFPN1UsR0FBUSxPQUMzQixNQUFNc1UsRUFBVWxILEVBQU95SCxPQUFPN1UsR0FBT0gsY0FBYyxvQkFDL0N5VSxHQUFTQSxFQUFRUSxnQkFBZ0IsVUFBVSxFQUUzQ0MsRUFBVTNILElBQ2QsSUFBS0EsR0FBVUEsRUFBTzJGLFlBQWMzRixFQUFPTyxPQUFRLE9BQ25ELElBQUlxSCxFQUFTNUgsRUFBT08sT0FBT3NILG9CQUMzQixNQUFNeEksRUFBTVcsRUFBT3lILE9BQU81VixPQUMxQixJQUFLd04sSUFBUXVJLEdBQVVBLEVBQVMsRUFBRyxPQUNuQ0EsRUFBUzFHLEtBQUtFLElBQUl3RyxFQUFRdkksR0FDMUIsTUFBTXlJLEVBQWdELFNBQWhDOUgsRUFBT08sT0FBT3VILGNBQTJCOUgsRUFBTytILHVCQUF5QjdHLEtBQUs4RyxLQUFLaEksRUFBT08sT0FBT3VILGVBQ2pIRyxFQUFjakksRUFBT2lJLFlBQzNCLEdBQUlqSSxFQUFPTyxPQUFPMkgsTUFBUWxJLEVBQU9PLE9BQU8ySCxLQUFLQyxLQUFPLEVBQUcsQ0FDckQsTUFBTUMsRUFBZUgsRUFDZkksRUFBaUIsQ0FBQ0QsRUFBZVIsR0FTdkMsT0FSQVMsRUFBZXZWLFFBQVFHLE1BQU1xVixLQUFLLENBQ2hDelcsT0FBUStWLElBQ1AxVSxLQUFJLENBQUNxVixFQUFHM1csSUFDRndXLEVBQWVOLEVBQWdCbFcsVUFFeENvTyxFQUFPeUgsT0FBT3JPLFNBQVEsQ0FBQ3NJLEVBQVM5UCxLQUMxQnlXLEVBQWV2RCxTQUFTcEQsRUFBUThHLFNBQVNoQixFQUFPeEgsRUFBUXBPLEVBQUUsR0FHbEUsQ0FDQSxNQUFNNlcsRUFBdUJSLEVBQWNILEVBQWdCLEVBQzNELEdBQUk5SCxFQUFPTyxPQUFPbUksUUFBVTFJLEVBQU9PLE9BQU9vSSxLQUN4QyxJQUFLLElBQUkvVyxFQUFJcVcsRUFBY0wsRUFBUWhXLEdBQUs2VyxFQUF1QmIsRUFBUWhXLEdBQUssRUFBRyxDQUM3RSxNQUFNZ1gsR0FBYWhYLEVBQUl5TixFQUFNQSxHQUFPQSxHQUNoQ3VKLEVBQVlYLEdBQWVXLEVBQVlILElBQXNCakIsRUFBT3hILEVBQVE0SSxFQUNsRixNQUVBLElBQUssSUFBSWhYLEVBQUlzUCxLQUFLQyxJQUFJOEcsRUFBY0wsRUFBUSxHQUFJaFcsR0FBS3NQLEtBQUtFLElBQUlxSCxFQUF1QmIsRUFBUXZJLEVBQU0sR0FBSXpOLEdBQUssRUFDdEdBLElBQU1xVyxJQUFnQnJXLEVBQUk2VyxHQUF3QjdXLEVBQUlxVyxJQUN4RFQsRUFBT3hILEVBQVFwTyxFQUdyQixFQXlKRixJQUFJeUUsRUFBUyxDQUNYd1MsV0F4dkJGLFdBQ0UsTUFBTTdJLEVBQVM3TyxLQUNmLElBQUk2UyxFQUNBL0wsRUFDSixNQUFNakMsRUFBS2dLLEVBQU9oSyxHQUVoQmdPLE9BRGlDLElBQXhCaEUsRUFBT08sT0FBT3lELE9BQWlELE9BQXhCaEUsRUFBT08sT0FBT3lELE1BQ3REaEUsRUFBT08sT0FBT3lELE1BRWRoTyxFQUFHOFMsWUFHWDdRLE9BRGtDLElBQXpCK0gsRUFBT08sT0FBT3RJLFFBQW1ELE9BQXpCK0gsRUFBT08sT0FBT3RJLE9BQ3REK0gsRUFBT08sT0FBT3RJLE9BRWRqQyxFQUFHK1MsYUFFQSxJQUFWL0UsR0FBZWhFLEVBQU9nSixnQkFBNkIsSUFBWC9RLEdBQWdCK0gsRUFBT2lKLGVBS25FakYsRUFBUUEsRUFBUWtGLFNBQVM1RyxFQUFhdE0sRUFBSSxpQkFBbUIsRUFBRyxJQUFNa1QsU0FBUzVHLEVBQWF0TSxFQUFJLGtCQUFvQixFQUFHLElBQ3ZIaUMsRUFBU0EsRUFBU2lSLFNBQVM1RyxFQUFhdE0sRUFBSSxnQkFBa0IsRUFBRyxJQUFNa1QsU0FBUzVHLEVBQWF0TSxFQUFJLG1CQUFxQixFQUFHLElBQ3JIa1AsT0FBT2lFLE1BQU1uRixLQUFRQSxFQUFRLEdBQzdCa0IsT0FBT2lFLE1BQU1sUixLQUFTQSxFQUFTLEdBQ25DMkMsT0FBT3dPLE9BQU9wSixFQUFRLENBQ3BCZ0UsUUFDQS9MLFNBQ0EySyxLQUFNNUMsRUFBT2dKLGVBQWlCaEYsRUFBUS9MLElBRTFDLEVBNHRCRW9SLGFBMXRCRixXQUNFLE1BQU1ySixFQUFTN08sS0FDZixTQUFTbVksRUFBMEJ4WCxFQUFNeVgsR0FDdkMsT0FBTzVLLFdBQVc3TSxFQUFLa0wsaUJBQWlCZ0QsRUFBT3dKLGtCQUFrQkQsS0FBVyxFQUM5RSxDQUNBLE1BQU1oSixFQUFTUCxFQUFPTyxRQUNoQixVQUNKRSxFQUFTLFNBQ1RnSixFQUNBN0csS0FBTThHLEVBQ05DLGFBQWNDLEVBQUcsU0FDakJDLEdBQ0U3SixFQUNFOEosRUFBWTlKLEVBQU8rSixTQUFXeEosRUFBT3dKLFFBQVFDLFFBQzdDQyxFQUF1QkgsRUFBWTlKLEVBQU8rSixRQUFRdEMsT0FBTzVWLE9BQVNtTyxFQUFPeUgsT0FBTzVWLE9BQ2hGNFYsRUFBUyxFQUFnQmdDLEVBQVUsSUFBSXpKLEVBQU9PLE9BQU84Ryw0QkFDckQ2QyxFQUFlSixFQUFZOUosRUFBTytKLFFBQVF0QyxPQUFPNVYsT0FBUzRWLEVBQU81VixPQUN2RSxJQUFJc1ksRUFBVyxHQUNmLE1BQU1DLEVBQWEsR0FDYkMsRUFBa0IsR0FDeEIsSUFBSUMsRUFBZS9KLEVBQU9nSyxtQkFDRSxtQkFBakJELElBQ1RBLEVBQWUvSixFQUFPZ0ssbUJBQW1CcFgsS0FBSzZNLElBRWhELElBQUl3SyxFQUFjakssRUFBT2tLLGtCQUNFLG1CQUFoQkQsSUFDVEEsRUFBY2pLLEVBQU9rSyxrQkFBa0J0WCxLQUFLNk0sSUFFOUMsTUFBTTBLLEVBQXlCMUssRUFBT21LLFNBQVN0WSxPQUN6QzhZLEVBQTJCM0ssRUFBT29LLFdBQVd2WSxPQUNuRCxJQUFJK1ksRUFBZXJLLEVBQU9xSyxhQUN0QkMsR0FBaUJQLEVBQ2pCUSxFQUFnQixFQUNoQmxZLEVBQVEsRUFDWixRQUEwQixJQUFmOFcsRUFDVCxPQUUwQixpQkFBakJrQixHQUE2QkEsRUFBYXJYLFFBQVEsTUFBUSxFQUNuRXFYLEVBQWVqTSxXQUFXaU0sRUFBYWhSLFFBQVEsSUFBSyxLQUFPLElBQU04UCxFQUNoQyxpQkFBakJrQixJQUNoQkEsRUFBZWpNLFdBQVdpTSxJQUU1QjVLLEVBQU8rSyxhQUFlSCxFQUd0Qm5ELEVBQU9yTyxTQUFRc0ksSUFDVGtJLEVBQ0ZsSSxFQUFRNUosTUFBTWtULFdBQWEsR0FFM0J0SixFQUFRNUosTUFBTW1ULFlBQWMsR0FFOUJ2SixFQUFRNUosTUFBTVMsYUFBZSxHQUM3Qm1KLEVBQVE1SixNQUFNUSxVQUFZLEVBQUUsSUFJMUJpSSxFQUFPMkssZ0JBQWtCM0ssRUFBTzRLLFVBQ2xDLEVBQWUxSyxFQUFXLGtDQUFtQyxJQUM3RCxFQUFlQSxFQUFXLGlDQUFrQyxLQUU5RCxNQUFNMkssRUFBYzdLLEVBQU8ySCxNQUFRM0gsRUFBTzJILEtBQUtDLEtBQU8sR0FBS25JLEVBQU9rSSxLQVFsRSxJQUFJbUQsRUFQQUQsRUFDRnBMLEVBQU9rSSxLQUFLb0QsV0FBVzdELEdBQ2R6SCxFQUFPa0ksTUFDaEJsSSxFQUFPa0ksS0FBS3FELGNBS2QsTUFBTUMsRUFBZ0QsU0FBekJqTCxFQUFPdUgsZUFBNEJ2SCxFQUFPa0wsYUFBZTdRLE9BQU9FLEtBQUt5RixFQUFPa0wsYUFBYXBZLFFBQU8wSCxRQUNuRSxJQUExQ3dGLEVBQU9rTCxZQUFZMVEsR0FBSytNLGdCQUNyQ2pXLE9BQVMsRUFDWixJQUFLLElBQUlELEVBQUksRUFBR0EsRUFBSXNZLEVBQWN0WSxHQUFLLEVBQUcsQ0FFeEMsSUFBSThaLEVBS0osR0FOQUwsRUFBWSxFQUVSNUQsRUFBTzdWLEtBQUk4WixFQUFRakUsRUFBTzdWLElBQzFCd1osR0FDRnBMLEVBQU9rSSxLQUFLeUQsWUFBWS9aLEVBQUc4WixFQUFPakUsSUFFaENBLEVBQU83VixJQUF5QyxTQUFuQzBRLEVBQWFvSixFQUFPLFdBQXJDLENBRUEsR0FBNkIsU0FBekJuTCxFQUFPdUgsY0FBMEIsQ0FDL0IwRCxJQUNGL0QsRUFBTzdWLEdBQUdrRyxNQUFNa0ksRUFBT3dKLGtCQUFrQixVQUFZLElBRXZELE1BQU1vQyxFQUFjN08saUJBQWlCMk8sR0FDL0JHLEVBQW1CSCxFQUFNNVQsTUFBTW9HLFVBQy9CNE4sRUFBeUJKLEVBQU01VCxNQUFNcUcsZ0JBTzNDLEdBTkkwTixJQUNGSCxFQUFNNVQsTUFBTW9HLFVBQVksUUFFdEI0TixJQUNGSixFQUFNNVQsTUFBTXFHLGdCQUFrQixRQUU1Qm9DLEVBQU93TCxhQUNUVixFQUFZckwsRUFBT2dKLGVBQWlCckcsRUFBaUIrSSxFQUFPLFNBQVMsR0FBUS9JLEVBQWlCK0ksRUFBTyxVQUFVLE9BQzFHLENBRUwsTUFBTTFILEVBQVFzRixFQUEwQnNDLEVBQWEsU0FDL0NJLEVBQWMxQyxFQUEwQnNDLEVBQWEsZ0JBQ3JESyxFQUFlM0MsRUFBMEJzQyxFQUFhLGlCQUN0RFosRUFBYTFCLEVBQTBCc0MsRUFBYSxlQUNwRFgsRUFBYzNCLEVBQTBCc0MsRUFBYSxnQkFDckRNLEVBQVlOLEVBQVk1TyxpQkFBaUIsY0FDL0MsR0FBSWtQLEdBQTJCLGVBQWRBLEVBQ2ZiLEVBQVlySCxFQUFRZ0gsRUFBYUMsTUFDNUIsQ0FDTCxNQUFNLFlBQ0puQyxFQUFXLFlBQ1hoRyxHQUNFNEksRUFDSkwsRUFBWXJILEVBQVFnSSxFQUFjQyxFQUFlakIsRUFBYUMsR0FBZW5JLEVBQWNnRyxFQUM3RixDQUNGLENBQ0krQyxJQUNGSCxFQUFNNVQsTUFBTW9HLFVBQVkyTixHQUV0QkMsSUFDRkosRUFBTTVULE1BQU1xRyxnQkFBa0IyTixHQUU1QnZMLEVBQU93TCxlQUFjVixFQUFZbkssS0FBS2lMLE1BQU1kLEdBQ2xELE1BQ0VBLEdBQWEzQixHQUFjbkosRUFBT3VILGNBQWdCLEdBQUs4QyxHQUFnQnJLLEVBQU91SCxjQUMxRXZILEVBQU93TCxlQUFjVixFQUFZbkssS0FBS2lMLE1BQU1kLElBQzVDNUQsRUFBTzdWLEtBQ1Q2VixFQUFPN1YsR0FBR2tHLE1BQU1rSSxFQUFPd0osa0JBQWtCLFVBQVksR0FBRzZCLE9BR3hENUQsRUFBTzdWLEtBQ1Q2VixFQUFPN1YsR0FBR3dhLGdCQUFrQmYsR0FFOUJoQixFQUFnQnZYLEtBQUt1WSxHQUNqQjlLLEVBQU8ySyxnQkFDVEwsRUFBZ0JBLEVBQWdCUSxFQUFZLEVBQUlQLEVBQWdCLEVBQUlGLEVBQzlDLElBQWxCRSxHQUE2QixJQUFObFosSUFBU2laLEVBQWdCQSxFQUFnQm5CLEVBQWEsRUFBSWtCLEdBQzNFLElBQU5oWixJQUFTaVosRUFBZ0JBLEVBQWdCbkIsRUFBYSxFQUFJa0IsR0FDMUQxSixLQUFLbUwsSUFBSXhCLEdBQWlCLE9BQVVBLEVBQWdCLEdBQ3BEdEssRUFBT3dMLGVBQWNsQixFQUFnQjNKLEtBQUtpTCxNQUFNdEIsSUFDaERqWSxFQUFRMk4sRUFBTytMLGdCQUFtQixHQUFHbkMsRUFBU3JYLEtBQUsrWCxHQUN2RFQsRUFBV3RYLEtBQUsrWCxLQUVadEssRUFBT3dMLGVBQWNsQixFQUFnQjNKLEtBQUtpTCxNQUFNdEIsS0FDL0NqWSxFQUFRc08sS0FBS0UsSUFBSXBCLEVBQU9PLE9BQU9nTSxtQkFBb0IzWixJQUFVb04sRUFBT08sT0FBTytMLGdCQUFtQixHQUFHbkMsRUFBU3JYLEtBQUsrWCxHQUNwSFQsRUFBV3RYLEtBQUsrWCxHQUNoQkEsRUFBZ0JBLEVBQWdCUSxFQUFZVCxHQUU5QzVLLEVBQU8rSyxhQUFlTSxFQUFZVCxFQUNsQ0UsRUFBZ0JPLEVBQ2hCelksR0FBUyxDQXJFMkQsQ0FzRXRFLENBYUEsR0FaQW9OLEVBQU8rSyxZQUFjN0osS0FBS0MsSUFBSW5CLEVBQU8rSyxZQUFhckIsR0FBY2MsRUFDNURaLEdBQU9DLElBQStCLFVBQWxCdEosRUFBT2lNLFFBQXdDLGNBQWxCak0sRUFBT2lNLFVBQzFEL0wsRUFBVTNJLE1BQU1rTSxNQUFRLEdBQUdoRSxFQUFPK0ssWUFBY0gsT0FFOUNySyxFQUFPa00saUJBQ1RoTSxFQUFVM0ksTUFBTWtJLEVBQU93SixrQkFBa0IsVUFBWSxHQUFHeEosRUFBTytLLFlBQWNILE9BRTNFUSxHQUNGcEwsRUFBT2tJLEtBQUt3RSxrQkFBa0JyQixFQUFXbEIsSUFJdEM1SixFQUFPMkssZUFBZ0IsQ0FDMUIsTUFBTXlCLEVBQWdCLEdBQ3RCLElBQUssSUFBSS9hLEVBQUksRUFBR0EsRUFBSXVZLEVBQVN0WSxPQUFRRCxHQUFLLEVBQUcsQ0FDM0MsSUFBSWdiLEVBQWlCekMsRUFBU3ZZLEdBQzFCMk8sRUFBT3dMLGVBQWNhLEVBQWlCMUwsS0FBS2lMLE1BQU1TLElBQ2pEekMsRUFBU3ZZLElBQU1vTyxFQUFPK0ssWUFBY3JCLEdBQ3RDaUQsRUFBYzdaLEtBQUs4WixFQUV2QixDQUNBekMsRUFBV3dDLEVBQ1B6TCxLQUFLaUwsTUFBTW5NLEVBQU8rSyxZQUFjckIsR0FBY3hJLEtBQUtpTCxNQUFNaEMsRUFBU0EsRUFBU3RZLE9BQVMsSUFBTSxHQUM1RnNZLEVBQVNyWCxLQUFLa04sRUFBTytLLFlBQWNyQixFQUV2QyxDQUNBLEdBQUlJLEdBQWF2SixFQUFPb0ksS0FBTSxDQUM1QixNQUFNL0YsRUFBT3lILEVBQWdCLEdBQUtPLEVBQ2xDLEdBQUlySyxFQUFPK0wsZUFBaUIsRUFBRyxDQUM3QixNQUFNTyxFQUFTM0wsS0FBSzhHLE1BQU1oSSxFQUFPK0osUUFBUStDLGFBQWU5TSxFQUFPK0osUUFBUWdELGFBQWV4TSxFQUFPK0wsZ0JBQ3ZGVSxFQUFZcEssRUFBT3JDLEVBQU8rTCxlQUNoQyxJQUFLLElBQUkxYSxFQUFJLEVBQUdBLEVBQUlpYixFQUFRamIsR0FBSyxFQUMvQnVZLEVBQVNyWCxLQUFLcVgsRUFBU0EsRUFBU3RZLE9BQVMsR0FBS21iLEVBRWxELENBQ0EsSUFBSyxJQUFJcGIsRUFBSSxFQUFHQSxFQUFJb08sRUFBTytKLFFBQVErQyxhQUFlOU0sRUFBTytKLFFBQVFnRCxZQUFhbmIsR0FBSyxFQUNuRCxJQUExQjJPLEVBQU8rTCxnQkFDVG5DLEVBQVNyWCxLQUFLcVgsRUFBU0EsRUFBU3RZLE9BQVMsR0FBSytRLEdBRWhEd0gsRUFBV3RYLEtBQUtzWCxFQUFXQSxFQUFXdlksT0FBUyxHQUFLK1EsR0FDcEQ1QyxFQUFPK0ssYUFBZW5JLENBRTFCLENBRUEsR0FEd0IsSUFBcEJ1SCxFQUFTdFksU0FBY3NZLEVBQVcsQ0FBQyxJQUNsQixJQUFqQlMsRUFBb0IsQ0FDdEIsTUFBTTdQLEVBQU1pRixFQUFPZ0osZ0JBQWtCWSxFQUFNLGFBQWU1SixFQUFPd0osa0JBQWtCLGVBQ25GL0IsRUFBT3BVLFFBQU8sQ0FBQ2tWLEVBQUcwRSxNQUNYMU0sRUFBTzRLLFVBQVc1SyxFQUFPb0ksT0FDMUJzRSxJQUFleEYsRUFBTzVWLE9BQVMsSUFJbEN1SCxTQUFRc0ksSUFDVEEsRUFBUTVKLE1BQU1pRCxHQUFPLEdBQUc2UCxLQUFnQixHQUU1QyxDQUNBLEdBQUlySyxFQUFPMkssZ0JBQWtCM0ssRUFBTzJNLHFCQUFzQixDQUN4RCxJQUFJQyxFQUFnQixFQUNwQjlDLEVBQWdCalIsU0FBUWdVLElBQ3RCRCxHQUFpQkMsR0FBa0J4QyxHQUFnQixFQUFFLElBRXZEdUMsR0FBaUJ2QyxFQUNqQixNQUFNeUMsRUFBVUYsRUFBZ0J6RCxFQUNoQ1MsRUFBV0EsRUFBU2pYLEtBQUlvYSxHQUNsQkEsR0FBUSxHQUFXaEQsRUFDbkJnRCxFQUFPRCxFQUFnQkEsRUFBVTdDLEVBQzlCOEMsR0FFWCxDQUNBLEdBQUkvTSxFQUFPZ04seUJBQTBCLENBQ25DLElBQUlKLEVBQWdCLEVBS3BCLEdBSkE5QyxFQUFnQmpSLFNBQVFnVSxJQUN0QkQsR0FBaUJDLEdBQWtCeEMsR0FBZ0IsRUFBRSxJQUV2RHVDLEdBQWlCdkMsRUFDYnVDLEVBQWdCekQsRUFBWSxDQUM5QixNQUFNOEQsR0FBbUI5RCxFQUFheUQsR0FBaUIsRUFDdkRoRCxFQUFTL1EsU0FBUSxDQUFDa1UsRUFBTUcsS0FDdEJ0RCxFQUFTc0QsR0FBYUgsRUFBT0UsQ0FBZSxJQUU5Q3BELEVBQVdoUixTQUFRLENBQUNrVSxFQUFNRyxLQUN4QnJELEVBQVdxRCxHQUFhSCxFQUFPRSxDQUFlLEdBRWxELENBQ0YsQ0FPQSxHQU5BNVMsT0FBT3dPLE9BQU9wSixFQUFRLENBQ3BCeUgsU0FDQTBDLFdBQ0FDLGFBQ0FDLG9CQUVFOUosRUFBTzJLLGdCQUFrQjNLLEVBQU80SyxVQUFZNUssRUFBTzJNLHFCQUFzQixDQUMzRSxFQUFlek0sRUFBVyxtQ0FBdUMwSixFQUFTLEdBQWIsTUFDN0QsRUFBZTFKLEVBQVcsaUNBQXFDVCxFQUFPNEMsS0FBTyxFQUFJeUgsRUFBZ0JBLEVBQWdCeFksT0FBUyxHQUFLLEVBQW5FLE1BQzVELE1BQU02YixHQUFpQjFOLEVBQU9tSyxTQUFTLEdBQ2pDd0QsR0FBbUIzTixFQUFPb0ssV0FBVyxHQUMzQ3BLLEVBQU9tSyxTQUFXbkssRUFBT21LLFNBQVNqWCxLQUFJMGEsR0FBS0EsRUFBSUYsSUFDL0MxTixFQUFPb0ssV0FBYXBLLEVBQU9vSyxXQUFXbFgsS0FBSTBhLEdBQUtBLEVBQUlELEdBQ3JELENBY0EsR0FiSXpELElBQWlCRCxHQUNuQmpLLEVBQU8yRyxLQUFLLHNCQUVWd0QsRUFBU3RZLFNBQVc2WSxJQUNsQjFLLEVBQU9PLE9BQU9zTixlQUFlN04sRUFBTzhOLGdCQUN4QzlOLEVBQU8yRyxLQUFLLHlCQUVWeUQsRUFBV3ZZLFNBQVc4WSxHQUN4QjNLLEVBQU8yRyxLQUFLLDBCQUVWcEcsRUFBT3dOLHFCQUNUL04sRUFBT2dPLHVCQUVKbEUsR0FBY3ZKLEVBQU80SyxTQUE4QixVQUFsQjVLLEVBQU9pTSxRQUF3QyxTQUFsQmpNLEVBQU9pTSxRQUFvQixDQUM1RixNQUFNeUIsRUFBc0IsR0FBRzFOLEVBQU8yTix3Q0FDaENDLEVBQTZCbk8sRUFBT2hLLEdBQUc3QixVQUFVQyxTQUFTNlosR0FDNUQvRCxHQUFnQjNKLEVBQU82Tix3QkFDcEJELEdBQTRCbk8sRUFBT2hLLEdBQUc3QixVQUFVRyxJQUFJMlosR0FDaERFLEdBQ1RuTyxFQUFPaEssR0FBRzdCLFVBQVVNLE9BQU93WixFQUUvQixDQUNGLEVBNGNFSSxpQkExY0YsU0FBMEI3TixHQUN4QixNQUFNUixFQUFTN08sS0FDVG1kLEVBQWUsR0FDZnhFLEVBQVk5SixFQUFPK0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxRQUMxRCxJQUNJcFksRUFEQTJjLEVBQVksRUFFSyxpQkFBVi9OLEVBQ1RSLEVBQU93TyxjQUFjaE8sSUFDRixJQUFWQSxHQUNUUixFQUFPd08sY0FBY3hPLEVBQU9PLE9BQU9DLE9BRXJDLE1BQU1pTyxFQUFrQjdiLEdBQ2xCa1gsRUFDSzlKLEVBQU95SCxPQUFPekgsRUFBTzBPLG9CQUFvQjliLElBRTNDb04sRUFBT3lILE9BQU83VSxHQUd2QixHQUFvQyxTQUFoQ29OLEVBQU9PLE9BQU91SCxlQUE0QjlILEVBQU9PLE9BQU91SCxjQUFnQixFQUMxRSxHQUFJOUgsRUFBT08sT0FBTzJLLGdCQUNmbEwsRUFBTzJPLGVBQWlCLElBQUl2VixTQUFRc1MsSUFDbkM0QyxFQUFheGIsS0FBSzRZLEVBQU0sU0FHMUIsSUFBSzlaLEVBQUksRUFBR0EsRUFBSXNQLEtBQUs4RyxLQUFLaEksRUFBT08sT0FBT3VILGVBQWdCbFcsR0FBSyxFQUFHLENBQzlELE1BQU1nQixFQUFRb04sRUFBT2lJLFlBQWNyVyxFQUNuQyxHQUFJZ0IsRUFBUW9OLEVBQU95SCxPQUFPNVYsU0FBV2lZLEVBQVcsTUFDaER3RSxFQUFheGIsS0FBSzJiLEVBQWdCN2IsR0FDcEMsTUFHRjBiLEVBQWF4YixLQUFLMmIsRUFBZ0J6TyxFQUFPaUksY0FJM0MsSUFBS3JXLEVBQUksRUFBR0EsRUFBSTBjLEVBQWF6YyxPQUFRRCxHQUFLLEVBQ3hDLFFBQStCLElBQXBCMGMsRUFBYTFjLEdBQW9CLENBQzFDLE1BQU1xRyxFQUFTcVcsRUFBYTFjLEdBQUdzRyxhQUMvQnFXLEVBQVl0VyxFQUFTc1csRUFBWXRXLEVBQVNzVyxDQUM1QyxFQUlFQSxHQUEyQixJQUFkQSxLQUFpQnZPLEVBQU9TLFVBQVUzSSxNQUFNRyxPQUFTLEdBQUdzVyxNQUN2RSxFQStaRVAsbUJBN1pGLFdBQ0UsTUFBTWhPLEVBQVM3TyxLQUNUc1csRUFBU3pILEVBQU95SCxPQUVoQm1ILEVBQWM1TyxFQUFPb0gsVUFBWXBILEVBQU9nSixlQUFpQmhKLEVBQU9TLFVBQVVvTyxXQUFhN08sRUFBT1MsVUFBVXFPLFVBQVksRUFDMUgsSUFBSyxJQUFJbGQsRUFBSSxFQUFHQSxFQUFJNlYsRUFBTzVWLE9BQVFELEdBQUssRUFDdEM2VixFQUFPN1YsR0FBR21kLG1CQUFxQi9PLEVBQU9nSixlQUFpQnZCLEVBQU83VixHQUFHaWQsV0FBYXBILEVBQU83VixHQUFHa2QsV0FBYUYsRUFBYzVPLEVBQU9nUCx1QkFFOUgsRUFzWkVDLHFCQXBaRixTQUE4QjdPLFFBQ1YsSUFBZEEsSUFDRkEsRUFBWWpQLE1BQVFBLEtBQUtpUCxXQUFhLEdBRXhDLE1BQU1KLEVBQVM3TyxLQUNUb1AsRUFBU1AsRUFBT08sUUFDaEIsT0FDSmtILEVBQ0FrQyxhQUFjQyxFQUFHLFNBQ2pCTyxHQUNFbkssRUFDSixHQUFzQixJQUFsQnlILEVBQU81VixPQUFjLFlBQ2tCLElBQWhDNFYsRUFBTyxHQUFHc0gsbUJBQW1DL08sRUFBT2dPLHFCQUMvRCxJQUFJa0IsR0FBZ0I5TyxFQUNoQndKLElBQUtzRixFQUFlOU8sR0FHeEJxSCxFQUFPck8sU0FBUXNJLElBQ2JBLEVBQVF2TixVQUFVTSxPQUFPOEwsRUFBTzRPLGtCQUFtQjVPLEVBQU82Tyx1QkFBdUIsSUFFbkZwUCxFQUFPcVAscUJBQXVCLEdBQzlCclAsRUFBTzJPLGNBQWdCLEdBQ3ZCLElBQUkvRCxFQUFlckssRUFBT3FLLGFBQ0UsaUJBQWpCQSxHQUE2QkEsRUFBYXJYLFFBQVEsTUFBUSxFQUNuRXFYLEVBQWVqTSxXQUFXaU0sRUFBYWhSLFFBQVEsSUFBSyxLQUFPLElBQU1vRyxFQUFPNEMsS0FDdkMsaUJBQWpCZ0ksSUFDaEJBLEVBQWVqTSxXQUFXaU0sSUFFNUIsSUFBSyxJQUFJaFosRUFBSSxFQUFHQSxFQUFJNlYsRUFBTzVWLE9BQVFELEdBQUssRUFBRyxDQUN6QyxNQUFNOFosRUFBUWpFLEVBQU83VixHQUNyQixJQUFJMGQsRUFBYzVELEVBQU1xRCxrQkFDcEJ4TyxFQUFPNEssU0FBVzVLLEVBQU8ySyxpQkFDM0JvRSxHQUFlN0gsRUFBTyxHQUFHc0gsbUJBRTNCLE1BQU1RLEdBQWlCTCxHQUFnQjNPLEVBQU8ySyxlQUFpQmxMLEVBQU93UCxlQUFpQixHQUFLRixJQUFnQjVELEVBQU1VLGdCQUFrQnhCLEdBQzlINkUsR0FBeUJQLEVBQWUvRSxFQUFTLElBQU01SixFQUFPMkssZUFBaUJsTCxFQUFPd1AsZUFBaUIsR0FBS0YsSUFBZ0I1RCxFQUFNVSxnQkFBa0J4QixHQUNwSjhFLElBQWdCUixFQUFlSSxHQUMvQkssRUFBYUQsRUFBYzFQLEVBQU9xSyxnQkFBZ0J6WSxHQUNsRGdlLEVBQWlCRixHQUFlLEdBQUtBLEdBQWUxUCxFQUFPNEMsS0FBTzVDLEVBQU9xSyxnQkFBZ0J6WSxJQUM3RThkLEdBQWUsR0FBS0EsRUFBYzFQLEVBQU80QyxLQUFPLEdBQUsrTSxFQUFhLEdBQUtBLEdBQWMzUCxFQUFPNEMsTUFBUThNLEdBQWUsR0FBS0MsR0FBYzNQLEVBQU80QyxRQUU3SjVDLEVBQU8yTyxjQUFjN2IsS0FBSzRZLEdBQzFCMUwsRUFBT3FQLHFCQUFxQnZjLEtBQUtsQixHQUNqQzZWLEVBQU83VixHQUFHdUMsVUFBVUcsSUFBSWlNLEVBQU80TyxvQkFFN0JTLEdBQ0ZuSSxFQUFPN1YsR0FBR3VDLFVBQVVHLElBQUlpTSxFQUFPNk8sd0JBRWpDMUQsRUFBTXpLLFNBQVcySSxHQUFPMkYsRUFBZ0JBLEVBQ3hDN0QsRUFBTW1FLGlCQUFtQmpHLEdBQU82RixFQUF3QkEsQ0FDMUQsQ0FDRixFQWtXRUssZUFoV0YsU0FBd0IxUCxHQUN0QixNQUFNSixFQUFTN08sS0FDZixRQUF5QixJQUFkaVAsRUFBMkIsQ0FDcEMsTUFBTTJQLEVBQWEvUCxFQUFPMkosY0FBZ0IsRUFBSSxFQUU5Q3ZKLEVBQVlKLEdBQVVBLEVBQU9JLFdBQWFKLEVBQU9JLFVBQVkyUCxHQUFjLENBQzdFLENBQ0EsTUFBTXhQLEVBQVNQLEVBQU9PLE9BQ2hCeVAsRUFBaUJoUSxFQUFPaVEsZUFBaUJqUSxFQUFPd1AsZUFDdEQsSUFBSSxTQUNGdk8sRUFBUSxZQUNSaVAsRUFBVyxNQUNYQyxFQUFLLGFBQ0xDLEdBQ0VwUSxFQUNKLE1BQU1xUSxFQUFlSCxFQUNmSSxFQUFTSCxFQUNmLEdBQXVCLElBQW5CSCxFQUNGL08sRUFBVyxFQUNYaVAsR0FBYyxFQUNkQyxHQUFRLE1BQ0gsQ0FDTGxQLEdBQVliLEVBQVlKLEVBQU93UCxnQkFBa0JRLEVBQ2pELE1BQU1PLEVBQXFCclAsS0FBS21MLElBQUlqTSxFQUFZSixFQUFPd1AsZ0JBQWtCLEVBQ25FZ0IsRUFBZXRQLEtBQUttTCxJQUFJak0sRUFBWUosRUFBT2lRLGdCQUFrQixFQUNuRUMsRUFBY0ssR0FBc0J0UCxHQUFZLEVBQ2hEa1AsRUFBUUssR0FBZ0J2UCxHQUFZLEVBQ2hDc1AsSUFBb0J0UCxFQUFXLEdBQy9CdVAsSUFBY3ZQLEVBQVcsRUFDL0IsQ0FDQSxHQUFJVixFQUFPb0ksS0FBTSxDQUNmLE1BQU04SCxFQUFrQnpRLEVBQU8wTyxvQkFBb0IsR0FDN0NnQyxFQUFpQjFRLEVBQU8wTyxvQkFBb0IxTyxFQUFPeUgsT0FBTzVWLE9BQVMsR0FDbkU4ZSxFQUFzQjNRLEVBQU9vSyxXQUFXcUcsR0FDeENHLEVBQXFCNVEsRUFBT29LLFdBQVdzRyxHQUN2Q0csRUFBZTdRLEVBQU9vSyxXQUFXcEssRUFBT29LLFdBQVd2WSxPQUFTLEdBQzVEaWYsRUFBZTVQLEtBQUttTCxJQUFJak0sR0FFNUJnUSxFQURFVSxHQUFnQkgsR0FDRkcsRUFBZUgsR0FBdUJFLEdBRXRDQyxFQUFlRCxFQUFlRCxHQUFzQkMsRUFFbEVULEVBQWUsSUFBR0EsR0FBZ0IsRUFDeEMsQ0FDQXhWLE9BQU93TyxPQUFPcEosRUFBUSxDQUNwQmlCLFdBQ0FtUCxlQUNBRixjQUNBQyxXQUVFNVAsRUFBT3dOLHFCQUF1QnhOLEVBQU8ySyxnQkFBa0IzSyxFQUFPd1EsYUFBWS9RLEVBQU9pUCxxQkFBcUI3TyxHQUN0RzhQLElBQWdCRyxHQUNsQnJRLEVBQU8yRyxLQUFLLHlCQUVWd0osSUFBVUcsR0FDWnRRLEVBQU8yRyxLQUFLLG9CQUVWMEosSUFBaUJILEdBQWVJLElBQVdILElBQzdDblEsRUFBTzJHLEtBQUssWUFFZDNHLEVBQU8yRyxLQUFLLFdBQVkxRixFQUMxQixFQW9TRStQLG9CQWxTRixXQUNFLE1BQU1oUixFQUFTN08sTUFDVCxPQUNKc1csRUFBTSxPQUNObEgsRUFBTSxTQUNOa0osRUFBUSxZQUNSeEIsR0FDRWpJLEVBQ0U4SixFQUFZOUosRUFBTytKLFNBQVd4SixFQUFPd0osUUFBUUMsUUFDN0NvQixFQUFjcEwsRUFBT2tJLE1BQVEzSCxFQUFPMkgsTUFBUTNILEVBQU8ySCxLQUFLQyxLQUFPLEVBQy9EOEksRUFBbUJyUCxHQUNoQixFQUFnQjZILEVBQVUsSUFBSWxKLEVBQU84RyxhQUFhekYsa0JBQXlCQSxLQUFZLEdBS2hHLElBQUlzUCxFQUNBQyxFQUNBQyxFQUNKLEdBTkEzSixFQUFPck8sU0FBUXNJLElBQ2JBLEVBQVF2TixVQUFVTSxPQUFPOEwsRUFBTzhRLGlCQUFrQjlRLEVBQU8rUSxlQUFnQi9RLEVBQU9nUixlQUFlLElBSzdGekgsRUFDRixHQUFJdkosRUFBT29JLEtBQU0sQ0FDZixJQUFJc0UsRUFBYWhGLEVBQWNqSSxFQUFPK0osUUFBUStDLGFBQzFDRyxFQUFhLElBQUdBLEVBQWFqTixFQUFPK0osUUFBUXRDLE9BQU81VixPQUFTb2IsR0FDNURBLEdBQWNqTixFQUFPK0osUUFBUXRDLE9BQU81VixTQUFRb2IsR0FBY2pOLEVBQU8rSixRQUFRdEMsT0FBTzVWLFFBQ3BGcWYsRUFBY0QsRUFBaUIsNkJBQTZCaEUsTUFDOUQsTUFDRWlFLEVBQWNELEVBQWlCLDZCQUE2QmhKLFlBRzFEbUQsR0FDRjhGLEVBQWN6SixFQUFPcFUsUUFBT3FPLEdBQVdBLEVBQVE4RyxTQUFXUCxJQUFhLEdBQ3ZFbUosRUFBWTNKLEVBQU9wVSxRQUFPcU8sR0FBV0EsRUFBUThHLFNBQVdQLEVBQWMsSUFBRyxHQUN6RWtKLEVBQVkxSixFQUFPcFUsUUFBT3FPLEdBQVdBLEVBQVE4RyxTQUFXUCxFQUFjLElBQUcsSUFFekVpSixFQUFjekosRUFBT1EsR0FHckJpSixJQUVGQSxFQUFZL2MsVUFBVUcsSUFBSWlNLEVBQU84USxrQkFDN0JqRyxHQUNFZ0csR0FDRkEsRUFBVWpkLFVBQVVHLElBQUlpTSxFQUFPK1EsZ0JBRTdCSCxHQUNGQSxFQUFVaGQsVUFBVUcsSUFBSWlNLEVBQU9nUixrQkFJakNILEVEbG9CTixTQUF3QnBiLEVBQUk0TCxHQUMxQixNQUFNNFAsRUFBVSxHQUNoQixLQUFPeGIsRUFBR3liLG9CQUFvQixDQUM1QixNQUFNQyxFQUFPMWIsRUFBR3liLG1CQUNaN1AsRUFDRThQLEVBQUt6ZCxRQUFRMk4sSUFBVzRQLEVBQVExZSxLQUFLNGUsR0FDcENGLEVBQVExZSxLQUFLNGUsR0FDcEIxYixFQUFLMGIsQ0FDUCxDQUNBLE9BQU9GLENBQ1QsQ0N3bkJrQkcsQ0FBZVQsRUFBYSxJQUFJM1EsRUFBTzhHLDRCQUE0QixHQUMzRTlHLEVBQU9vSSxPQUFTeUksSUFDbEJBLEVBQVkzSixFQUFPLElBRWpCMkosR0FDRkEsRUFBVWpkLFVBQVVHLElBQUlpTSxFQUFPK1EsZ0JBSWpDSCxFRHRwQk4sU0FBd0JuYixFQUFJNEwsR0FDMUIsTUFBTWdRLEVBQVUsR0FDaEIsS0FBTzViLEVBQUc2Yix3QkFBd0IsQ0FDaEMsTUFBTUMsRUFBTzliLEVBQUc2Yix1QkFDWmpRLEVBQ0VrUSxFQUFLN2QsUUFBUTJOLElBQVdnUSxFQUFROWUsS0FBS2dmLEdBQ3BDRixFQUFROWUsS0FBS2dmLEdBQ3BCOWIsRUFBSzhiLENBQ1AsQ0FDQSxPQUFPRixDQUNULENDNG9Ca0JHLENBQWViLEVBQWEsSUFBSTNRLEVBQU84Ryw0QkFBNEIsR0FDM0U5RyxFQUFPb0ksTUFBdUIsS0FBZHdJLElBQ2xCQSxFQUFZMUosRUFBT0EsRUFBTzVWLE9BQVMsSUFFakNzZixHQUNGQSxFQUFVaGQsVUFBVUcsSUFBSWlNLEVBQU9nUixrQkFJckN2UixFQUFPZ1MsbUJBQ1QsRUErTkVDLGtCQXRJRixTQUEyQkMsR0FDekIsTUFBTWxTLEVBQVM3TyxLQUNUaVAsRUFBWUosRUFBTzJKLGFBQWUzSixFQUFPSSxXQUFhSixFQUFPSSxXQUM3RCxTQUNKK0osRUFBUSxPQUNSNUosRUFDQTBILFlBQWFrSyxFQUNidkosVUFBV3dKLEVBQ1gzRSxVQUFXNEUsR0FDVHJTLEVBQ0osSUFDSXlOLEVBREF4RixFQUFjaUssRUFFbEIsTUFBTUksRUFBc0JDLElBQzFCLElBQUkzSixFQUFZMkosRUFBU3ZTLEVBQU8rSixRQUFRK0MsYUFPeEMsT0FOSWxFLEVBQVksSUFDZEEsRUFBWTVJLEVBQU8rSixRQUFRdEMsT0FBTzVWLE9BQVMrVyxHQUV6Q0EsR0FBYTVJLEVBQU8rSixRQUFRdEMsT0FBTzVWLFNBQ3JDK1csR0FBYTVJLEVBQU8rSixRQUFRdEMsT0FBTzVWLFFBRTlCK1csQ0FBUyxFQUtsQixRQUgyQixJQUFoQlgsSUFDVEEsRUEvQ0osU0FBbUNqSSxHQUNqQyxNQUFNLFdBQ0pvSyxFQUFVLE9BQ1Y3SixHQUNFUCxFQUNFSSxFQUFZSixFQUFPMkosYUFBZTNKLEVBQU9JLFdBQWFKLEVBQU9JLFVBQ25FLElBQUk2SCxFQUNKLElBQUssSUFBSXJXLEVBQUksRUFBR0EsRUFBSXdZLEVBQVd2WSxPQUFRRCxHQUFLLE9BQ1QsSUFBdEJ3WSxFQUFXeFksRUFBSSxHQUNwQndPLEdBQWFnSyxFQUFXeFksSUFBTXdPLEVBQVlnSyxFQUFXeFksRUFBSSxJQUFNd1ksRUFBV3hZLEVBQUksR0FBS3dZLEVBQVd4WSxJQUFNLEVBQ3RHcVcsRUFBY3JXLEVBQ0x3TyxHQUFhZ0ssRUFBV3hZLElBQU13TyxFQUFZZ0ssRUFBV3hZLEVBQUksS0FDbEVxVyxFQUFjclcsRUFBSSxHQUVYd08sR0FBYWdLLEVBQVd4WSxLQUNqQ3FXLEVBQWNyVyxHQU9sQixPQUhJMk8sRUFBT2lTLHNCQUNMdkssRUFBYyxRQUE0QixJQUFoQkEsS0FBNkJBLEVBQWMsR0FFcEVBLENBQ1QsQ0F3QmtCd0ssQ0FBMEJ6UyxJQUV0Q21LLEVBQVM1VyxRQUFRNk0sSUFBYyxFQUNqQ3FOLEVBQVl0RCxFQUFTNVcsUUFBUTZNLE9BQ3hCLENBQ0wsTUFBTXNTLEVBQU94UixLQUFLRSxJQUFJYixFQUFPZ00sbUJBQW9CdEUsR0FDakR3RixFQUFZaUYsRUFBT3hSLEtBQUtpTCxPQUFPbEUsRUFBY3lLLEdBQVFuUyxFQUFPK0wsZUFDOUQsQ0FFQSxHQURJbUIsR0FBYXRELEVBQVN0WSxTQUFRNGIsRUFBWXRELEVBQVN0WSxPQUFTLEdBQzVEb1csSUFBZ0JrSyxJQUFrQm5TLEVBQU9PLE9BQU9vSSxLQUtsRCxZQUpJOEUsSUFBYzRFLElBQ2hCclMsRUFBT3lOLFVBQVlBLEVBQ25Cek4sRUFBTzJHLEtBQUsscUJBSWhCLEdBQUlzQixJQUFnQmtLLEdBQWlCblMsRUFBT08sT0FBT29JLE1BQVEzSSxFQUFPK0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxRQUVqRyxZQURBaEssRUFBTzRJLFVBQVkwSixFQUFvQnJLLElBR3pDLE1BQU1tRCxFQUFjcEwsRUFBT2tJLE1BQVEzSCxFQUFPMkgsTUFBUTNILEVBQU8ySCxLQUFLQyxLQUFPLEVBR3JFLElBQUlTLEVBQ0osR0FBSTVJLEVBQU8rSixTQUFXeEosRUFBT3dKLFFBQVFDLFNBQVd6SixFQUFPb0ksS0FDckRDLEVBQVkwSixFQUFvQnJLLFFBQzNCLEdBQUltRCxFQUFhLENBQ3RCLE1BQU11SCxFQUFxQjNTLEVBQU95SCxPQUFPcFUsUUFBT3FPLEdBQVdBLEVBQVE4RyxTQUFXUCxJQUFhLEdBQzNGLElBQUkySyxFQUFtQjFKLFNBQVN5SixFQUFtQkUsYUFBYSwyQkFBNEIsSUFDeEYzTixPQUFPaUUsTUFBTXlKLEtBQ2ZBLEVBQW1CMVIsS0FBS0MsSUFBSW5CLEVBQU95SCxPQUFPbFUsUUFBUW9mLEdBQXFCLElBRXpFL0osRUFBWTFILEtBQUtpTCxNQUFNeUcsRUFBbUJyUyxFQUFPMkgsS0FBS0MsS0FDeEQsTUFBTyxHQUFJbkksRUFBT3lILE9BQU9RLEdBQWMsQ0FDckMsTUFBTWdGLEVBQWFqTixFQUFPeUgsT0FBT1EsR0FBYTRLLGFBQWEsMkJBRXpEakssRUFERXFFLEVBQ1UvRCxTQUFTK0QsRUFBWSxJQUVyQmhGLENBRWhCLE1BQ0VXLEVBQVlYLEVBRWRyTixPQUFPd08sT0FBT3BKLEVBQVEsQ0FDcEJxUyxvQkFDQTVFLFlBQ0EyRSxvQkFDQXhKLFlBQ0F1SixnQkFDQWxLLGdCQUVFakksRUFBTzhTLGFBQ1RuTCxFQUFRM0gsR0FFVkEsRUFBTzJHLEtBQUsscUJBQ1ozRyxFQUFPMkcsS0FBSyxvQkFDUjNHLEVBQU84UyxhQUFlOVMsRUFBT08sT0FBT3dTLHNCQUNsQ1gsSUFBc0J4SixHQUN4QjVJLEVBQU8yRyxLQUFLLG1CQUVkM0csRUFBTzJHLEtBQUssZUFFaEIsRUFrREVxTSxtQkFoREYsU0FBNEJoZCxFQUFJaWQsR0FDOUIsTUFBTWpULEVBQVM3TyxLQUNUb1AsRUFBU1AsRUFBT08sT0FDdEIsSUFBSW1MLEVBQVExVixFQUFHbVIsUUFBUSxJQUFJNUcsRUFBTzhHLDZCQUM3QnFFLEdBQVMxTCxFQUFPb0gsV0FBYTZMLEdBQVFBLEVBQUtwaEIsT0FBUyxHQUFLb2hCLEVBQUtuTyxTQUFTOU8sSUFDekUsSUFBSWlkLEVBQUtyZSxNQUFNcWUsRUFBSzFmLFFBQVF5QyxHQUFNLEVBQUdpZCxFQUFLcGhCLFNBQVN1SCxTQUFROFosS0FDcER4SCxHQUFTd0gsRUFBT2pmLFNBQVdpZixFQUFPamYsUUFBUSxJQUFJc00sRUFBTzhHLDhCQUN4RHFFLEVBQVF3SCxFQUNWLElBR0osSUFDSWpHLEVBREFrRyxHQUFhLEVBRWpCLEdBQUl6SCxFQUNGLElBQUssSUFBSTlaLEVBQUksRUFBR0EsRUFBSW9PLEVBQU95SCxPQUFPNVYsT0FBUUQsR0FBSyxFQUM3QyxHQUFJb08sRUFBT3lILE9BQU83VixLQUFPOFosRUFBTyxDQUM5QnlILEdBQWEsRUFDYmxHLEVBQWFyYixFQUNiLEtBQ0YsQ0FHSixJQUFJOFosSUFBU3lILEVBVVgsT0FGQW5ULEVBQU9vVCxrQkFBZTFlLE9BQ3RCc0wsRUFBT3FULGtCQUFlM2UsR0FSdEJzTCxFQUFPb1QsYUFBZTFILEVBQ2xCMUwsRUFBTytKLFNBQVcvSixFQUFPTyxPQUFPd0osUUFBUUMsUUFDMUNoSyxFQUFPcVQsYUFBZW5LLFNBQVN3QyxFQUFNbUgsYUFBYSwyQkFBNEIsSUFFOUU3UyxFQUFPcVQsYUFBZXBHLEVBT3RCMU0sRUFBTytTLDBCQUErQzVlLElBQXhCc0wsRUFBT3FULGNBQThCclQsRUFBT3FULGVBQWlCclQsRUFBT2lJLGFBQ3BHakksRUFBT3NULHFCQUVYLEdBOEtBLElBQUlsVCxFQUFZLENBQ2RtVCxhQWpLRixTQUE0QjVWLFFBQ2IsSUFBVEEsSUFDRkEsRUFBT3hNLEtBQUs2WCxlQUFpQixJQUFNLEtBRXJDLE1BQ00sT0FDSnpJLEVBQ0FvSixhQUFjQyxFQUFHLFVBQ2pCeEosRUFBUyxVQUNUSyxHQUxhdFAsS0FPZixHQUFJb1AsRUFBT2lULGlCQUNULE9BQU81SixHQUFPeEosRUFBWUEsRUFFNUIsR0FBSUcsRUFBTzRLLFFBQ1QsT0FBTy9LLEVBRVQsSUFBSXFULEVBQW1CLEVBQWFoVCxFQUFXOUMsR0FHL0MsT0FGQThWLEdBZGV0aUIsS0FjWTZkLHdCQUN2QnBGLElBQUs2SixHQUFvQkEsR0FDdEJBLEdBQW9CLENBQzdCLEVBNklFQyxhQTNJRixTQUFzQnRULEVBQVd1VCxHQUMvQixNQUFNM1QsRUFBUzdPLE1BRWJ3WSxhQUFjQyxFQUFHLE9BQ2pCckosRUFBTSxVQUNORSxFQUFTLFNBQ1RRLEdBQ0VqQixFQUNKLElBMEJJNFQsRUExQkFDLEVBQUksRUFDSkMsRUFBSSxFQUVKOVQsRUFBT2dKLGVBQ1Q2SyxFQUFJakssR0FBT3hKLEVBQVlBLEVBRXZCMFQsRUFBSTFULEVBRUZHLEVBQU93TCxlQUNUOEgsRUFBSTNTLEtBQUtpTCxNQUFNMEgsR0FDZkMsRUFBSTVTLEtBQUtpTCxNQUFNMkgsSUFFakI5VCxFQUFPK1Qsa0JBQW9CL1QsRUFBT0ksVUFDbENKLEVBQU9JLFVBQVlKLEVBQU9nSixlQUFpQjZLLEVBQUlDLEVBQzNDdlQsRUFBTzRLLFFBQ1QxSyxFQUFVVCxFQUFPZ0osZUFBaUIsYUFBZSxhQUFlaEosRUFBT2dKLGdCQUFrQjZLLEdBQUtDLEVBQ3BGdlQsRUFBT2lULG1CQUNieFQsRUFBT2dKLGVBQ1Q2SyxHQUFLN1QsRUFBT2dQLHdCQUVaOEUsR0FBSzlULEVBQU9nUCx3QkFFZHZPLEVBQVUzSSxNQUFNb0csVUFBWSxlQUFlMlYsUUFBUUMsYUFLckQsTUFBTTlELEVBQWlCaFEsRUFBT2lRLGVBQWlCalEsRUFBT3dQLGVBRXBEb0UsRUFEcUIsSUFBbkI1RCxFQUNZLEdBRUM1UCxFQUFZSixFQUFPd1AsZ0JBQWtCUSxFQUVsRDRELElBQWdCM1MsR0FDbEJqQixFQUFPOFAsZUFBZTFQLEdBRXhCSixFQUFPMkcsS0FBSyxlQUFnQjNHLEVBQU9JLFVBQVd1VCxFQUNoRCxFQStGRW5FLGFBN0ZGLFdBQ0UsT0FBUXJlLEtBQUtnWixTQUFTLEVBQ3hCLEVBNEZFOEYsYUExRkYsV0FDRSxPQUFROWUsS0FBS2daLFNBQVNoWixLQUFLZ1osU0FBU3RZLE9BQVMsRUFDL0MsRUF5RkVtaUIsWUF2RkYsU0FBcUI1VCxFQUFXSSxFQUFPeVQsRUFBY0MsRUFBaUJDLFFBQ2xELElBQWQvVCxJQUNGQSxFQUFZLFFBRUEsSUFBVkksSUFDRkEsRUFBUXJQLEtBQUtvUCxPQUFPQyxZQUVELElBQWpCeVQsSUFDRkEsR0FBZSxRQUVPLElBQXBCQyxJQUNGQSxHQUFrQixHQUVwQixNQUFNbFUsRUFBUzdPLE1BQ1QsT0FDSm9QLEVBQU0sVUFDTkUsR0FDRVQsRUFDSixHQUFJQSxFQUFPb1UsV0FBYTdULEVBQU84VCwrQkFDN0IsT0FBTyxFQUVULE1BQU03RSxFQUFleFAsRUFBT3dQLGVBQ3RCUyxFQUFlalEsRUFBT2lRLGVBQzVCLElBQUlxRSxFQUtKLEdBSmlEQSxFQUE3Q0osR0FBbUI5VCxFQUFZb1AsRUFBNkJBLEVBQXNCMEUsR0FBbUI5VCxFQUFZNlAsRUFBNkJBLEVBQWlDN1AsRUFHbkxKLEVBQU84UCxlQUFld0UsR0FDbEIvVCxFQUFPNEssUUFBUyxDQUNsQixNQUFNb0osRUFBTXZVLEVBQU9nSixlQUNuQixHQUFjLElBQVZ4SSxFQUNGQyxFQUFVOFQsRUFBTSxhQUFlLGNBQWdCRCxNQUMxQyxDQUNMLElBQUt0VSxFQUFPK0MsUUFBUUksYUFNbEIsT0FMQXJELEVBQXFCLENBQ25CRSxTQUNBQyxnQkFBaUJxVSxFQUNqQnBVLEtBQU1xVSxFQUFNLE9BQVMsU0FFaEIsRUFFVDlULEVBQVVnQixTQUFTLENBQ2pCLENBQUM4UyxFQUFNLE9BQVMsUUFBU0QsRUFDekJFLFNBQVUsVUFFZCxDQUNBLE9BQU8sQ0FDVCxDQWdDQSxPQS9CYyxJQUFWaFUsR0FDRlIsRUFBT3dPLGNBQWMsR0FDckJ4TyxFQUFPMFQsYUFBYVksR0FDaEJMLElBQ0ZqVSxFQUFPMkcsS0FBSyx3QkFBeUJuRyxFQUFPMlQsR0FDNUNuVSxFQUFPMkcsS0FBSyxvQkFHZDNHLEVBQU93TyxjQUFjaE8sR0FDckJSLEVBQU8wVCxhQUFhWSxHQUNoQkwsSUFDRmpVLEVBQU8yRyxLQUFLLHdCQUF5Qm5HLEVBQU8yVCxHQUM1Q25VLEVBQU8yRyxLQUFLLG9CQUVUM0csRUFBT29VLFlBQ1ZwVSxFQUFPb1UsV0FBWSxFQUNkcFUsRUFBT3lVLG9DQUNWelUsRUFBT3lVLGtDQUFvQyxTQUF1QkMsR0FDM0QxVSxJQUFVQSxFQUFPMkYsV0FDbEIrTyxFQUFFOWMsU0FBV3pHLE9BQ2pCNk8sRUFBT1MsVUFBVXRGLG9CQUFvQixnQkFBaUI2RSxFQUFPeVUsbUNBQzdEelUsRUFBT3lVLGtDQUFvQyxZQUNwQ3pVLEVBQU95VSxrQ0FDVlIsR0FDRmpVLEVBQU8yRyxLQUFLLGlCQUVoQixHQUVGM0csRUFBT1MsVUFBVXZGLGlCQUFpQixnQkFBaUI4RSxFQUFPeVUsc0NBR3ZELENBQ1QsR0FtQkEsU0FBU0UsRUFBZTVVLEdBQ3RCLElBQUksT0FDRkMsRUFBTSxhQUNOaVUsRUFBWSxVQUNaVyxFQUFTLEtBQ1RDLEdBQ0U5VSxFQUNKLE1BQU0sWUFDSmtJLEVBQVcsY0FDWGtLLEdBQ0VuUyxFQUNKLElBQUlZLEVBQU1nVSxFQUtWLEdBSktoVSxJQUM4QkEsRUFBN0JxSCxFQUFja0ssRUFBcUIsT0FBZ0JsSyxFQUFja0ssRUFBcUIsT0FBa0IsU0FFOUduUyxFQUFPMkcsS0FBSyxhQUFha08sS0FDckJaLEdBQWdCaE0sSUFBZ0JrSyxFQUFlLENBQ2pELEdBQVksVUFBUnZSLEVBRUYsWUFEQVosRUFBTzJHLEtBQUssdUJBQXVCa08sS0FHckM3VSxFQUFPMkcsS0FBSyx3QkFBd0JrTyxLQUN4QixTQUFSalUsRUFDRlosRUFBTzJHLEtBQUssc0JBQXNCa08sS0FFbEM3VSxFQUFPMkcsS0FBSyxzQkFBc0JrTyxJQUV0QyxDQUNGLENBK2NBLElBQUluSixFQUFRLENBQ1ZvSixRQWphRixTQUFpQmxpQixFQUFPNE4sRUFBT3lULEVBQWNFLEVBQVVZLFFBQ3ZDLElBQVZuaUIsSUFDRkEsRUFBUSxRQUVJLElBQVY0TixJQUNGQSxFQUFRclAsS0FBS29QLE9BQU9DLFlBRUQsSUFBakJ5VCxJQUNGQSxHQUFlLEdBRUksaUJBQVZyaEIsSUFDVEEsRUFBUXNXLFNBQVN0VyxFQUFPLEtBRTFCLE1BQU1vTixFQUFTN08sS0FDZixJQUFJOGIsRUFBYXJhLEVBQ2JxYSxFQUFhLElBQUdBLEVBQWEsR0FDakMsTUFBTSxPQUNKMU0sRUFBTSxTQUNONEosRUFBUSxXQUNSQyxFQUFVLGNBQ1YrSCxFQUFhLFlBQ2JsSyxFQUNBMEIsYUFBY0MsRUFBRyxVQUNqQm5KLEVBQVMsUUFDVHVKLEdBQ0VoSyxFQUNKLEdBQUlBLEVBQU9vVSxXQUFhN1QsRUFBTzhULGlDQUFtQ3JLLElBQVltSyxJQUFhWSxFQUN6RixPQUFPLEVBRVQsTUFBTXJDLEVBQU94UixLQUFLRSxJQUFJcEIsRUFBT08sT0FBT2dNLG1CQUFvQlUsR0FDeEQsSUFBSVEsRUFBWWlGLEVBQU94UixLQUFLaUwsT0FBT2MsRUFBYXlGLEdBQVExUyxFQUFPTyxPQUFPK0wsZ0JBQ2xFbUIsR0FBYXRELEVBQVN0WSxTQUFRNGIsRUFBWXRELEVBQVN0WSxPQUFTLEdBQ2hFLE1BQU11TyxHQUFhK0osRUFBU3NELEdBRTVCLEdBQUlsTixFQUFPaVMsb0JBQ1QsSUFBSyxJQUFJNWdCLEVBQUksRUFBR0EsRUFBSXdZLEVBQVd2WSxPQUFRRCxHQUFLLEVBQUcsQ0FDN0MsTUFBTW9qQixHQUF1QjlULEtBQUtpTCxNQUFrQixJQUFaL0wsR0FDbEM2VSxFQUFpQi9ULEtBQUtpTCxNQUFzQixJQUFoQi9CLEVBQVd4WSxJQUN2Q3NqQixFQUFxQmhVLEtBQUtpTCxNQUEwQixJQUFwQi9CLEVBQVd4WSxFQUFJLFNBQ3BCLElBQXRCd1ksRUFBV3hZLEVBQUksR0FDcEJvakIsR0FBdUJDLEdBQWtCRCxFQUFzQkUsR0FBc0JBLEVBQXFCRCxHQUFrQixFQUM5SGhJLEVBQWFyYixFQUNKb2pCLEdBQXVCQyxHQUFrQkQsRUFBc0JFLElBQ3hFakksRUFBYXJiLEVBQUksR0FFVm9qQixHQUF1QkMsSUFDaENoSSxFQUFhcmIsRUFFakIsQ0FHRixHQUFJb08sRUFBTzhTLGFBQWU3RixJQUFlaEYsRUFBYSxDQUNwRCxJQUFLakksRUFBT21WLGlCQUFtQnZMLEVBQU14SixFQUFZSixFQUFPSSxXQUFhQSxFQUFZSixFQUFPd1AsZUFBaUJwUCxFQUFZSixFQUFPSSxXQUFhQSxFQUFZSixFQUFPd1AsZ0JBQzFKLE9BQU8sRUFFVCxJQUFLeFAsRUFBT29WLGdCQUFrQmhWLEVBQVlKLEVBQU9JLFdBQWFBLEVBQVlKLEVBQU9pUSxpQkFDMUVoSSxHQUFlLEtBQU9nRixFQUN6QixPQUFPLENBR2IsQ0FPQSxJQUFJMkgsRUFJSixHQVZJM0gsS0FBZ0JrRixHQUFpQixJQUFNOEIsR0FDekNqVSxFQUFPMkcsS0FBSywwQkFJZDNHLEVBQU84UCxlQUFlMVAsR0FFUXdVLEVBQTFCM0gsRUFBYWhGLEVBQXlCLE9BQWdCZ0YsRUFBYWhGLEVBQXlCLE9BQXdCLFFBR3BIMkIsSUFBUXhKLElBQWNKLEVBQU9JLFlBQWN3SixHQUFPeEosSUFBY0osRUFBT0ksVUFjekUsT0FiQUosRUFBT2lTLGtCQUFrQmhGLEdBRXJCMU0sRUFBT3dRLFlBQ1QvUSxFQUFPcU8sbUJBRVRyTyxFQUFPZ1Isc0JBQ2UsVUFBbEJ6USxFQUFPaU0sUUFDVHhNLEVBQU8wVCxhQUFhdFQsR0FFSixVQUFkd1UsSUFDRjVVLEVBQU9xVixnQkFBZ0JwQixFQUFjVyxHQUNyQzVVLEVBQU9zVixjQUFjckIsRUFBY1csS0FFOUIsRUFFVCxHQUFJclUsRUFBTzRLLFFBQVMsQ0FDbEIsTUFBTW9KLEVBQU12VSxFQUFPZ0osZUFDYnVNLEVBQUkzTCxFQUFNeEosR0FBYUEsRUFDN0IsR0FBYyxJQUFWSSxFQUFhLENBQ2YsTUFBTXNKLEVBQVk5SixFQUFPK0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxRQUN0REYsSUFDRjlKLEVBQU9TLFVBQVUzSSxNQUFNNEksZUFBaUIsT0FDeENWLEVBQU93VixtQkFBb0IsR0FFekIxTCxJQUFjOUosRUFBT3lWLDJCQUE2QnpWLEVBQU9PLE9BQU9tVixhQUFlLEdBQ2pGMVYsRUFBT3lWLDJCQUE0QixFQUNuQ3BZLHVCQUFzQixLQUNwQm9ELEVBQVU4VCxFQUFNLGFBQWUsYUFBZWdCLENBQUMsS0FHakQ5VSxFQUFVOFQsRUFBTSxhQUFlLGFBQWVnQixFQUU1Q3pMLEdBQ0Z6TSx1QkFBc0IsS0FDcEIyQyxFQUFPUyxVQUFVM0ksTUFBTTRJLGVBQWlCLEdBQ3hDVixFQUFPd1YsbUJBQW9CLENBQUssR0FHdEMsS0FBTyxDQUNMLElBQUt4VixFQUFPK0MsUUFBUUksYUFNbEIsT0FMQXJELEVBQXFCLENBQ25CRSxTQUNBQyxlQUFnQnNWLEVBQ2hCclYsS0FBTXFVLEVBQU0sT0FBUyxTQUVoQixFQUVUOVQsRUFBVWdCLFNBQVMsQ0FDakIsQ0FBQzhTLEVBQU0sT0FBUyxPQUFRZ0IsRUFDeEJmLFNBQVUsVUFFZCxDQUNBLE9BQU8sQ0FDVCxDQXVCQSxPQXRCQXhVLEVBQU93TyxjQUFjaE8sR0FDckJSLEVBQU8wVCxhQUFhdFQsR0FDcEJKLEVBQU9pUyxrQkFBa0JoRixHQUN6QmpOLEVBQU9nUixzQkFDUGhSLEVBQU8yRyxLQUFLLHdCQUF5Qm5HLEVBQU8yVCxHQUM1Q25VLEVBQU9xVixnQkFBZ0JwQixFQUFjVyxHQUN2QixJQUFWcFUsRUFDRlIsRUFBT3NWLGNBQWNyQixFQUFjVyxHQUN6QjVVLEVBQU9vVSxZQUNqQnBVLEVBQU9vVSxXQUFZLEVBQ2RwVSxFQUFPMlYsZ0NBQ1YzVixFQUFPMlYsOEJBQWdDLFNBQXVCakIsR0FDdkQxVSxJQUFVQSxFQUFPMkYsV0FDbEIrTyxFQUFFOWMsU0FBV3pHLE9BQ2pCNk8sRUFBT1MsVUFBVXRGLG9CQUFvQixnQkFBaUI2RSxFQUFPMlYsK0JBQzdEM1YsRUFBTzJWLDhCQUFnQyxZQUNoQzNWLEVBQU8yViw4QkFDZDNWLEVBQU9zVixjQUFjckIsRUFBY1csR0FDckMsR0FFRjVVLEVBQU9TLFVBQVV2RixpQkFBaUIsZ0JBQWlCOEUsRUFBTzJWLGlDQUVyRCxDQUNULEVBNlFFQyxZQTNRRixTQUFxQmhqQixFQUFPNE4sRUFBT3lULEVBQWNFLEdBVS9DLFFBVGMsSUFBVnZoQixJQUNGQSxFQUFRLFFBRUksSUFBVjROLElBQ0ZBLEVBQVFyUCxLQUFLb1AsT0FBT0MsWUFFRCxJQUFqQnlULElBQ0ZBLEdBQWUsR0FFSSxpQkFBVnJoQixFQUFvQixDQUU3QkEsRUFEc0JzVyxTQUFTdFcsRUFBTyxHQUV4QyxDQUNBLE1BQU1vTixFQUFTN08sS0FDVGlhLEVBQWNwTCxFQUFPa0ksTUFBUWxJLEVBQU9PLE9BQU8ySCxNQUFRbEksRUFBT08sT0FBTzJILEtBQUtDLEtBQU8sRUFDbkYsSUFBSTBOLEVBQVdqakIsRUFDZixHQUFJb04sRUFBT08sT0FBT29JLEtBQ2hCLEdBQUkzSSxFQUFPK0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxRQUUxQzZMLEdBQXNCN1YsRUFBTytKLFFBQVErQyxpQkFDaEMsQ0FDTCxJQUFJZ0osRUFDSixHQUFJMUssRUFBYSxDQUNmLE1BQU02QixFQUFhNEksRUFBVzdWLEVBQU9PLE9BQU8ySCxLQUFLQyxLQUNqRDJOLEVBQW1COVYsRUFBT3lILE9BQU9wVSxRQUFPcU8sR0FBNkQsRUFBbERBLEVBQVFtUixhQUFhLDZCQUFtQzVGLElBQVksR0FBR3pFLE1BQzVILE1BQ0VzTixFQUFtQjlWLEVBQU8wTyxvQkFBb0JtSCxHQUVoRCxNQUFNRSxFQUFPM0ssRUFBY2xLLEtBQUs4RyxLQUFLaEksRUFBT3lILE9BQU81VixPQUFTbU8sRUFBT08sT0FBTzJILEtBQUtDLE1BQVFuSSxFQUFPeUgsT0FBTzVWLFFBQy9GLGVBQ0pxWixHQUNFbEwsRUFBT08sT0FDWCxJQUFJdUgsRUFBZ0I5SCxFQUFPTyxPQUFPdUgsY0FDWixTQUFsQkEsRUFDRkEsRUFBZ0I5SCxFQUFPK0gsd0JBRXZCRCxFQUFnQjVHLEtBQUs4RyxLQUFLckosV0FBV3FCLEVBQU9PLE9BQU91SCxjQUFlLEtBQzlEb0QsR0FBa0JwRCxFQUFnQixHQUFNLElBQzFDQSxHQUFnQyxJQUdwQyxJQUFJa08sRUFBY0QsRUFBT0QsRUFBbUJoTyxFQUk1QyxHQUhJb0QsSUFDRjhLLEVBQWNBLEdBQWVGLEVBQW1CNVUsS0FBSzhHLEtBQUtGLEVBQWdCLElBRXhFa08sRUFBYSxDQUNmLE1BQU1wQixFQUFZMUosRUFBaUI0SyxFQUFtQjlWLEVBQU9pSSxZQUFjLE9BQVMsT0FBUzZOLEVBQW1COVYsRUFBT2lJLFlBQWMsRUFBSWpJLEVBQU9PLE9BQU91SCxjQUFnQixPQUFTLE9BQ2hMOUgsRUFBT2lXLFFBQVEsQ0FDYnJCLFlBQ0FFLFNBQVMsRUFDVGxDLGlCQUFnQyxTQUFkZ0MsRUFBdUJrQixFQUFtQixFQUFJQSxFQUFtQkMsRUFBTyxFQUMxRkcsZUFBOEIsU0FBZHRCLEVBQXVCNVUsRUFBTzRJLGVBQVlsVSxHQUU5RCxDQUNBLEdBQUkwVyxFQUFhLENBQ2YsTUFBTTZCLEVBQWE0SSxFQUFXN1YsRUFBT08sT0FBTzJILEtBQUtDLEtBQ2pEME4sRUFBVzdWLEVBQU95SCxPQUFPcFUsUUFBT3FPLEdBQTZELEVBQWxEQSxFQUFRbVIsYUFBYSw2QkFBbUM1RixJQUFZLEdBQUd6RSxNQUNwSCxNQUNFcU4sRUFBVzdWLEVBQU8wTyxvQkFBb0JtSCxFQUUxQyxDQUtGLE9BSEF4WSx1QkFBc0IsS0FDcEIyQyxFQUFPOFUsUUFBUWUsRUFBVXJWLEVBQU95VCxFQUFjRSxFQUFTLElBRWxEblUsQ0FDVCxFQXlNRW1XLFVBdE1GLFNBQW1CM1YsRUFBT3lULEVBQWNFLFFBQ3hCLElBQVYzVCxJQUNGQSxFQUFRclAsS0FBS29QLE9BQU9DLFlBRUQsSUFBakJ5VCxJQUNGQSxHQUFlLEdBRWpCLE1BQU1qVSxFQUFTN08sTUFDVCxRQUNKNlksRUFBTyxPQUNQekosRUFBTSxVQUNONlQsR0FDRXBVLEVBQ0osSUFBS2dLLEVBQVMsT0FBT2hLLEVBQ3JCLElBQUlvVyxFQUFXN1YsRUFBTytMLGVBQ08sU0FBekIvTCxFQUFPdUgsZUFBc0QsSUFBMUJ2SCxFQUFPK0wsZ0JBQXdCL0wsRUFBTzhWLHFCQUMzRUQsRUFBV2xWLEtBQUtDLElBQUluQixFQUFPK0gscUJBQXFCLFdBQVcsR0FBTyxJQUVwRSxNQUFNdU8sRUFBWXRXLEVBQU9pSSxZQUFjMUgsRUFBT2dNLG1CQUFxQixFQUFJNkosRUFDakV0TSxFQUFZOUosRUFBTytKLFNBQVd4SixFQUFPd0osUUFBUUMsUUFDbkQsR0FBSXpKLEVBQU9vSSxLQUFNLENBQ2YsR0FBSXlMLElBQWN0SyxHQUFhdkosRUFBT2dXLG9CQUFxQixPQUFPLEVBTWxFLEdBTEF2VyxFQUFPaVcsUUFBUSxDQUNickIsVUFBVyxTQUdiNVUsRUFBT3dXLFlBQWN4VyxFQUFPUyxVQUFVZ1csV0FDbEN6VyxFQUFPaUksY0FBZ0JqSSxFQUFPeUgsT0FBTzVWLE9BQVMsR0FBSzBPLEVBQU80SyxRQUk1RCxPQUhBOU4sdUJBQXNCLEtBQ3BCMkMsRUFBTzhVLFFBQVE5VSxFQUFPaUksWUFBY3FPLEVBQVc5VixFQUFPeVQsRUFBY0UsRUFBUyxLQUV4RSxDQUVYLENBQ0EsT0FBSTVULEVBQU9tSSxRQUFVMUksRUFBT21RLE1BQ25CblEsRUFBTzhVLFFBQVEsRUFBR3RVLEVBQU95VCxFQUFjRSxHQUV6Q25VLEVBQU84VSxRQUFROVUsRUFBT2lJLFlBQWNxTyxFQUFXOVYsRUFBT3lULEVBQWNFLEVBQzdFLEVBaUtFdUMsVUE5SkYsU0FBbUJsVyxFQUFPeVQsRUFBY0UsUUFDeEIsSUFBVjNULElBQ0ZBLEVBQVFyUCxLQUFLb1AsT0FBT0MsWUFFRCxJQUFqQnlULElBQ0ZBLEdBQWUsR0FFakIsTUFBTWpVLEVBQVM3TyxNQUNULE9BQ0pvUCxFQUFNLFNBQ040SixFQUFRLFdBQ1JDLEVBQVUsYUFDVlQsRUFBWSxRQUNaSyxFQUFPLFVBQ1BvSyxHQUNFcFUsRUFDSixJQUFLZ0ssRUFBUyxPQUFPaEssRUFDckIsTUFBTThKLEVBQVk5SixFQUFPK0osU0FBV3hKLEVBQU93SixRQUFRQyxRQUNuRCxHQUFJekosRUFBT29JLEtBQU0sQ0FDZixHQUFJeUwsSUFBY3RLLEdBQWF2SixFQUFPZ1csb0JBQXFCLE9BQU8sRUFDbEV2VyxFQUFPaVcsUUFBUSxDQUNickIsVUFBVyxTQUdiNVUsRUFBT3dXLFlBQWN4VyxFQUFPUyxVQUFVZ1csVUFDeEMsQ0FFQSxTQUFTRSxFQUFVQyxHQUNqQixPQUFJQSxFQUFNLEdBQVcxVixLQUFLaUwsTUFBTWpMLEtBQUttTCxJQUFJdUssSUFDbEMxVixLQUFLaUwsTUFBTXlLLEVBQ3BCLENBQ0EsTUFBTTVCLEVBQXNCMkIsRUFMVmhOLEVBQWUzSixFQUFPSSxXQUFhSixFQUFPSSxXQU10RHlXLEVBQXFCMU0sRUFBU2pYLEtBQUkwakIsR0FBT0QsRUFBVUMsS0FDekQsSUFBSUUsRUFBVzNNLEVBQVMwTSxFQUFtQnRqQixRQUFReWhCLEdBQXVCLEdBQzFFLFFBQXdCLElBQWI4QixHQUE0QnZXLEVBQU80SyxRQUFTLENBQ3JELElBQUk0TCxFQUNKNU0sRUFBUy9RLFNBQVEsQ0FBQ2tVLEVBQU1HLEtBQ2xCdUgsR0FBdUIxSCxJQUV6QnlKLEVBQWdCdEosRUFDbEIsU0FFMkIsSUFBbEJzSixJQUNURCxFQUFXM00sRUFBUzRNLEVBQWdCLEVBQUlBLEVBQWdCLEVBQUlBLEdBRWhFLENBQ0EsSUFBSUMsRUFBWSxFQVNoQixRQVJ3QixJQUFiRixJQUNURSxFQUFZNU0sRUFBVzdXLFFBQVF1akIsR0FDM0JFLEVBQVksSUFBR0EsRUFBWWhYLEVBQU9pSSxZQUFjLEdBQ3ZCLFNBQXpCMUgsRUFBT3VILGVBQXNELElBQTFCdkgsRUFBTytMLGdCQUF3Qi9MLEVBQU84VixxQkFDM0VXLEVBQVlBLEVBQVloWCxFQUFPK0gscUJBQXFCLFlBQVksR0FBUSxFQUN4RWlQLEVBQVk5VixLQUFLQyxJQUFJNlYsRUFBVyxLQUdoQ3pXLEVBQU9tSSxRQUFVMUksRUFBT2tRLFlBQWEsQ0FDdkMsTUFBTStHLEVBQVlqWCxFQUFPTyxPQUFPd0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxTQUFXaEssRUFBTytKLFFBQVUvSixFQUFPK0osUUFBUXRDLE9BQU81VixPQUFTLEVBQUltTyxFQUFPeUgsT0FBTzVWLE9BQVMsRUFDdkosT0FBT21PLEVBQU84VSxRQUFRbUMsRUFBV3pXLEVBQU95VCxFQUFjRSxFQUN4RCxDQUFPLE9BQUk1VCxFQUFPb0ksTUFBK0IsSUFBdkIzSSxFQUFPaUksYUFBcUIxSCxFQUFPNEssU0FDM0Q5Tix1QkFBc0IsS0FDcEIyQyxFQUFPOFUsUUFBUWtDLEVBQVd4VyxFQUFPeVQsRUFBY0UsRUFBUyxLQUVuRCxHQUVGblUsRUFBTzhVLFFBQVFrQyxFQUFXeFcsRUFBT3lULEVBQWNFLEVBQ3hELEVBOEZFK0MsV0EzRkYsU0FBb0IxVyxFQUFPeVQsRUFBY0UsR0FRdkMsWUFQYyxJQUFWM1QsSUFDRkEsRUFBUXJQLEtBQUtvUCxPQUFPQyxZQUVELElBQWpCeVQsSUFDRkEsR0FBZSxHQUVGOWlCLEtBQ0QyakIsUUFEQzNqQixLQUNjOFcsWUFBYXpILEVBQU95VCxFQUFjRSxFQUNqRSxFQW1GRWdELGVBaEZGLFNBQXdCM1csRUFBT3lULEVBQWNFLEVBQVVpRCxRQUN2QyxJQUFWNVcsSUFDRkEsRUFBUXJQLEtBQUtvUCxPQUFPQyxZQUVELElBQWpCeVQsSUFDRkEsR0FBZSxRQUVDLElBQWRtRCxJQUNGQSxFQUFZLElBRWQsTUFBTXBYLEVBQVM3TyxLQUNmLElBQUl5QixFQUFRb04sRUFBT2lJLFlBQ25CLE1BQU15SyxFQUFPeFIsS0FBS0UsSUFBSXBCLEVBQU9PLE9BQU9nTSxtQkFBb0IzWixHQUNsRDZhLEVBQVlpRixFQUFPeFIsS0FBS2lMLE9BQU92WixFQUFROGYsR0FBUTFTLEVBQU9PLE9BQU8rTCxnQkFDN0RsTSxFQUFZSixFQUFPMkosYUFBZTNKLEVBQU9JLFdBQWFKLEVBQU9JLFVBQ25FLEdBQUlBLEdBQWFKLEVBQU9tSyxTQUFTc0QsR0FBWSxDQUczQyxNQUFNNEosRUFBY3JYLEVBQU9tSyxTQUFTc0QsR0FFaENyTixFQUFZaVgsR0FEQ3JYLEVBQU9tSyxTQUFTc0QsRUFBWSxHQUNINEosR0FBZUQsSUFDdkR4a0IsR0FBU29OLEVBQU9PLE9BQU8rTCxlQUUzQixLQUFPLENBR0wsTUFBTXdLLEVBQVc5VyxFQUFPbUssU0FBU3NELEVBQVksR0FFekNyTixFQUFZMFcsSUFESTlXLEVBQU9tSyxTQUFTc0QsR0FDT3FKLEdBQVlNLElBQ3JEeGtCLEdBQVNvTixFQUFPTyxPQUFPK0wsZUFFM0IsQ0FHQSxPQUZBMVosRUFBUXNPLEtBQUtDLElBQUl2TyxFQUFPLEdBQ3hCQSxFQUFRc08sS0FBS0UsSUFBSXhPLEVBQU9vTixFQUFPb0ssV0FBV3ZZLE9BQVMsR0FDNUNtTyxFQUFPOFUsUUFBUWxpQixFQUFPNE4sRUFBT3lULEVBQWNFLEVBQ3BELEVBOENFYixvQkE1Q0YsV0FDRSxNQUFNdFQsRUFBUzdPLE1BQ1QsT0FDSm9QLEVBQU0sU0FDTmtKLEdBQ0V6SixFQUNFOEgsRUFBeUMsU0FBekJ2SCxFQUFPdUgsY0FBMkI5SCxFQUFPK0gsdUJBQXlCeEgsRUFBT3VILGNBQy9GLElBQ0ljLEVBREEwTyxFQUFldFgsRUFBT3FULGFBRTFCLE1BQU1rRSxFQUFnQnZYLEVBQU9vSCxVQUFZLGVBQWlCLElBQUk3RyxFQUFPOEcsYUFDckUsR0FBSTlHLEVBQU9vSSxLQUFNLENBQ2YsR0FBSTNJLEVBQU9vVSxVQUFXLE9BQ3RCeEwsRUFBWU0sU0FBU2xKLEVBQU9vVCxhQUFhUCxhQUFhLDJCQUE0QixJQUM5RXRTLEVBQU8ySyxlQUNMb00sRUFBZXRYLEVBQU93WCxhQUFlMVAsRUFBZ0IsR0FBS3dQLEVBQWV0WCxFQUFPeUgsT0FBTzVWLE9BQVNtTyxFQUFPd1gsYUFBZTFQLEVBQWdCLEdBQ3hJOUgsRUFBT2lXLFVBQ1BxQixFQUFldFgsRUFBT3lYLGNBQWMsRUFBZ0JoTyxFQUFVLEdBQUc4Tiw4QkFBMEMzTyxPQUFlLElBQzFILEdBQVMsS0FDUDVJLEVBQU84VSxRQUFRd0MsRUFBYSxLQUc5QnRYLEVBQU84VSxRQUFRd0MsR0FFUkEsRUFBZXRYLEVBQU95SCxPQUFPNVYsT0FBU2lXLEdBQy9DOUgsRUFBT2lXLFVBQ1BxQixFQUFldFgsRUFBT3lYLGNBQWMsRUFBZ0JoTyxFQUFVLEdBQUc4Tiw4QkFBMEMzTyxPQUFlLElBQzFILEdBQVMsS0FDUDVJLEVBQU84VSxRQUFRd0MsRUFBYSxLQUc5QnRYLEVBQU84VSxRQUFRd0MsRUFFbkIsTUFDRXRYLEVBQU84VSxRQUFRd0MsRUFFbkIsR0FvU0EsSUFBSTNPLEVBQU8sQ0FDVCtPLFdBelJGLFNBQW9CeEIsR0FDbEIsTUFBTWxXLEVBQVM3TyxNQUNULE9BQ0pvUCxFQUFNLFNBQ05rSixHQUNFekosRUFDSixJQUFLTyxFQUFPb0ksTUFBUTNJLEVBQU8rSixTQUFXL0osRUFBT08sT0FBT3dKLFFBQVFDLFFBQVMsT0FDckUsTUFBTXNCLEVBQWEsS0FDRixFQUFnQjdCLEVBQVUsSUFBSWxKLEVBQU84Ryw0QkFDN0NqTyxTQUFRLENBQUNwRCxFQUFJcEQsS0FDbEJvRCxFQUFHMEYsYUFBYSwwQkFBMkI5SSxFQUFNLEdBQ2pELEVBRUV3WSxFQUFjcEwsRUFBT2tJLE1BQVEzSCxFQUFPMkgsTUFBUTNILEVBQU8ySCxLQUFLQyxLQUFPLEVBQy9EbUUsRUFBaUIvTCxFQUFPK0wsZ0JBQWtCbEIsRUFBYzdLLEVBQU8ySCxLQUFLQyxLQUFPLEdBQzNFd1AsRUFBa0IzWCxFQUFPeUgsT0FBTzVWLE9BQVN5YSxHQUFtQixFQUM1RHNMLEVBQWlCeE0sR0FBZXBMLEVBQU95SCxPQUFPNVYsT0FBUzBPLEVBQU8ySCxLQUFLQyxNQUFTLEVBQzVFMFAsRUFBaUJDLElBQ3JCLElBQUssSUFBSWxtQixFQUFJLEVBQUdBLEVBQUlrbUIsRUFBZ0JsbUIsR0FBSyxFQUFHLENBQzFDLE1BQU04UCxFQUFVMUIsRUFBT29ILFVBQVksRUFBYyxlQUFnQixDQUFDN0csRUFBT3dYLGtCQUFvQixFQUFjLE1BQU8sQ0FBQ3hYLEVBQU84RyxXQUFZOUcsRUFBT3dYLGtCQUM3SS9YLEVBQU95SixTQUFTdU8sT0FBT3RXLEVBQ3pCLEdBRUYsR0FBSWlXLEVBQWlCLENBQ25CLEdBQUlwWCxFQUFPMFgsbUJBQW9CLENBRTdCSixFQURvQnZMLEVBQWlCdE0sRUFBT3lILE9BQU81VixPQUFTeWEsR0FFNUR0TSxFQUFPa1ksZUFDUGxZLEVBQU9xSixjQUNULE1BQ0V4SCxFQUFZLG1MQUVkeUosR0FDRixNQUFPLEdBQUlzTSxFQUFnQixDQUN6QixHQUFJclgsRUFBTzBYLG1CQUFvQixDQUU3QkosRUFEb0J0WCxFQUFPMkgsS0FBS0MsS0FBT25JLEVBQU95SCxPQUFPNVYsT0FBUzBPLEVBQU8ySCxLQUFLQyxNQUUxRW5JLEVBQU9rWSxlQUNQbFksRUFBT3FKLGNBQ1QsTUFDRXhILEVBQVksOEtBRWR5SixHQUNGLE1BQ0VBLElBRUZ0TCxFQUFPaVcsUUFBUSxDQUNiQyxpQkFDQXRCLFVBQVdyVSxFQUFPMkssb0JBQWlCeFcsRUFBWSxRQUVuRCxFQXdPRXVoQixRQXRPRixTQUFpQnhTLEdBQ2YsSUFBSSxlQUNGeVMsRUFBYyxRQUNkcEIsR0FBVSxFQUFJLFVBQ2RGLEVBQVMsYUFDVGxCLEVBQVksaUJBQ1pkLEVBQWdCLGFBQ2hCZSxFQUFZLGFBQ1p3RSxRQUNZLElBQVYxVSxFQUFtQixDQUFDLEVBQUlBLEVBQzVCLE1BQU16RCxFQUFTN08sS0FDZixJQUFLNk8sRUFBT08sT0FBT29JLEtBQU0sT0FDekIzSSxFQUFPMkcsS0FBSyxpQkFDWixNQUFNLE9BQ0pjLEVBQU0sZUFDTjJOLEVBQWMsZUFDZEQsRUFBYyxTQUNkMUwsRUFBUSxPQUNSbEosR0FDRVAsR0FDRSxlQUNKa0wsR0FDRTNLLEVBR0osR0FGQVAsRUFBT29WLGdCQUFpQixFQUN4QnBWLEVBQU9tVixnQkFBaUIsRUFDcEJuVixFQUFPK0osU0FBV3hKLEVBQU93SixRQUFRQyxRQWFuQyxPQVpJOEssSUFDR3ZVLEVBQU8ySyxnQkFBdUMsSUFBckJsTCxFQUFPeU4sVUFFMUJsTixFQUFPMkssZ0JBQWtCbEwsRUFBT3lOLFVBQVlsTixFQUFPdUgsY0FDNUQ5SCxFQUFPOFUsUUFBUTlVLEVBQU8rSixRQUFRdEMsT0FBTzVWLE9BQVNtTyxFQUFPeU4sVUFBVyxHQUFHLEdBQU8sR0FDakV6TixFQUFPeU4sWUFBY3pOLEVBQU9tSyxTQUFTdFksT0FBUyxHQUN2RG1PLEVBQU84VSxRQUFROVUsRUFBTytKLFFBQVErQyxhQUFjLEdBQUcsR0FBTyxHQUp0RDlNLEVBQU84VSxRQUFROVUsRUFBTytKLFFBQVF0QyxPQUFPNVYsT0FBUSxHQUFHLEdBQU8sSUFPM0RtTyxFQUFPb1YsZUFBaUJBLEVBQ3hCcFYsRUFBT21WLGVBQWlCQSxPQUN4Qm5WLEVBQU8yRyxLQUFLLFdBR2QsSUFBSW1CLEVBQWdCdkgsRUFBT3VILGNBQ0wsU0FBbEJBLEVBQ0ZBLEVBQWdCOUgsRUFBTytILHdCQUV2QkQsRUFBZ0I1RyxLQUFLOEcsS0FBS3JKLFdBQVc0QixFQUFPdUgsY0FBZSxLQUN2RG9ELEdBQWtCcEQsRUFBZ0IsR0FBTSxJQUMxQ0EsR0FBZ0MsSUFHcEMsTUFBTXdFLEVBQWlCL0wsRUFBTzhWLG1CQUFxQnZPLEVBQWdCdkgsRUFBTytMLGVBQzFFLElBQUlrTCxFQUFlbEwsRUFDZmtMLEVBQWVsTCxHQUFtQixJQUNwQ2tMLEdBQWdCbEwsRUFBaUJrTCxFQUFlbEwsR0FFbERrTCxHQUFnQmpYLEVBQU82WCxxQkFDdkJwWSxFQUFPd1gsYUFBZUEsRUFDdEIsTUFBTXBNLEVBQWNwTCxFQUFPa0ksTUFBUTNILEVBQU8ySCxNQUFRM0gsRUFBTzJILEtBQUtDLEtBQU8sRUFDakVWLEVBQU81VixPQUFTaVcsRUFBZ0IwUCxFQUNsQzNWLEVBQVksNk9BQ0h1SixHQUFvQyxRQUFyQjdLLEVBQU8ySCxLQUFLbVEsTUFDcEN4VyxFQUFZLDJFQUVkLE1BQU15VyxFQUF1QixHQUN2QkMsRUFBc0IsR0FDNUIsSUFBSXRRLEVBQWNqSSxFQUFPaUksaUJBQ08sSUFBckIySyxFQUNUQSxFQUFtQjVTLEVBQU95WCxjQUFjaFEsRUFBT3BVLFFBQU8yQyxHQUFNQSxFQUFHN0IsVUFBVUMsU0FBU21NLEVBQU84USxvQkFBbUIsSUFFNUdwSixFQUFjMkssRUFFaEIsTUFBTTRGLEVBQXVCLFNBQWQ1RCxJQUF5QkEsRUFDbEM2RCxFQUF1QixTQUFkN0QsSUFBeUJBLEVBQ3hDLElBQUk4RCxFQUFrQixFQUNsQkMsRUFBaUIsRUFDckIsTUFBTTVDLEVBQU8zSyxFQUFjbEssS0FBSzhHLEtBQUtQLEVBQU81VixPQUFTME8sRUFBTzJILEtBQUtDLE1BQVFWLEVBQU81VixPQUUxRSttQixHQURpQnhOLEVBQWMzRCxFQUFPbUwsR0FBa0JwSyxPQUFTb0ssSUFDckIxSCxRQUEwQyxJQUFqQndJLEdBQWdDNUwsRUFBZ0IsRUFBSSxHQUFNLEdBRXJJLEdBQUk4USxFQUEwQnBCLEVBQWMsQ0FDMUNrQixFQUFrQnhYLEtBQUtDLElBQUlxVyxFQUFlb0IsRUFBeUJ0TSxHQUNuRSxJQUFLLElBQUkxYSxFQUFJLEVBQUdBLEVBQUk0bEIsRUFBZW9CLEVBQXlCaG5CLEdBQUssRUFBRyxDQUNsRSxNQUFNZ0IsRUFBUWhCLEVBQUlzUCxLQUFLaUwsTUFBTXZhLEVBQUlta0IsR0FBUUEsRUFDekMsR0FBSTNLLEVBQWEsQ0FDZixNQUFNeU4sRUFBb0I5QyxFQUFPbmpCLEVBQVEsRUFDekMsSUFBSyxJQUFJaEIsRUFBSTZWLEVBQU81VixPQUFTLEVBQUdELEdBQUssRUFBR0EsR0FBSyxFQUN2QzZWLEVBQU83VixHQUFHNFcsU0FBV3FRLEdBQW1CUCxFQUFxQnhsQixLQUFLbEIsRUFLMUUsTUFDRTBtQixFQUFxQnhsQixLQUFLaWpCLEVBQU9uakIsRUFBUSxFQUU3QyxDQUNGLE1BQU8sR0FBSWdtQixFQUEwQjlRLEVBQWdCaU8sRUFBT3lCLEVBQWMsQ0FDeEVtQixFQUFpQnpYLEtBQUtDLElBQUl5WCxHQUEyQjdDLEVBQXNCLEVBQWZ5QixHQUFtQmxMLEdBQy9FLElBQUssSUFBSTFhLEVBQUksRUFBR0EsRUFBSSttQixFQUFnQi9tQixHQUFLLEVBQUcsQ0FDMUMsTUFBTWdCLEVBQVFoQixFQUFJc1AsS0FBS2lMLE1BQU12YSxFQUFJbWtCLEdBQVFBLEVBQ3JDM0ssRUFDRjNELEVBQU9yTyxTQUFRLENBQUNzUyxFQUFPdUIsS0FDakJ2QixFQUFNbEQsU0FBVzVWLEdBQU8ybEIsRUFBb0J6bEIsS0FBS21hLEVBQVcsSUFHbEVzTCxFQUFvQnpsQixLQUFLRixFQUU3QixDQUNGLENBOEJBLEdBN0JBb04sRUFBTzhZLHFCQUFzQixFQUM3QnpiLHVCQUFzQixLQUNwQjJDLEVBQU84WSxxQkFBc0IsQ0FBSyxJQUVoQ0wsR0FDRkgsRUFBcUJsZixTQUFReEcsSUFDM0I2VSxFQUFPN1UsR0FBT21tQixtQkFBb0IsRUFDbEN0UCxFQUFTdVAsUUFBUXZSLEVBQU83VSxJQUN4QjZVLEVBQU83VSxHQUFPbW1CLG1CQUFvQixDQUFLLElBR3ZDUCxHQUNGRCxFQUFvQm5mLFNBQVF4RyxJQUMxQjZVLEVBQU83VSxHQUFPbW1CLG1CQUFvQixFQUNsQ3RQLEVBQVN1TyxPQUFPdlEsRUFBTzdVLElBQ3ZCNlUsRUFBTzdVLEdBQU9tbUIsbUJBQW9CLENBQUssSUFHM0MvWSxFQUFPa1ksZUFDc0IsU0FBekIzWCxFQUFPdUgsY0FDVDlILEVBQU9xSixlQUNFK0IsSUFBZ0JrTixFQUFxQnptQixPQUFTLEdBQUs0bUIsR0FBVUYsRUFBb0IxbUIsT0FBUyxHQUFLMm1CLElBQ3hHeFksRUFBT3lILE9BQU9yTyxTQUFRLENBQUNzUyxFQUFPdUIsS0FDNUJqTixFQUFPa0ksS0FBS3lELFlBQVlzQixFQUFZdkIsRUFBTzFMLEVBQU95SCxPQUFPLElBR3pEbEgsRUFBT3dOLHFCQUNUL04sRUFBT2dPLHFCQUVMOEcsRUFDRixHQUFJd0QsRUFBcUJ6bUIsT0FBUyxHQUFLNG1CLEdBQ3JDLFFBQThCLElBQW5CdkMsRUFBZ0MsQ0FDekMsTUFBTStDLEVBQXdCalosRUFBT29LLFdBQVduQyxHQUUxQ2lSLEVBRG9CbFosRUFBT29LLFdBQVduQyxFQUFjeVEsR0FDekJPLEVBQzdCZCxFQUNGblksRUFBTzBULGFBQWExVCxFQUFPSSxVQUFZOFksSUFFdkNsWixFQUFPOFUsUUFBUTdNLEVBQWN5USxFQUFpQixHQUFHLEdBQU8sR0FDcERoRixJQUNGMVQsRUFBT21aLGdCQUFnQkMsZUFBaUJwWixFQUFPbVosZ0JBQWdCQyxlQUFpQkYsRUFDaEZsWixFQUFPbVosZ0JBQWdCMUYsaUJBQW1CelQsRUFBT21aLGdCQUFnQjFGLGlCQUFtQnlGLEdBRzFGLE1BQ0UsR0FBSXhGLEVBQWMsQ0FDaEIsTUFBTTJGLEVBQVFqTyxFQUFja04sRUFBcUJ6bUIsT0FBUzBPLEVBQU8ySCxLQUFLQyxLQUFPbVEsRUFBcUJ6bUIsT0FDbEdtTyxFQUFPOFUsUUFBUTlVLEVBQU9pSSxZQUFjb1IsRUFBTyxHQUFHLEdBQU8sR0FDckRyWixFQUFPbVosZ0JBQWdCMUYsaUJBQW1CelQsRUFBT0ksU0FDbkQsT0FFRyxHQUFJbVksRUFBb0IxbUIsT0FBUyxHQUFLMm1CLEVBQzNDLFFBQThCLElBQW5CdEMsRUFBZ0MsQ0FDekMsTUFBTStDLEVBQXdCalosRUFBT29LLFdBQVduQyxHQUUxQ2lSLEVBRG9CbFosRUFBT29LLFdBQVduQyxFQUFjMFEsR0FDekJNLEVBQzdCZCxFQUNGblksRUFBTzBULGFBQWExVCxFQUFPSSxVQUFZOFksSUFFdkNsWixFQUFPOFUsUUFBUTdNLEVBQWMwUSxFQUFnQixHQUFHLEdBQU8sR0FDbkRqRixJQUNGMVQsRUFBT21aLGdCQUFnQkMsZUFBaUJwWixFQUFPbVosZ0JBQWdCQyxlQUFpQkYsRUFDaEZsWixFQUFPbVosZ0JBQWdCMUYsaUJBQW1CelQsRUFBT21aLGdCQUFnQjFGLGlCQUFtQnlGLEdBRzFGLEtBQU8sQ0FDTCxNQUFNRyxFQUFRak8sRUFBY21OLEVBQW9CMW1CLE9BQVMwTyxFQUFPMkgsS0FBS0MsS0FBT29RLEVBQW9CMW1CLE9BQ2hHbU8sRUFBTzhVLFFBQVE5VSxFQUFPaUksWUFBY29SLEVBQU8sR0FBRyxHQUFPLEVBQ3ZELENBS0osR0FGQXJaLEVBQU9vVixlQUFpQkEsRUFDeEJwVixFQUFPbVYsZUFBaUJBLEVBQ3BCblYsRUFBT3NaLFlBQWN0WixFQUFPc1osV0FBV0MsVUFBWTVGLEVBQWMsQ0FDbkUsTUFBTTZGLEVBQWEsQ0FDakJ0RCxpQkFDQXRCLFlBQ0FsQixlQUNBZCxtQkFDQWUsY0FBYyxHQUVaMWdCLE1BQU1tUCxRQUFRcEMsRUFBT3NaLFdBQVdDLFNBQ2xDdlosRUFBT3NaLFdBQVdDLFFBQVFuZ0IsU0FBUWlKLEtBQzNCQSxFQUFFc0QsV0FBYXRELEVBQUU5QixPQUFPb0ksTUFBTXRHLEVBQUU0VCxRQUFRLElBQ3hDdUQsRUFDSDFFLFFBQVN6UyxFQUFFOUIsT0FBT3VILGdCQUFrQnZILEVBQU91SCxlQUFnQmdOLEdBQzNELElBRUs5VSxFQUFPc1osV0FBV0MsbUJBQW1CdlosRUFBT3JGLGFBQWVxRixFQUFPc1osV0FBV0MsUUFBUWhaLE9BQU9vSSxNQUNyRzNJLEVBQU9zWixXQUFXQyxRQUFRdEQsUUFBUSxJQUM3QnVELEVBQ0gxRSxRQUFTOVUsRUFBT3NaLFdBQVdDLFFBQVFoWixPQUFPdUgsZ0JBQWtCdkgsRUFBT3VILGVBQWdCZ04sR0FHekYsQ0FDQTlVLEVBQU8yRyxLQUFLLFVBQ2QsRUE0QkU4UyxZQTFCRixXQUNFLE1BQU16WixFQUFTN08sTUFDVCxPQUNKb1AsRUFBTSxTQUNOa0osR0FDRXpKLEVBQ0osSUFBS08sRUFBT29JLE1BQVEzSSxFQUFPK0osU0FBVy9KLEVBQU9PLE9BQU93SixRQUFRQyxRQUFTLE9BQ3JFaEssRUFBT2tZLGVBQ1AsTUFBTXdCLEVBQWlCLEdBQ3ZCMVosRUFBT3lILE9BQU9yTyxTQUFRc0ksSUFDcEIsTUFBTTlPLE9BQTRDLElBQTdCOE8sRUFBUWlZLGlCQUFxRixFQUFsRGpZLEVBQVFtUixhQUFhLDJCQUFpQ25SLEVBQVFpWSxpQkFDOUhELEVBQWU5bUIsR0FBUzhPLENBQU8sSUFFakMxQixFQUFPeUgsT0FBT3JPLFNBQVFzSSxJQUNwQkEsRUFBUWdHLGdCQUFnQiwwQkFBMEIsSUFFcERnUyxFQUFldGdCLFNBQVFzSSxJQUNyQitILEVBQVN1TyxPQUFPdFcsRUFBUSxJQUUxQjFCLEVBQU9rWSxlQUNQbFksRUFBTzhVLFFBQVE5VSxFQUFPNEksVUFBVyxFQUNuQyxHQTZEQSxTQUFTZ1IsRUFBaUI1WixFQUFRNkYsRUFBT2dVLEdBQ3ZDLE1BQU1qbUIsRUFBUyxLQUNULE9BQ0oyTSxHQUNFUCxFQUNFOFosRUFBcUJ2WixFQUFPdVosbUJBQzVCQyxFQUFxQnhaLEVBQU93WixtQkFDbEMsT0FBSUQsS0FBdUJELEdBQVVFLEdBQXNCRixHQUFVam1CLEVBQU8yQixXQUFhd2tCLElBQzVELFlBQXZCRCxJQUNGalUsRUFBTW1VLGtCQUNDLEVBS2IsQ0FDQSxTQUFTQyxFQUFhcFUsR0FDcEIsTUFBTTdGLEVBQVM3TyxLQUNUTyxFQUFXLElBQ2pCLElBQUlnakIsRUFBSTdPLEVBQ0o2TyxFQUFFd0YsZ0JBQWV4RixFQUFJQSxFQUFFd0YsZUFDM0IsTUFBTXRULEVBQU81RyxFQUFPbVosZ0JBQ3BCLEdBQWUsZ0JBQVh6RSxFQUFFeGpCLEtBQXdCLENBQzVCLEdBQXVCLE9BQW5CMFYsRUFBS3VULFdBQXNCdlQsRUFBS3VULFlBQWN6RixFQUFFeUYsVUFDbEQsT0FFRnZULEVBQUt1VCxVQUFZekYsRUFBRXlGLFNBQ3JCLEtBQXNCLGVBQVh6RixFQUFFeGpCLE1BQW9ELElBQTNCd2pCLEVBQUUwRixjQUFjdm9CLFNBQ3BEK1UsRUFBS3lULFFBQVUzRixFQUFFMEYsY0FBYyxHQUFHRSxZQUVwQyxHQUFlLGVBQVg1RixFQUFFeGpCLEtBR0osWUFEQTBvQixFQUFpQjVaLEVBQVEwVSxFQUFHQSxFQUFFMEYsY0FBYyxHQUFHRyxPQUdqRCxNQUFNLE9BQ0poYSxFQUFNLFFBQ05pYSxFQUFPLFFBQ1B4USxHQUNFaEssRUFDSixJQUFLZ0ssRUFBUyxPQUNkLElBQUt6SixFQUFPa2EsZUFBbUMsVUFBbEIvRixFQUFFZ0csWUFBeUIsT0FDeEQsR0FBSTFhLEVBQU9vVSxXQUFhN1QsRUFBTzhULCtCQUM3QixRQUVHclUsRUFBT29VLFdBQWE3VCxFQUFPNEssU0FBVzVLLEVBQU9vSSxNQUNoRDNJLEVBQU9pVyxVQUVULElBQUkwRSxFQUFXakcsRUFBRTljLE9BQ2pCLEdBQWlDLFlBQTdCMkksRUFBT3FhLG9CQUNKNWEsRUFBT1MsVUFBVXJNLFNBQVN1bUIsR0FBVyxPQUU1QyxHQUFJLFVBQVdqRyxHQUFpQixJQUFaQSxFQUFFbUcsTUFBYSxPQUNuQyxHQUFJLFdBQVluRyxHQUFLQSxFQUFFb0csT0FBUyxFQUFHLE9BQ25DLEdBQUlsVSxFQUFLbVUsV0FBYW5VLEVBQUtvVSxRQUFTLE9BR3BDLE1BQU1DLElBQXlCMWEsRUFBTzJhLGdCQUE0QyxLQUExQjNhLEVBQU8yYSxlQUV6REMsRUFBWXpHLEVBQUUwRyxhQUFlMUcsRUFBRTBHLGVBQWlCMUcsRUFBRXpCLEtBQ3BEZ0ksR0FBd0J2RyxFQUFFOWMsUUFBVThjLEVBQUU5YyxPQUFPK0osWUFBY3daLElBQzdEUixFQUFXUSxFQUFVLElBRXZCLE1BQU1FLEVBQW9COWEsRUFBTzhhLGtCQUFvQjlhLEVBQU84YSxrQkFBb0IsSUFBSTlhLEVBQU8yYSxpQkFDckZJLEtBQW9CNUcsRUFBRTljLFNBQVU4YyxFQUFFOWMsT0FBTytKLFlBRy9DLEdBQUlwQixFQUFPZ2IsWUFBY0QsRUFsRjNCLFNBQXdCMVosRUFBVTRaLEdBYWhDLFlBWmEsSUFBVEEsSUFDRkEsRUFBT3JxQixNQUVULFNBQVNzcUIsRUFBY3psQixHQUNyQixJQUFLQSxHQUFNQSxJQUFPLEtBQWlCQSxJQUFPLElBQWEsT0FBTyxLQUMxREEsRUFBRzBsQixlQUFjMWxCLEVBQUtBLEVBQUcwbEIsY0FDN0IsTUFBTUMsRUFBUTNsQixFQUFHbVIsUUFBUXZGLEdBQ3pCLE9BQUsrWixHQUFVM2xCLEVBQUc0bEIsWUFHWEQsR0FBU0YsRUFBY3psQixFQUFHNGxCLGNBQWM3ZixNQUZ0QyxJQUdYLENBQ08wZixDQUFjRCxFQUN2QixDQW9FNENLLENBQWVSLEVBQW1CVixHQUFZQSxFQUFTeFQsUUFBUWtVLElBRXZHLFlBREFyYixFQUFPOGIsWUFBYSxHQUd0QixHQUFJdmIsRUFBT3diLGVBQ0pwQixFQUFTeFQsUUFBUTVHLEVBQU93YixjQUFlLE9BRTlDdkIsRUFBUXdCLFNBQVd0SCxFQUFFNkYsTUFDckJDLEVBQVF5QixTQUFXdkgsRUFBRXdILE1BQ3JCLE1BQU1yQyxFQUFTVyxFQUFRd0IsU0FDakJHLEVBQVMzQixFQUFReUIsU0FJdkIsSUFBS3JDLEVBQWlCNVosRUFBUTBVLEVBQUdtRixHQUMvQixPQUVGamYsT0FBT3dPLE9BQU94QyxFQUFNLENBQ2xCbVUsV0FBVyxFQUNYQyxTQUFTLEVBQ1RvQixxQkFBcUIsRUFDckJDLGlCQUFhM25CLEVBQ2I0bkIsaUJBQWE1bkIsSUFFZjhsQixFQUFRWCxPQUFTQSxFQUNqQlcsRUFBUTJCLE9BQVNBLEVBQ2pCdlYsRUFBSzJWLGVBQWlCLElBQ3RCdmMsRUFBTzhiLFlBQWEsRUFDcEI5YixFQUFPNkksYUFDUDdJLEVBQU93YyxvQkFBaUI5bkIsRUFDcEI2TCxFQUFPNlcsVUFBWSxJQUFHeFEsRUFBSzZWLG9CQUFxQixHQUNwRCxJQUFJekMsR0FBaUIsRUFDakJXLEVBQVMxbUIsUUFBUTJTLEVBQUs4VixxQkFDeEIxQyxHQUFpQixFQUNTLFdBQXRCVyxFQUFTcmYsV0FDWHNMLEVBQUttVSxXQUFZLElBR2pCcnBCLEVBQVMwSixlQUFpQjFKLEVBQVMwSixjQUFjbkgsUUFBUTJTLEVBQUs4VixvQkFBc0JockIsRUFBUzBKLGdCQUFrQnVmLEdBQ2pIanBCLEVBQVMwSixjQUFjQyxPQUV6QixNQUFNc2hCLEVBQXVCM0MsR0FBa0JoYSxFQUFPNGMsZ0JBQWtCcmMsRUFBT3NjLDBCQUMxRXRjLEVBQU91YyxnQ0FBaUNILEdBQTBCaEMsRUFBU29DLG1CQUM5RXJJLEVBQUVzRixpQkFFQXpaLEVBQU95YyxVQUFZemMsRUFBT3ljLFNBQVNoVCxTQUFXaEssRUFBT2dkLFVBQVloZCxFQUFPb1UsWUFBYzdULEVBQU80SyxTQUMvRm5MLEVBQU9nZCxTQUFTL0MsZUFFbEJqYSxFQUFPMkcsS0FBSyxhQUFjK04sRUFDNUIsQ0FFQSxTQUFTdUksRUFBWXBYLEdBQ25CLE1BQU1uVSxFQUFXLElBQ1hzTyxFQUFTN08sS0FDVHlWLEVBQU81RyxFQUFPbVosaUJBQ2QsT0FDSjVZLEVBQU0sUUFDTmlhLEVBQ0E3USxhQUFjQyxFQUFHLFFBQ2pCSSxHQUNFaEssRUFDSixJQUFLZ0ssRUFBUyxPQUNkLElBQUt6SixFQUFPa2EsZUFBdUMsVUFBdEI1VSxFQUFNNlUsWUFBeUIsT0FDNUQsSUFPSXdDLEVBUEF4SSxFQUFJN08sRUFFUixHQURJNk8sRUFBRXdGLGdCQUFleEYsRUFBSUEsRUFBRXdGLGVBQ1osZ0JBQVh4RixFQUFFeGpCLEtBQXdCLENBQzVCLEdBQXFCLE9BQWpCMFYsRUFBS3lULFFBQWtCLE9BRTNCLEdBRFczRixFQUFFeUYsWUFDRnZULEVBQUt1VCxVQUFXLE1BQzdCLENBRUEsR0FBZSxjQUFYekYsRUFBRXhqQixNQUVKLEdBREFnc0IsRUFBYyxJQUFJeEksRUFBRXlJLGdCQUFnQjlwQixRQUFPa2lCLEdBQUtBLEVBQUUrRSxhQUFlMVQsRUFBS3lULFVBQVMsSUFDMUU2QyxHQUFlQSxFQUFZNUMsYUFBZTFULEVBQUt5VCxRQUFTLFlBRTdENkMsRUFBY3hJLEVBRWhCLElBQUs5TixFQUFLbVUsVUFJUixZQUhJblUsRUFBSzBWLGFBQWUxVixFQUFLeVYsYUFDM0JyYyxFQUFPMkcsS0FBSyxvQkFBcUIrTixJQUlyQyxNQUFNNkYsRUFBUTJDLEVBQVkzQyxNQUNwQjJCLEVBQVFnQixFQUFZaEIsTUFDMUIsR0FBSXhILEVBQUUwSSx3QkFHSixPQUZBNUMsRUFBUVgsT0FBU1UsT0FDakJDLEVBQVEyQixPQUFTRCxHQUduQixJQUFLbGMsRUFBTzRjLGVBYVYsT0FaS2xJLEVBQUU5YyxPQUFPM0QsUUFBUTJTLEVBQUs4VixxQkFDekIxYyxFQUFPOGIsWUFBYSxRQUVsQmxWLEVBQUttVSxZQUNQbmdCLE9BQU93TyxPQUFPb1IsRUFBUyxDQUNyQlgsT0FBUVUsRUFDUjRCLE9BQVFELEVBQ1JGLFNBQVV6QixFQUNWMEIsU0FBVUMsSUFFWnRWLEVBQUsyVixlQUFpQixNQUkxQixHQUFJaGMsRUFBTzhjLHNCQUF3QjljLEVBQU9vSSxLQUN4QyxHQUFJM0ksRUFBT2lKLGNBRVQsR0FBSWlULEVBQVExQixFQUFRMkIsUUFBVW5jLEVBQU9JLFdBQWFKLEVBQU9pUSxnQkFBa0JpTSxFQUFRMUIsRUFBUTJCLFFBQVVuYyxFQUFPSSxXQUFhSixFQUFPd1AsZUFHOUgsT0FGQTVJLEVBQUttVSxXQUFZLE9BQ2pCblUsRUFBS29VLFNBQVUsUUFHWixHQUFJVCxFQUFRQyxFQUFRWCxRQUFVN1osRUFBT0ksV0FBYUosRUFBT2lRLGdCQUFrQnNLLEVBQVFDLEVBQVFYLFFBQVU3WixFQUFPSSxXQUFhSixFQUFPd1AsZUFDckksT0FHSixHQUFJOWQsRUFBUzBKLGVBQ1BzWixFQUFFOWMsU0FBV2xHLEVBQVMwSixlQUFpQnNaLEVBQUU5YyxPQUFPM0QsUUFBUTJTLEVBQUs4VixtQkFHL0QsT0FGQTlWLEVBQUtvVSxTQUFVLE9BQ2ZoYixFQUFPOGIsWUFBYSxHQUlwQmxWLEVBQUt3VixxQkFDUHBjLEVBQU8yRyxLQUFLLFlBQWErTixHQUUzQjhGLEVBQVE4QyxVQUFZOUMsRUFBUXdCLFNBQzVCeEIsRUFBUStDLFVBQVkvQyxFQUFReUIsU0FDNUJ6QixFQUFRd0IsU0FBV3pCLEVBQ25CQyxFQUFReUIsU0FBV0MsRUFDbkIsTUFBTXNCLEVBQVFoRCxFQUFRd0IsU0FBV3hCLEVBQVFYLE9BQ25DNEQsRUFBUWpELEVBQVF5QixTQUFXekIsRUFBUTJCLE9BQ3pDLEdBQUluYyxFQUFPTyxPQUFPNlcsV0FBYWxXLEtBQUt3YyxLQUFLRixHQUFTLEVBQUlDLEdBQVMsR0FBS3pkLEVBQU9PLE9BQU82VyxVQUFXLE9BQzdGLFFBQWdDLElBQXJCeFEsRUFBS3lWLFlBQTZCLENBQzNDLElBQUlzQixFQUNBM2QsRUFBT2dKLGdCQUFrQndSLEVBQVF5QixXQUFhekIsRUFBUTJCLFFBQVVuYyxFQUFPaUosY0FBZ0J1UixFQUFRd0IsV0FBYXhCLEVBQVFYLE9BQ3RIalQsRUFBS3lWLGFBQWMsRUFHZm1CLEVBQVFBLEVBQVFDLEVBQVFBLEdBQVMsS0FDbkNFLEVBQTRELElBQS9DemMsS0FBSzBjLE1BQU0xYyxLQUFLbUwsSUFBSW9SLEdBQVF2YyxLQUFLbUwsSUFBSW1SLElBQWdCdGMsS0FBS0ssR0FDdkVxRixFQUFLeVYsWUFBY3JjLEVBQU9nSixlQUFpQjJVLEVBQWFwZCxFQUFPb2QsV0FBYSxHQUFLQSxFQUFhcGQsRUFBT29kLFdBRzNHLENBU0EsR0FSSS9XLEVBQUt5VixhQUNQcmMsRUFBTzJHLEtBQUssb0JBQXFCK04sUUFFSCxJQUFyQjlOLEVBQUswVixjQUNWOUIsRUFBUXdCLFdBQWF4QixFQUFRWCxRQUFVVyxFQUFReUIsV0FBYXpCLEVBQVEyQixTQUN0RXZWLEVBQUswVixhQUFjLElBR25CMVYsRUFBS3lWLFlBRVAsWUFEQXpWLEVBQUttVSxXQUFZLEdBR25CLElBQUtuVSxFQUFLMFYsWUFDUixPQUVGdGMsRUFBTzhiLFlBQWEsR0FDZnZiLEVBQU80SyxTQUFXdUosRUFBRW1KLFlBQ3ZCbkosRUFBRXNGLGlCQUVBelosRUFBT3VkLDJCQUE2QnZkLEVBQU93ZCxRQUM3Q3JKLEVBQUVzSixrQkFFSixJQUFJOUUsRUFBT2xaLEVBQU9nSixlQUFpQndVLEVBQVFDLEVBQ3ZDUSxFQUFjamUsRUFBT2dKLGVBQWlCd1IsRUFBUXdCLFNBQVd4QixFQUFROEMsVUFBWTlDLEVBQVF5QixTQUFXekIsRUFBUStDLFVBQ3hHaGQsRUFBTzJkLGlCQUNUaEYsRUFBT2hZLEtBQUttTCxJQUFJNk0sSUFBU3RQLEVBQU0sR0FBSyxHQUNwQ3FVLEVBQWMvYyxLQUFLbUwsSUFBSTRSLElBQWdCclUsRUFBTSxHQUFLLElBRXBENFEsRUFBUXRCLEtBQU9BLEVBQ2ZBLEdBQVEzWSxFQUFPNGQsV0FDWHZVLElBQ0ZzUCxHQUFRQSxFQUNSK0UsR0FBZUEsR0FFakIsTUFBTUcsRUFBdUJwZSxFQUFPcWUsaUJBQ3BDcmUsRUFBT3djLGVBQWlCdEQsRUFBTyxFQUFJLE9BQVMsT0FDNUNsWixFQUFPcWUsaUJBQW1CSixFQUFjLEVBQUksT0FBUyxPQUNyRCxNQUFNSyxFQUFTdGUsRUFBT08sT0FBT29JLE9BQVNwSSxFQUFPNEssUUFDdkNvVCxFQUEyQyxTQUE1QnZlLEVBQU9xZSxrQkFBK0JyZSxFQUFPbVYsZ0JBQThDLFNBQTVCblYsRUFBT3FlLGtCQUErQnJlLEVBQU9vVixlQUNqSSxJQUFLeE8sRUFBS29VLFFBQVMsQ0FRakIsR0FQSXNELEdBQVVDLEdBQ1p2ZSxFQUFPaVcsUUFBUSxDQUNickIsVUFBVzVVLEVBQU93YyxpQkFHdEI1VixFQUFLd1MsZUFBaUJwWixFQUFPdVQsZUFDN0J2VCxFQUFPd08sY0FBYyxHQUNqQnhPLEVBQU9vVSxVQUFXLENBQ3BCLE1BQU1vSyxFQUFNLElBQUk1cUIsT0FBTytFLFlBQVksZ0JBQWlCLENBQ2xEOGxCLFNBQVMsRUFDVFosWUFBWSxJQUVkN2QsRUFBT1MsVUFBVS9ILGNBQWM4bEIsRUFDakMsQ0FDQTVYLEVBQUs4WCxxQkFBc0IsR0FFdkJuZSxFQUFPb2UsYUFBeUMsSUFBMUIzZSxFQUFPbVYsaUJBQXFELElBQTFCblYsRUFBT29WLGdCQUNqRXBWLEVBQU80ZSxlQUFjLEdBRXZCNWUsRUFBTzJHLEtBQUssa0JBQW1CK04sRUFDakMsQ0FHQSxJQURBLElBQUl4WCxNQUFPOEQsVUFDUDRGLEVBQUtvVSxTQUFXcFUsRUFBSzZWLG9CQUFzQjJCLElBQXlCcGUsRUFBT3FlLGtCQUFvQkMsR0FBVUMsR0FBZ0JyZCxLQUFLbUwsSUFBSTZNLElBQVMsRUFVN0ksT0FUQXRlLE9BQU93TyxPQUFPb1IsRUFBUyxDQUNyQlgsT0FBUVUsRUFDUjRCLE9BQVFELEVBQ1JGLFNBQVV6QixFQUNWMEIsU0FBVUMsRUFDVjlDLGVBQWdCeFMsRUFBSzZNLG1CQUV2QjdNLEVBQUtpWSxlQUFnQixPQUNyQmpZLEVBQUt3UyxlQUFpQnhTLEVBQUs2TSxrQkFHN0J6VCxFQUFPMkcsS0FBSyxhQUFjK04sR0FDMUI5TixFQUFLb1UsU0FBVSxFQUNmcFUsRUFBSzZNLGlCQUFtQnlGLEVBQU90UyxFQUFLd1MsZUFDcEMsSUFBSTBGLEdBQXNCLEVBQ3RCQyxFQUFrQnhlLEVBQU93ZSxnQkFpRDdCLEdBaERJeGUsRUFBTzhjLHNCQUNUMEIsRUFBa0IsR0FFaEI3RixFQUFPLEdBQ0xvRixHQUFVQyxHQUE4QjNYLEVBQUs2VixvQkFBc0I3VixFQUFLNk0sa0JBQW9CbFQsRUFBTzJLLGVBQWlCbEwsRUFBT3dQLGVBQWlCeFAsRUFBT3FLLGdCQUFnQnJLLEVBQU9pSSxZQUFjLEdBQUtqSSxFQUFPd1AsaUJBQ3RNeFAsRUFBT2lXLFFBQVEsQ0FDYnJCLFVBQVcsT0FDWGxCLGNBQWMsRUFDZGQsaUJBQWtCLElBR2xCaE0sRUFBSzZNLGlCQUFtQnpULEVBQU93UCxpQkFDakNzUCxHQUFzQixFQUNsQnZlLEVBQU95ZSxhQUNUcFksRUFBSzZNLGlCQUFtQnpULEVBQU93UCxlQUFpQixJQUFNeFAsRUFBT3dQLGVBQWlCNUksRUFBS3dTLGVBQWlCRixJQUFTNkYsS0FHeEc3RixFQUFPLElBQ1pvRixHQUFVQyxHQUE4QjNYLEVBQUs2VixvQkFBc0I3VixFQUFLNk0sa0JBQW9CbFQsRUFBTzJLLGVBQWlCbEwsRUFBT2lRLGVBQWlCalEsRUFBT3FLLGdCQUFnQnJLLEVBQU9xSyxnQkFBZ0J4WSxPQUFTLEdBQUttTyxFQUFPaVEsaUJBQ2pOalEsRUFBT2lXLFFBQVEsQ0FDYnJCLFVBQVcsT0FDWGxCLGNBQWMsRUFDZGQsaUJBQWtCNVMsRUFBT3lILE9BQU81VixRQUFtQyxTQUF6QjBPLEVBQU91SCxjQUEyQjlILEVBQU8rSCx1QkFBeUI3RyxLQUFLOEcsS0FBS3JKLFdBQVc0QixFQUFPdUgsY0FBZSxRQUd2SmxCLEVBQUs2TSxpQkFBbUJ6VCxFQUFPaVEsaUJBQ2pDNk8sR0FBc0IsRUFDbEJ2ZSxFQUFPeWUsYUFDVHBZLEVBQUs2TSxpQkFBbUJ6VCxFQUFPaVEsZUFBaUIsR0FBS2pRLEVBQU9pUSxlQUFpQnJKLEVBQUt3UyxlQUFpQkYsSUFBUzZGLEtBSTlHRCxJQUNGcEssRUFBRTBJLHlCQUEwQixJQUl6QnBkLEVBQU9tVixnQkFBNEMsU0FBMUJuVixFQUFPd2MsZ0JBQTZCNVYsRUFBSzZNLGlCQUFtQjdNLEVBQUt3UyxpQkFDN0Z4UyxFQUFLNk0saUJBQW1CN00sRUFBS3dTLGlCQUUxQnBaLEVBQU9vVixnQkFBNEMsU0FBMUJwVixFQUFPd2MsZ0JBQTZCNVYsRUFBSzZNLGlCQUFtQjdNLEVBQUt3UyxpQkFDN0Z4UyxFQUFLNk0saUJBQW1CN00sRUFBS3dTLGdCQUUxQnBaLEVBQU9vVixnQkFBbUJwVixFQUFPbVYsaUJBQ3BDdk8sRUFBSzZNLGlCQUFtQjdNLEVBQUt3UyxnQkFJM0I3WSxFQUFPNlcsVUFBWSxFQUFHLENBQ3hCLEtBQUlsVyxLQUFLbUwsSUFBSTZNLEdBQVEzWSxFQUFPNlcsV0FBYXhRLEVBQUs2VixvQkFXNUMsWUFEQTdWLEVBQUs2TSxpQkFBbUI3TSxFQUFLd1MsZ0JBVDdCLElBQUt4UyxFQUFLNlYsbUJBTVIsT0FMQTdWLEVBQUs2VixvQkFBcUIsRUFDMUJqQyxFQUFRWCxPQUFTVyxFQUFRd0IsU0FDekJ4QixFQUFRMkIsT0FBUzNCLEVBQVF5QixTQUN6QnJWLEVBQUs2TSxpQkFBbUI3TSxFQUFLd1Msb0JBQzdCb0IsRUFBUXRCLEtBQU9sWixFQUFPZ0osZUFBaUJ3UixFQUFRd0IsU0FBV3hCLEVBQVFYLE9BQVNXLEVBQVF5QixTQUFXekIsRUFBUTJCLE9BTzVHLENBQ0s1YixFQUFPMGUsZUFBZ0IxZSxFQUFPNEssV0FHL0I1SyxFQUFPeWMsVUFBWXpjLEVBQU95YyxTQUFTaFQsU0FBV2hLLEVBQU9nZCxVQUFZemMsRUFBT3dOLHVCQUMxRS9OLEVBQU9pUyxvQkFDUGpTLEVBQU9nUix1QkFFTHpRLEVBQU95YyxVQUFZemMsRUFBT3ljLFNBQVNoVCxTQUFXaEssRUFBT2dkLFVBQ3ZEaGQsRUFBT2dkLFNBQVNDLGNBR2xCamQsRUFBTzhQLGVBQWVsSixFQUFLNk0sa0JBRTNCelQsRUFBTzBULGFBQWE5TSxFQUFLNk0sa0JBQzNCLENBRUEsU0FBU3lMLEVBQVdyWixHQUNsQixNQUFNN0YsRUFBUzdPLEtBQ1R5VixFQUFPNUcsRUFBT21aLGdCQUNwQixJQUVJK0QsRUFGQXhJLEVBQUk3TyxFQUNKNk8sRUFBRXdGLGdCQUFleEYsRUFBSUEsRUFBRXdGLGVBRzNCLEdBRGdDLGFBQVh4RixFQUFFeGpCLE1BQWtDLGdCQUFYd2pCLEVBQUV4akIsTUFPOUMsR0FEQWdzQixFQUFjLElBQUl4SSxFQUFFeUksZ0JBQWdCOXBCLFFBQU9raUIsR0FBS0EsRUFBRStFLGFBQWUxVCxFQUFLeVQsVUFBUyxJQUMxRTZDLEdBQWVBLEVBQVk1QyxhQUFlMVQsRUFBS3lULFFBQVMsV0FONUMsQ0FDakIsR0FBcUIsT0FBakJ6VCxFQUFLeVQsUUFBa0IsT0FDM0IsR0FBSTNGLEVBQUV5RixZQUFjdlQsRUFBS3VULFVBQVcsT0FDcEMrQyxFQUFjeEksQ0FDaEIsQ0FJQSxHQUFJLENBQUMsZ0JBQWlCLGFBQWMsZUFBZ0IsZUFBZTVQLFNBQVM0UCxFQUFFeGpCLE1BQU8sQ0FFbkYsS0FEZ0IsQ0FBQyxnQkFBaUIsZUFBZTRULFNBQVM0UCxFQUFFeGpCLFFBQVU4TyxFQUFPaUQsUUFBUTJCLFVBQVk1RSxFQUFPaUQsUUFBUWtDLFlBRTlHLE1BRUosQ0FDQXlCLEVBQUt1VCxVQUFZLEtBQ2pCdlQsRUFBS3lULFFBQVUsS0FDZixNQUFNLE9BQ0o5WixFQUFNLFFBQ05pYSxFQUNBN1EsYUFBY0MsRUFBRyxXQUNqQlEsRUFBVSxRQUNWSixHQUNFaEssRUFDSixJQUFLZ0ssRUFBUyxPQUNkLElBQUt6SixFQUFPa2EsZUFBbUMsVUFBbEIvRixFQUFFZ0csWUFBeUIsT0FLeEQsR0FKSTlULEVBQUt3VixxQkFDUHBjLEVBQU8yRyxLQUFLLFdBQVkrTixHQUUxQjlOLEVBQUt3VixxQkFBc0IsR0FDdEJ4VixFQUFLbVUsVUFNUixPQUxJblUsRUFBS29VLFNBQVd6YSxFQUFPb2UsWUFDekIzZSxFQUFPNGUsZUFBYyxHQUV2QmhZLEVBQUtvVSxTQUFVLE9BQ2ZwVSxFQUFLMFYsYUFBYyxHQUtqQi9iLEVBQU9vZSxZQUFjL1gsRUFBS29VLFNBQVdwVSxFQUFLbVUsYUFBd0MsSUFBMUIvYSxFQUFPbVYsaUJBQXFELElBQTFCblYsRUFBT29WLGlCQUNuR3BWLEVBQU80ZSxlQUFjLEdBSXZCLE1BQU1PLEVBQWUsSUFDZkMsRUFBV0QsRUFBZXZZLEVBQUsyVixlQUdyQyxHQUFJdmMsRUFBTzhiLFdBQVksQ0FDckIsTUFBTXVELEVBQVczSyxFQUFFekIsTUFBUXlCLEVBQUUwRyxjQUFnQjFHLEVBQUUwRyxlQUMvQ3BiLEVBQU9nVCxtQkFBbUJxTSxHQUFZQSxFQUFTLElBQU0zSyxFQUFFOWMsT0FBUXluQixHQUMvRHJmLEVBQU8yRyxLQUFLLFlBQWErTixHQUNyQjBLLEVBQVcsS0FBT0QsRUFBZXZZLEVBQUswWSxjQUFnQixLQUN4RHRmLEVBQU8yRyxLQUFLLHdCQUF5QitOLEVBRXpDLENBS0EsR0FKQTlOLEVBQUswWSxjQUFnQixJQUNyQixHQUFTLEtBQ0Z0ZixFQUFPMkYsWUFBVzNGLEVBQU84YixZQUFhLEVBQUksS0FFNUNsVixFQUFLbVUsWUFBY25VLEVBQUtvVSxVQUFZaGIsRUFBT3djLGdCQUFtQyxJQUFqQmhDLEVBQVF0QixPQUFldFMsRUFBS2lZLGVBQWlCalksRUFBSzZNLG1CQUFxQjdNLEVBQUt3UyxpQkFBbUJ4UyxFQUFLaVksY0FJcEssT0FIQWpZLEVBQUttVSxXQUFZLEVBQ2pCblUsRUFBS29VLFNBQVUsT0FDZnBVLEVBQUswVixhQUFjLEdBTXJCLElBQUlpRCxFQU1KLEdBVEEzWSxFQUFLbVUsV0FBWSxFQUNqQm5VLEVBQUtvVSxTQUFVLEVBQ2ZwVSxFQUFLMFYsYUFBYyxFQUdqQmlELEVBREVoZixFQUFPMGUsYUFDSXJWLEVBQU01SixFQUFPSSxXQUFhSixFQUFPSSxXQUVoQ3dHLEVBQUs2TSxpQkFFakJsVCxFQUFPNEssUUFDVCxPQUVGLEdBQUk1SyxFQUFPeWMsVUFBWXpjLEVBQU95YyxTQUFTaFQsUUFJckMsWUFIQWhLLEVBQU9nZCxTQUFTa0MsV0FBVyxDQUN6QkssZUFNSixJQUFJQyxFQUFZLEVBQ1p4UyxFQUFZaE4sRUFBT3FLLGdCQUFnQixHQUN2QyxJQUFLLElBQUl6WSxFQUFJLEVBQUdBLEVBQUl3WSxFQUFXdlksT0FBUUQsR0FBS0EsRUFBSTJPLEVBQU9nTSxtQkFBcUIsRUFBSWhNLEVBQU8rTCxlQUFnQixDQUNyRyxNQUFNZ0ssRUFBWTFrQixFQUFJMk8sRUFBT2dNLG1CQUFxQixFQUFJLEVBQUloTSxFQUFPK0wsb0JBQ3hCLElBQTlCbEMsRUFBV3hZLEVBQUkwa0IsR0FDcEJpSixHQUFjblYsRUFBV3hZLElBQU0ydEIsRUFBYW5WLEVBQVd4WSxFQUFJMGtCLEtBQzdEa0osRUFBWTV0QixFQUNab2IsRUFBWTVDLEVBQVd4WSxFQUFJMGtCLEdBQWFsTSxFQUFXeFksSUFFNUMydEIsR0FBY25WLEVBQVd4WSxLQUNsQzR0QixFQUFZNXRCLEVBQ1pvYixFQUFZNUMsRUFBV0EsRUFBV3ZZLE9BQVMsR0FBS3VZLEVBQVdBLEVBQVd2WSxPQUFTLEdBRW5GLENBQ0EsSUFBSTR0QixFQUFtQixLQUNuQkMsRUFBa0IsS0FDbEJuZixFQUFPbUksU0FDTDFJLEVBQU9rUSxZQUNUd1AsRUFBa0JuZixFQUFPd0osU0FBV3hKLEVBQU93SixRQUFRQyxTQUFXaEssRUFBTytKLFFBQVUvSixFQUFPK0osUUFBUXRDLE9BQU81VixPQUFTLEVBQUltTyxFQUFPeUgsT0FBTzVWLE9BQVMsRUFDaEltTyxFQUFPbVEsUUFDaEJzUCxFQUFtQixJQUl2QixNQUFNRSxHQUFTSixFQUFhblYsRUFBV29WLElBQWN4UyxFQUMvQ3NKLEVBQVlrSixFQUFZamYsRUFBT2dNLG1CQUFxQixFQUFJLEVBQUloTSxFQUFPK0wsZUFDekUsR0FBSThTLEVBQVc3ZSxFQUFPcWYsYUFBYyxDQUVsQyxJQUFLcmYsRUFBT3NmLFdBRVYsWUFEQTdmLEVBQU84VSxRQUFROVUsRUFBT2lJLGFBR00sU0FBMUJqSSxFQUFPd2MsaUJBQ0xtRCxHQUFTcGYsRUFBT3VmLGdCQUFpQjlmLEVBQU84VSxRQUFRdlUsRUFBT21JLFFBQVUxSSxFQUFPbVEsTUFBUXNQLEVBQW1CRCxFQUFZbEosR0FBZ0J0VyxFQUFPOFUsUUFBUTBLLElBRXRILFNBQTFCeGYsRUFBT3djLGlCQUNMbUQsRUFBUSxFQUFJcGYsRUFBT3VmLGdCQUNyQjlmLEVBQU84VSxRQUFRMEssRUFBWWxKLEdBQ0UsT0FBcEJvSixHQUE0QkMsRUFBUSxHQUFLemUsS0FBS21MLElBQUlzVCxHQUFTcGYsRUFBT3VmLGdCQUMzRTlmLEVBQU84VSxRQUFRNEssR0FFZjFmLEVBQU84VSxRQUFRMEssR0FHckIsS0FBTyxDQUVMLElBQUtqZixFQUFPd2YsWUFFVixZQURBL2YsRUFBTzhVLFFBQVE5VSxFQUFPaUksYUFHRWpJLEVBQU9nZ0IsYUFBZXRMLEVBQUU5YyxTQUFXb0ksRUFBT2dnQixXQUFXQyxRQUFVdkwsRUFBRTljLFNBQVdvSSxFQUFPZ2dCLFdBQVdFLFFBUTdHeEwsRUFBRTljLFNBQVdvSSxFQUFPZ2dCLFdBQVdDLE9BQ3hDamdCLEVBQU84VSxRQUFRMEssRUFBWWxKLEdBRTNCdFcsRUFBTzhVLFFBQVEwSyxJQVRlLFNBQTFCeGYsRUFBT3djLGdCQUNUeGMsRUFBTzhVLFFBQTZCLE9BQXJCMkssRUFBNEJBLEVBQW1CRCxFQUFZbEosR0FFOUMsU0FBMUJ0VyxFQUFPd2MsZ0JBQ1R4YyxFQUFPOFUsUUFBNEIsT0FBcEI0SyxFQUEyQkEsRUFBa0JGLEdBT2xFLENBQ0YsQ0FFQSxTQUFTVyxJQUNQLE1BQU1uZ0IsRUFBUzdPLE1BQ1QsT0FDSm9QLEVBQU0sR0FDTnZLLEdBQ0VnSyxFQUNKLEdBQUloSyxHQUF5QixJQUFuQkEsRUFBRzhNLFlBQW1CLE9BRzVCdkMsRUFBT2tMLGFBQ1R6TCxFQUFPb2dCLGdCQUlULE1BQU0sZUFDSmpMLEVBQWMsZUFDZEMsRUFBYyxTQUNkakwsR0FDRW5LLEVBQ0U4SixFQUFZOUosRUFBTytKLFNBQVcvSixFQUFPTyxPQUFPd0osUUFBUUMsUUFHMURoSyxFQUFPbVYsZ0JBQWlCLEVBQ3hCblYsRUFBT29WLGdCQUFpQixFQUN4QnBWLEVBQU82SSxhQUNQN0ksRUFBT3FKLGVBQ1BySixFQUFPZ1Isc0JBQ1AsTUFBTXFQLEVBQWdCdlcsR0FBYXZKLEVBQU9vSSxPQUNaLFNBQXpCcEksRUFBT3VILGVBQTRCdkgsRUFBT3VILGNBQWdCLEtBQU05SCxFQUFPbVEsT0FBVW5RLEVBQU9rUSxhQUFnQmxRLEVBQU9PLE9BQU8ySyxnQkFBbUJtVixFQUd4SXJnQixFQUFPTyxPQUFPb0ksT0FBU21CLEVBQ3pCOUosRUFBTzRWLFlBQVk1VixFQUFPNEksVUFBVyxHQUFHLEdBQU8sR0FFL0M1SSxFQUFPOFUsUUFBUTlVLEVBQU9pSSxZQUFhLEdBQUcsR0FBTyxHQUwvQ2pJLEVBQU84VSxRQUFROVUsRUFBT3lILE9BQU81VixPQUFTLEVBQUcsR0FBRyxHQUFPLEdBUWpEbU8sRUFBT3NnQixVQUFZdGdCLEVBQU9zZ0IsU0FBU0MsU0FBV3ZnQixFQUFPc2dCLFNBQVNFLFNBQ2hFcGpCLGFBQWE0QyxFQUFPc2dCLFNBQVNHLGVBQzdCemdCLEVBQU9zZ0IsU0FBU0csY0FBZ0JycEIsWUFBVyxLQUNyQzRJLEVBQU9zZ0IsVUFBWXRnQixFQUFPc2dCLFNBQVNDLFNBQVd2Z0IsRUFBT3NnQixTQUFTRSxRQUNoRXhnQixFQUFPc2dCLFNBQVNJLFFBQ2xCLEdBQ0MsTUFHTDFnQixFQUFPb1YsZUFBaUJBLEVBQ3hCcFYsRUFBT21WLGVBQWlCQSxFQUNwQm5WLEVBQU9PLE9BQU9zTixlQUFpQjFELElBQWFuSyxFQUFPbUssVUFDckRuSyxFQUFPOE4sZUFFWCxDQUVBLFNBQVM2UyxFQUFRak0sR0FDZixNQUFNMVUsRUFBUzdPLEtBQ1Y2TyxFQUFPZ0ssVUFDUGhLLEVBQU84YixhQUNOOWIsRUFBT08sT0FBT3FnQixlQUFlbE0sRUFBRXNGLGlCQUMvQmhhLEVBQU9PLE9BQU9zZ0IsMEJBQTRCN2dCLEVBQU9vVSxZQUNuRE0sRUFBRXNKLGtCQUNGdEosRUFBRW9NLDZCQUdSLENBRUEsU0FBU0MsSUFDUCxNQUFNL2dCLEVBQVM3TyxNQUNULFVBQ0pzUCxFQUFTLGFBQ1RrSixFQUFZLFFBQ1pLLEdBQ0VoSyxFQUNKLElBQUtnSyxFQUFTLE9BV2QsSUFBSTRKLEVBVko1VCxFQUFPK1Qsa0JBQW9CL1QsRUFBT0ksVUFDOUJKLEVBQU9nSixlQUNUaEosRUFBT0ksV0FBYUssRUFBVXVnQixXQUU5QmhoQixFQUFPSSxXQUFhSyxFQUFVd2dCLFVBR1AsSUFBckJqaEIsRUFBT0ksWUFBaUJKLEVBQU9JLFVBQVksR0FDL0NKLEVBQU9pUyxvQkFDUGpTLEVBQU9nUixzQkFFUCxNQUFNaEIsRUFBaUJoUSxFQUFPaVEsZUFBaUJqUSxFQUFPd1AsZUFFcERvRSxFQURxQixJQUFuQjVELEVBQ1ksR0FFQ2hRLEVBQU9JLFVBQVlKLEVBQU93UCxnQkFBa0JRLEVBRXpENEQsSUFBZ0I1VCxFQUFPaUIsVUFDekJqQixFQUFPOFAsZUFBZW5HLEdBQWdCM0osRUFBT0ksVUFBWUosRUFBT0ksV0FFbEVKLEVBQU8yRyxLQUFLLGVBQWdCM0csRUFBT0ksV0FBVyxFQUNoRCxDQUVBLFNBQVM4Z0IsR0FBT3hNLEdBQ2QsTUFBTTFVLEVBQVM3TyxLQUNmOFYsRUFBcUJqSCxFQUFRMFUsRUFBRTljLFFBQzNCb0ksRUFBT08sT0FBTzRLLFNBQTJDLFNBQWhDbkwsRUFBT08sT0FBT3VILGdCQUE2QjlILEVBQU9PLE9BQU93USxZQUd0Ri9RLEVBQU8zSixRQUNULENBRUEsU0FBUzhxQixLQUNQLE1BQU1uaEIsRUFBUzdPLEtBQ1g2TyxFQUFPb2hCLGdDQUNYcGhCLEVBQU9vaEIsK0JBQWdDLEVBQ25DcGhCLEVBQU9PLE9BQU84YyxzQkFDaEJyZCxFQUFPaEssR0FBRzhCLE1BQU11cEIsWUFBYyxRQUVsQyxDQUVBLE1BQU05YixHQUFTLENBQUN2RixFQUFRNEYsS0FDdEIsTUFBTWxVLEVBQVcsS0FDWCxPQUNKNk8sRUFBTSxHQUNOdkssRUFBRSxVQUNGeUssRUFBUyxPQUNUbUQsR0FDRTVELEVBQ0VzaEIsSUFBWS9nQixFQUFPd2QsT0FDbkJ3RCxFQUF1QixPQUFYM2IsRUFBa0IsbUJBQXFCLHNCQUNuRDRiLEVBQWU1YixFQUdyQmxVLEVBQVM2dkIsR0FBVyxhQUFjdmhCLEVBQU9taEIscUJBQXNCLENBQzdETSxTQUFTLEVBQ1RILFlBRUZ0ckIsRUFBR3VyQixHQUFXLGFBQWN2aEIsRUFBT2lhLGFBQWMsQ0FDL0N3SCxTQUFTLElBRVh6ckIsRUFBR3VyQixHQUFXLGNBQWV2aEIsRUFBT2lhLGFBQWMsQ0FDaER3SCxTQUFTLElBRVgvdkIsRUFBUzZ2QixHQUFXLFlBQWF2aEIsRUFBT2lkLFlBQWEsQ0FDbkR3RSxTQUFTLEVBQ1RILFlBRUY1dkIsRUFBUzZ2QixHQUFXLGNBQWV2aEIsRUFBT2lkLFlBQWEsQ0FDckR3RSxTQUFTLEVBQ1RILFlBRUY1dkIsRUFBUzZ2QixHQUFXLFdBQVl2aEIsRUFBT2tmLFdBQVksQ0FDakR1QyxTQUFTLElBRVgvdkIsRUFBUzZ2QixHQUFXLFlBQWF2aEIsRUFBT2tmLFdBQVksQ0FDbER1QyxTQUFTLElBRVgvdkIsRUFBUzZ2QixHQUFXLGdCQUFpQnZoQixFQUFPa2YsV0FBWSxDQUN0RHVDLFNBQVMsSUFFWC92QixFQUFTNnZCLEdBQVcsY0FBZXZoQixFQUFPa2YsV0FBWSxDQUNwRHVDLFNBQVMsSUFFWC92QixFQUFTNnZCLEdBQVcsYUFBY3ZoQixFQUFPa2YsV0FBWSxDQUNuRHVDLFNBQVMsSUFFWC92QixFQUFTNnZCLEdBQVcsZUFBZ0J2aEIsRUFBT2tmLFdBQVksQ0FDckR1QyxTQUFTLElBRVgvdkIsRUFBUzZ2QixHQUFXLGNBQWV2aEIsRUFBT2tmLFdBQVksQ0FDcER1QyxTQUFTLEtBSVBsaEIsRUFBT3FnQixlQUFpQnJnQixFQUFPc2dCLDJCQUNqQzdxQixFQUFHdXJCLEdBQVcsUUFBU3ZoQixFQUFPMmdCLFNBQVMsR0FFckNwZ0IsRUFBTzRLLFNBQ1QxSyxFQUFVOGdCLEdBQVcsU0FBVXZoQixFQUFPK2dCLFVBSXBDeGdCLEVBQU9taEIscUJBQ1QxaEIsRUFBT3doQixHQUFjNWQsRUFBT0MsS0FBT0QsRUFBT0UsUUFBVSwwQ0FBNEMsd0JBQXlCcWMsR0FBVSxHQUVuSW5nQixFQUFPd2hCLEdBQWMsaUJBQWtCckIsR0FBVSxHQUluRG5xQixFQUFHdXJCLEdBQVcsT0FBUXZoQixFQUFPa2hCLE9BQVEsQ0FDbkNJLFNBQVMsR0FDVCxFQTJCSixNQUFNSyxHQUFnQixDQUFDM2hCLEVBQVFPLElBQ3RCUCxFQUFPa0ksTUFBUTNILEVBQU8ySCxNQUFRM0gsRUFBTzJILEtBQUtDLEtBQU8sRUEyTjFELElBSUl5WixHQUFXLENBQ2J2d0IsTUFBTSxFQUNOdWpCLFVBQVcsYUFDWHNKLGdCQUFnQixFQUNoQnRELGtCQUFtQixVQUNuQmxGLGFBQWMsRUFDZGxWLE1BQU8sSUFDUDJLLFNBQVMsRUFDVHVXLHNCQUFzQixFQUN0QkcsZ0JBQWdCLEVBQ2hCOUQsUUFBUSxFQUNSK0QsZ0JBQWdCLEVBQ2hCQyxhQUFjLFNBQ2QvWCxTQUFTLEVBQ1QwUyxrQkFBbUIsd0RBRW5CMVksTUFBTyxLQUNQL0wsT0FBUSxLQUVSb2MsZ0NBQWdDLEVBRWhDNVgsVUFBVyxLQUNYdWxCLElBQUssS0FFTGxJLG9CQUFvQixFQUNwQkMsbUJBQW9CLEdBRXBCaEosWUFBWSxFQUVadEUsZ0JBQWdCLEVBRWhCK0csa0JBQWtCLEVBRWxCaEgsT0FBUSxRQUlSZixpQkFBYS9XLEVBQ2J1dEIsZ0JBQWlCLFNBRWpCclgsYUFBYyxFQUNkOUMsY0FBZSxFQUNmd0UsZUFBZ0IsRUFDaEJDLG1CQUFvQixFQUNwQjhKLG9CQUFvQixFQUNwQm5MLGdCQUFnQixFQUNoQmdDLHNCQUFzQixFQUN0QjNDLG1CQUFvQixFQUVwQkUsa0JBQW1CLEVBRW5CK0gscUJBQXFCLEVBQ3JCakYsMEJBQTBCLEVBRTFCTSxlQUFlLEVBRWY5QixjQUFjLEVBRWRvUyxXQUFZLEVBQ1pSLFdBQVksR0FDWmxELGVBQWUsRUFDZnNGLGFBQWEsRUFDYkYsWUFBWSxFQUNaQyxnQkFBaUIsR0FDakJGLGFBQWMsSUFDZFgsY0FBYyxFQUNkckMsZ0JBQWdCLEVBQ2hCeEYsVUFBVyxFQUNYMEcsMEJBQTBCLEVBQzFCakIsMEJBQTBCLEVBQzFCQywrQkFBK0IsRUFDL0JPLHFCQUFxQixFQUVyQjZFLG1CQUFtQixFQUVuQmxELFlBQVksRUFDWkQsZ0JBQWlCLElBRWpCaFIscUJBQXFCLEVBRXJCNFEsWUFBWSxFQUVaaUMsZUFBZSxFQUNmQywwQkFBMEIsRUFDMUJ2TixxQkFBcUIsRUFFckIzSyxNQUFNLEVBQ05zUCxvQkFBb0IsRUFDcEJHLHFCQUFzQixFQUN0QjdCLHFCQUFxQixFQUVyQjdOLFFBQVEsRUFFUjBNLGdCQUFnQixFQUNoQkQsZ0JBQWdCLEVBQ2hCNEcsYUFBYyxLQUVkUixXQUFXLEVBQ1hMLGVBQWdCLG9CQUNoQkcsa0JBQW1CLEtBRW5COEcsa0JBQWtCLEVBQ2xCL1Qsd0JBQXlCLEdBRXpCRix1QkFBd0IsVUFFeEI3RyxXQUFZLGVBQ1owUSxnQkFBaUIscUJBQ2pCMUcsaUJBQWtCLHNCQUNsQmxDLGtCQUFtQix1QkFDbkJDLHVCQUF3Qiw2QkFDeEJrQyxlQUFnQixvQkFDaEJDLGVBQWdCLG9CQUNoQjZRLGFBQWMsaUJBQ2Q3YSxtQkFBb0Isd0JBQ3BCTSxvQkFBcUIsRUFFckJrTCxvQkFBb0IsRUFFcEJzUCxjQUFjLEdBR2hCLFNBQVNDLEdBQW1CL2hCLEVBQVFnaUIsR0FDbEMsT0FBTyxTQUFzQjduQixRQUNmLElBQVJBLElBQ0ZBLEVBQU0sQ0FBQyxHQUVULE1BQU04bkIsRUFBa0I1bkIsT0FBT0UsS0FBS0osR0FBSyxHQUNuQytuQixFQUFlL25CLEVBQUk4bkIsR0FDRyxpQkFBakJDLEdBQThDLE9BQWpCQSxJQUlSLElBQTVCbGlCLEVBQU9paUIsS0FDVGppQixFQUFPaWlCLEdBQW1CLENBQ3hCeFksU0FBUyxJQUdXLGVBQXBCd1ksR0FBb0NqaUIsRUFBT2lpQixJQUFvQmppQixFQUFPaWlCLEdBQWlCeFksVUFBWXpKLEVBQU9paUIsR0FBaUJ0QyxTQUFXM2YsRUFBT2lpQixHQUFpQnZDLFNBQ2hLMWYsRUFBT2lpQixHQUFpQkUsTUFBTyxHQUU3QixDQUFDLGFBQWMsYUFBYW52QixRQUFRaXZCLElBQW9CLEdBQUtqaUIsRUFBT2lpQixJQUFvQmppQixFQUFPaWlCLEdBQWlCeFksVUFBWXpKLEVBQU9paUIsR0FBaUJ4c0IsS0FDdEp1SyxFQUFPaWlCLEdBQWlCRSxNQUFPLEdBRTNCRixLQUFtQmppQixHQUFVLFlBQWFraUIsR0FJVCxpQkFBNUJsaUIsRUFBT2lpQixJQUFtQyxZQUFhamlCLEVBQU9paUIsS0FDdkVqaUIsRUFBT2lpQixHQUFpQnhZLFNBQVUsR0FFL0J6SixFQUFPaWlCLEtBQWtCamlCLEVBQU9paUIsR0FBbUIsQ0FDdER4WSxTQUFTLElBRVgsRUFBT3VZLEVBQWtCN25CLElBVHZCLEVBQU82bkIsRUFBa0I3bkIsSUFmekIsRUFBTzZuQixFQUFrQjduQixFQXlCN0IsQ0FDRixDQUdBLE1BQU1pb0IsR0FBYSxDQUNqQnRkLGdCQUNBaFAsU0FDQStKLFlBQ0F3aUIsV0E3MkRlLENBQ2ZwVSxjQS9FRixTQUF1QmxZLEVBQVVxZCxHQUMvQixNQUFNM1QsRUFBUzdPLEtBQ1Y2TyxFQUFPTyxPQUFPNEssVUFDakJuTCxFQUFPUyxVQUFVM0ksTUFBTUUsbUJBQXFCLEdBQUcxQixNQUMvQzBKLEVBQU9TLFVBQVUzSSxNQUFNK3FCLGdCQUErQixJQUFidnNCLEVBQWlCLE1BQVEsSUFFcEUwSixFQUFPMkcsS0FBSyxnQkFBaUJyUSxFQUFVcWQsRUFDekMsRUF5RUUwQixnQkF6Q0YsU0FBeUJwQixFQUFjVyxRQUNoQixJQUFqQlgsSUFDRkEsR0FBZSxHQUVqQixNQUFNalUsRUFBUzdPLE1BQ1QsT0FDSm9QLEdBQ0VQLEVBQ0FPLEVBQU80SyxVQUNQNUssRUFBT3dRLFlBQ1QvUSxFQUFPcU8sbUJBRVRzRyxFQUFlLENBQ2IzVSxTQUNBaVUsZUFDQVcsWUFDQUMsS0FBTSxVQUVWLEVBd0JFUyxjQXRCRixTQUF1QnJCLEVBQWNXLFFBQ2QsSUFBakJYLElBQ0ZBLEdBQWUsR0FFakIsTUFBTWpVLEVBQVM3TyxNQUNULE9BQ0pvUCxHQUNFUCxFQUNKQSxFQUFPb1UsV0FBWSxFQUNmN1QsRUFBTzRLLFVBQ1huTCxFQUFPd08sY0FBYyxHQUNyQm1HLEVBQWUsQ0FDYjNVLFNBQ0FpVSxlQUNBVyxZQUNBQyxLQUFNLFFBRVYsR0FnM0RFbkosUUFDQS9DLE9BQ0FnVyxXQWxvQ2UsQ0FDZkMsY0FqQ0YsU0FBdUJrRSxHQUNyQixNQUFNOWlCLEVBQVM3TyxLQUNmLElBQUs2TyxFQUFPTyxPQUFPa2EsZUFBaUJ6YSxFQUFPTyxPQUFPc04sZUFBaUI3TixFQUFPK2lCLFVBQVkvaUIsRUFBT08sT0FBTzRLLFFBQVMsT0FDN0csTUFBTW5WLEVBQXlDLGNBQXBDZ0ssRUFBT08sT0FBT3FhLGtCQUFvQzVhLEVBQU9oSyxHQUFLZ0ssRUFBT1MsVUFDNUVULEVBQU9vSCxZQUNUcEgsRUFBTzhZLHFCQUFzQixHQUUvQjlpQixFQUFHOEIsTUFBTWtyQixPQUFTLE9BQ2xCaHRCLEVBQUc4QixNQUFNa3JCLE9BQVNGLEVBQVMsV0FBYSxPQUNwQzlpQixFQUFPb0gsV0FDVC9KLHVCQUFzQixLQUNwQjJDLEVBQU84WSxxQkFBc0IsQ0FBSyxHQUd4QyxFQW9CRW1LLGdCQWxCRixXQUNFLE1BQU1qakIsRUFBUzdPLEtBQ1g2TyxFQUFPTyxPQUFPc04sZUFBaUI3TixFQUFPK2lCLFVBQVkvaUIsRUFBT08sT0FBTzRLLFVBR2hFbkwsRUFBT29ILFlBQ1RwSCxFQUFPOFkscUJBQXNCLEdBRS9COVksRUFBMkMsY0FBcENBLEVBQU9PLE9BQU9xYSxrQkFBb0MsS0FBTyxhQUFhOWlCLE1BQU1rckIsT0FBUyxHQUN4RmhqQixFQUFPb0gsV0FDVC9KLHVCQUFzQixLQUNwQjJDLEVBQU84WSxxQkFBc0IsQ0FBSyxJQUd4QyxHQXFvQ0V2VCxPQTVZYSxDQUNiMmQsYUFyQkYsV0FDRSxNQUFNbGpCLEVBQVM3TyxNQUNULE9BQ0pvUCxHQUNFUCxFQUNKQSxFQUFPaWEsYUFBZUEsRUFBYWtKLEtBQUtuakIsR0FDeENBLEVBQU9pZCxZQUFjQSxFQUFZa0csS0FBS25qQixHQUN0Q0EsRUFBT2tmLFdBQWFBLEVBQVdpRSxLQUFLbmpCLEdBQ3BDQSxFQUFPbWhCLHFCQUF1QkEsR0FBcUJnQyxLQUFLbmpCLEdBQ3BETyxFQUFPNEssVUFDVG5MLEVBQU8rZ0IsU0FBV0EsRUFBU29DLEtBQUtuakIsSUFFbENBLEVBQU8yZ0IsUUFBVUEsRUFBUXdDLEtBQUtuakIsR0FDOUJBLEVBQU9raEIsT0FBU0EsR0FBT2lDLEtBQUtuakIsR0FDNUJ1RixHQUFPdkYsRUFBUSxLQUNqQixFQU9Fb2pCLGFBTkYsV0FFRTdkLEdBRGVwVSxLQUNBLE1BQ2pCLEdBOFlFc2EsWUFoUmdCLENBQ2hCMlUsY0F0SEYsV0FDRSxNQUFNcGdCLEVBQVM3TyxNQUNULFVBQ0p5WCxFQUFTLFlBQ1RrSyxFQUFXLE9BQ1h2UyxFQUFNLEdBQ052SyxHQUNFZ0ssRUFDRXlMLEVBQWNsTCxFQUFPa0wsWUFDM0IsSUFBS0EsR0FBZUEsR0FBbUQsSUFBcEM3USxPQUFPRSxLQUFLMlEsR0FBYTVaLE9BQWMsT0FHMUUsTUFBTWEsRUFBYXNOLEVBQU9xakIsY0FBYzVYLEVBQWF6TCxFQUFPTyxPQUFPMGhCLGdCQUFpQmppQixFQUFPaEssSUFDM0YsSUFBS3RELEdBQWNzTixFQUFPc2pCLG9CQUFzQjV3QixFQUFZLE9BQzVELE1BQ002d0IsR0FEdUI3d0IsS0FBYytZLEVBQWNBLEVBQVkvWSxRQUFjZ0MsSUFDbENzTCxFQUFPd2pCLGVBQ2xEQyxFQUFjOUIsR0FBYzNoQixFQUFRTyxHQUNwQ21qQixFQUFhL0IsR0FBYzNoQixFQUFRdWpCLEdBQ25DSSxFQUFhcGpCLEVBQU95SixRQUN0QnlaLElBQWdCQyxHQUNsQjF0QixFQUFHN0IsVUFBVU0sT0FBTyxHQUFHOEwsRUFBTzJOLDZCQUE4QixHQUFHM04sRUFBTzJOLHFDQUN0RWxPLEVBQU80akIseUJBQ0dILEdBQWVDLElBQ3pCMXRCLEVBQUc3QixVQUFVRyxJQUFJLEdBQUdpTSxFQUFPMk4sK0JBQ3ZCcVYsRUFBaUJyYixLQUFLbVEsTUFBdUMsV0FBL0JrTCxFQUFpQnJiLEtBQUttUSxPQUFzQmtMLEVBQWlCcmIsS0FBS21RLE1BQTZCLFdBQXJCOVgsRUFBTzJILEtBQUttUSxPQUN0SHJpQixFQUFHN0IsVUFBVUcsSUFBSSxHQUFHaU0sRUFBTzJOLHFDQUU3QmxPLEVBQU80akIsd0JBSVQsQ0FBQyxhQUFjLGFBQWMsYUFBYXhxQixTQUFRbUosSUFDaEQsUUFBc0MsSUFBM0JnaEIsRUFBaUJoaEIsR0FBdUIsT0FDbkQsTUFBTXNoQixFQUFtQnRqQixFQUFPZ0MsSUFBU2hDLEVBQU9nQyxHQUFNeUgsUUFDaEQ4WixFQUFrQlAsRUFBaUJoaEIsSUFBU2doQixFQUFpQmhoQixHQUFNeUgsUUFDckU2WixJQUFxQkMsR0FDdkI5akIsRUFBT3VDLEdBQU13aEIsV0FFVkYsR0FBb0JDLEdBQ3ZCOWpCLEVBQU91QyxHQUFNeWhCLFFBQ2YsSUFFRixNQUFNQyxFQUFtQlYsRUFBaUIzTyxXQUFhMk8sRUFBaUIzTyxZQUFjclUsRUFBT3FVLFVBQ3ZGc1AsRUFBYzNqQixFQUFPb0ksT0FBUzRhLEVBQWlCemIsZ0JBQWtCdkgsRUFBT3VILGVBQWlCbWMsR0FDekZFLEVBQVU1akIsRUFBT29JLEtBQ25Cc2IsR0FBb0JuUixHQUN0QjlTLEVBQU9va0Isa0JBRVQsRUFBT3BrQixFQUFPTyxPQUFRZ2pCLEdBQ3RCLE1BQU1jLEVBQVlya0IsRUFBT08sT0FBT3lKLFFBQzFCc2EsRUFBVXRrQixFQUFPTyxPQUFPb0ksS0FDOUIvTixPQUFPd08sT0FBT3BKLEVBQVEsQ0FDcEI0YyxlQUFnQjVjLEVBQU9PLE9BQU9xYyxlQUM5QnpILGVBQWdCblYsRUFBT08sT0FBTzRVLGVBQzlCQyxlQUFnQnBWLEVBQU9PLE9BQU82VSxpQkFFNUJ1TyxJQUFlVSxFQUNqQnJrQixFQUFPK2pCLFdBQ0dKLEdBQWNVLEdBQ3hCcmtCLEVBQU9na0IsU0FFVGhrQixFQUFPc2pCLGtCQUFvQjV3QixFQUMzQnNOLEVBQU8yRyxLQUFLLG9CQUFxQjRjLEdBQzdCelEsSUFDRW9SLEdBQ0Zsa0IsRUFBT3laLGNBQ1B6WixFQUFPMFgsV0FBVzlPLEdBQ2xCNUksRUFBT3FKLGlCQUNHOGEsR0FBV0csR0FDckJ0a0IsRUFBTzBYLFdBQVc5TyxHQUNsQjVJLEVBQU9xSixnQkFDRThhLElBQVlHLEdBQ3JCdGtCLEVBQU95WixlQUdYelosRUFBTzJHLEtBQUssYUFBYzRjLEVBQzVCLEVBMkNFRixjQXpDRixTQUF1QjVYLEVBQWErUCxFQUFNK0ksR0FJeEMsUUFIYSxJQUFUL0ksSUFDRkEsRUFBTyxXQUVKL1AsR0FBd0IsY0FBVCtQLElBQXlCK0ksRUFBYSxPQUMxRCxJQUFJN3hCLEdBQWEsRUFDakIsTUFBTWtCLEVBQVMsSUFDVDR3QixFQUF5QixXQUFUaEosRUFBb0I1bkIsRUFBTzZ3QixZQUFjRixFQUFZeGIsYUFDckUyYixFQUFTOXBCLE9BQU9FLEtBQUsyUSxHQUFhdlksS0FBSXl4QixJQUMxQyxHQUFxQixpQkFBVkEsR0FBNkMsSUFBdkJBLEVBQU1weEIsUUFBUSxLQUFZLENBQ3pELE1BQU1xeEIsRUFBV2ptQixXQUFXZ21CLEVBQU1FLE9BQU8sSUFFekMsTUFBTyxDQUNMbHJCLE1BRlk2cUIsRUFBZ0JJLEVBRzVCRCxRQUVKLENBQ0EsTUFBTyxDQUNMaHJCLE1BQU9nckIsRUFDUEEsUUFDRCxJQUVIRCxFQUFPNXZCLE1BQUssQ0FBQ0MsRUFBR0MsSUFBTWtVLFNBQVNuVSxFQUFFNEUsTUFBTyxJQUFNdVAsU0FBU2xVLEVBQUUyRSxNQUFPLE1BQ2hFLElBQUssSUFBSS9ILEVBQUksRUFBR0EsRUFBSTh5QixFQUFPN3lCLE9BQVFELEdBQUssRUFBRyxDQUN6QyxNQUFNLE1BQ0oreUIsRUFBSyxNQUNMaHJCLEdBQ0UrcUIsRUFBTzl5QixHQUNFLFdBQVQ0cEIsRUFDRTVuQixFQUFPRCxXQUFXLGVBQWVnRyxRQUFZMUYsVUFDL0N2QixFQUFhaXlCLEdBRU5ockIsR0FBUzRxQixFQUFZemIsY0FDOUJwVyxFQUFhaXlCLEVBRWpCLENBQ0EsT0FBT2p5QixHQUFjLEtBQ3ZCLEdBbVJFb2IsY0E3S29CLENBQ3BCQSxjQTlCRixXQUNFLE1BQU05TixFQUFTN08sTUFFYjR4QixTQUFVK0IsRUFBUyxPQUNuQnZrQixHQUNFUCxHQUNFLG1CQUNKdUssR0FDRWhLLEVBQ0osR0FBSWdLLEVBQW9CLENBQ3RCLE1BQU1tRyxFQUFpQjFRLEVBQU95SCxPQUFPNVYsT0FBUyxFQUN4Q2t6QixFQUFxQi9rQixFQUFPb0ssV0FBV3NHLEdBQWtCMVEsRUFBT3FLLGdCQUFnQnFHLEdBQXVDLEVBQXJCbkcsRUFDeEd2SyxFQUFPK2lCLFNBQVcvaUIsRUFBTzRDLEtBQU9taUIsQ0FDbEMsTUFDRS9rQixFQUFPK2lCLFNBQXNDLElBQTNCL2lCLEVBQU9tSyxTQUFTdFksUUFFTixJQUExQjBPLEVBQU80VSxpQkFDVG5WLEVBQU9tVixnQkFBa0JuVixFQUFPK2lCLFdBRUosSUFBMUJ4aUIsRUFBTzZVLGlCQUNUcFYsRUFBT29WLGdCQUFrQnBWLEVBQU8raUIsVUFFOUIrQixHQUFhQSxJQUFjOWtCLEVBQU8raUIsV0FDcEMvaUIsRUFBT21RLE9BQVEsR0FFYjJVLElBQWM5a0IsRUFBTytpQixVQUN2Qi9pQixFQUFPMkcsS0FBSzNHLEVBQU8raUIsU0FBVyxPQUFTLFNBRTNDLEdBK0tFNWdCLFFBaE5ZLENBQ1o2aUIsV0EvQ0YsV0FDRSxNQUFNaGxCLEVBQVM3TyxNQUNULFdBQ0o4ekIsRUFBVSxPQUNWMWtCLEVBQU0sSUFDTnFKLEVBQUcsR0FDSDVULEVBQUUsT0FDRjROLEdBQ0U1RCxFQUVFa2xCLEVBekJSLFNBQXdCQyxFQUFTQyxHQUMvQixNQUFNQyxFQUFnQixHQVl0QixPQVhBRixFQUFRL3JCLFNBQVFoRyxJQUNNLGlCQUFUQSxFQUNUd0gsT0FBT0UsS0FBSzFILEdBQU1nRyxTQUFRNnJCLElBQ3BCN3hCLEVBQUs2eEIsSUFDUEksRUFBY3Z5QixLQUFLc3lCLEVBQVNILEVBQzlCLElBRXVCLGlCQUFUN3hCLEdBQ2hCaXlCLEVBQWN2eUIsS0FBS3N5QixFQUFTaHlCLEVBQzlCLElBRUtpeUIsQ0FDVCxDQVdtQkMsQ0FBZSxDQUFDLGNBQWUva0IsRUFBT3FVLFVBQVcsQ0FDaEUsWUFBYTVVLEVBQU9PLE9BQU95YyxVQUFZemMsRUFBT3ljLFNBQVNoVCxTQUN0RCxDQUNELFdBQWN6SixFQUFPd1EsWUFDcEIsQ0FDRCxJQUFPbkgsR0FDTixDQUNELEtBQVFySixFQUFPMkgsTUFBUTNILEVBQU8ySCxLQUFLQyxLQUFPLEdBQ3pDLENBQ0QsY0FBZTVILEVBQU8ySCxNQUFRM0gsRUFBTzJILEtBQUtDLEtBQU8sR0FBMEIsV0FBckI1SCxFQUFPMkgsS0FBS21RLE1BQ2pFLENBQ0QsUUFBV3pVLEVBQU9FLFNBQ2pCLENBQ0QsSUFBT0YsRUFBT0MsS0FDYixDQUNELFdBQVl0RCxFQUFPNEssU0FDbEIsQ0FDRCxTQUFZNUssRUFBTzRLLFNBQVc1SyxFQUFPMkssZ0JBQ3BDLENBQ0QsaUJBQWtCM0ssRUFBT3dOLHNCQUN2QnhOLEVBQU8yTix3QkFDWCtXLEVBQVdueUIsUUFBUW95QixHQUNuQmx2QixFQUFHN0IsVUFBVUcsT0FBTzJ3QixHQUNwQmpsQixFQUFPNGpCLHNCQUNULEVBY0Vuc0IsY0FaRixXQUNFLE1BQ00sR0FDSnpCLEVBQUUsV0FDRml2QixHQUhhOXpCLEtBS2Y2RSxFQUFHN0IsVUFBVU0sVUFBVXd3QixHQUxSOXpCLEtBTVJ5eUIsc0JBQ1QsSUFvTk0yQixHQUFtQixDQUFDLEVBQzFCLE1BQU1DLEdBQ0osV0FBQTdxQixHQUNFLElBQUkzRSxFQUNBdUssRUFDSixJQUFLLElBQUkyRixFQUFPL08sVUFBVXRGLE9BQVFzVSxFQUFPLElBQUlsVCxNQUFNaVQsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMvRUQsRUFBS0MsR0FBUWpQLFVBQVVpUCxHQUVMLElBQWhCRCxFQUFLdFUsUUFBZ0JzVSxFQUFLLEdBQUd4TCxhQUF3RSxXQUF6REMsT0FBT3hKLFVBQVVxTixTQUFTdEwsS0FBS2dULEVBQUssSUFBSXZSLE1BQU0sR0FBSSxHQUNoRzJMLEVBQVM0RixFQUFLLElBRWJuUSxFQUFJdUssR0FBVTRGLEVBRVo1RixJQUFRQSxFQUFTLENBQUMsR0FDdkJBLEVBQVMsRUFBTyxDQUFDLEVBQUdBLEdBQ2hCdkssSUFBT3VLLEVBQU92SyxLQUFJdUssRUFBT3ZLLEdBQUtBLEdBQ2xDLE1BQU10RSxFQUFXLElBQ2pCLEdBQUk2TyxFQUFPdkssSUFBMkIsaUJBQWR1SyxFQUFPdkssSUFBbUJ0RSxFQUFTQyxpQkFBaUI0TyxFQUFPdkssSUFBSW5FLE9BQVMsRUFBRyxDQUNqRyxNQUFNNHpCLEVBQVUsR0FRaEIsT0FQQS96QixFQUFTQyxpQkFBaUI0TyxFQUFPdkssSUFBSW9ELFNBQVFtckIsSUFDM0MsTUFBTW1CLEVBQVksRUFBTyxDQUFDLEVBQUdubEIsRUFBUSxDQUNuQ3ZLLEdBQUl1dUIsSUFFTmtCLEVBQVEzeUIsS0FBSyxJQUFJMHlCLEdBQU9FLEdBQVcsSUFHOUJELENBQ1QsQ0FHQSxNQUFNemxCLEVBQVM3TyxLQUNmNk8sRUFBT04sWUFBYSxFQUNwQk0sRUFBTytDLFFBQVVHLElBQ2pCbEQsRUFBTzRELE9BQVNMLEVBQVUsQ0FDeEI5RyxVQUFXOEQsRUFBTzlELFlBRXBCdUQsRUFBT2lELFFBQVV5QixJQUNqQjFFLEVBQU8wRixnQkFBa0IsQ0FBQyxFQUMxQjFGLEVBQU91RyxtQkFBcUIsR0FDNUJ2RyxFQUFPMmxCLFFBQVUsSUFBSTNsQixFQUFPNGxCLGFBQ3hCcmxCLEVBQU9vbEIsU0FBVzF5QixNQUFNbVAsUUFBUTdCLEVBQU9vbEIsVUFDekMzbEIsRUFBTzJsQixRQUFRN3lCLFFBQVF5TixFQUFPb2xCLFNBRWhDLE1BQU1wRCxFQUFtQixDQUFDLEVBQzFCdmlCLEVBQU8ybEIsUUFBUXZzQixTQUFReXNCLElBQ3JCQSxFQUFJLENBQ0Z0bEIsU0FDQVAsU0FDQThsQixhQUFjeEQsR0FBbUIvaEIsRUFBUWdpQixHQUN6Q2pkLEdBQUl0RixFQUFPc0YsR0FBRzZkLEtBQUtuakIsR0FDbkI4RixLQUFNOUYsRUFBTzhGLEtBQUtxZCxLQUFLbmpCLEdBQ3ZCZ0csSUFBS2hHLEVBQU9nRyxJQUFJbWQsS0FBS25qQixHQUNyQjJHLEtBQU0zRyxFQUFPMkcsS0FBS3djLEtBQUtuakIsSUFDdkIsSUFJSixNQUFNK2xCLEVBQWUsRUFBTyxDQUFDLEVBQUduRSxHQUFVVyxHQXFHMUMsT0FsR0F2aUIsRUFBT08sT0FBUyxFQUFPLENBQUMsRUFBR3dsQixFQUFjUixHQUFrQmhsQixHQUMzRFAsRUFBT3dqQixlQUFpQixFQUFPLENBQUMsRUFBR3hqQixFQUFPTyxRQUMxQ1AsRUFBT2dtQixhQUFlLEVBQU8sQ0FBQyxFQUFHemxCLEdBRzdCUCxFQUFPTyxRQUFVUCxFQUFPTyxPQUFPK0UsSUFDakMxSyxPQUFPRSxLQUFLa0YsRUFBT08sT0FBTytFLElBQUlsTSxTQUFRNnNCLElBQ3BDam1CLEVBQU9zRixHQUFHMmdCLEVBQVdqbUIsRUFBT08sT0FBTytFLEdBQUcyZ0IsR0FBVyxJQUdqRGptQixFQUFPTyxRQUFVUCxFQUFPTyxPQUFPK0YsT0FDakN0RyxFQUFPc0csTUFBTXRHLEVBQU9PLE9BQU8rRixPQUk3QjFMLE9BQU93TyxPQUFPcEosRUFBUSxDQUNwQmdLLFFBQVNoSyxFQUFPTyxPQUFPeUosUUFDdkJoVSxLQUVBaXZCLFdBQVksR0FFWnhkLE9BQVEsR0FDUjJDLFdBQVksR0FDWkQsU0FBVSxHQUNWRSxnQkFBaUIsR0FFakJyQixhQUFZLElBQ3lCLGVBQTVCaEosRUFBT08sT0FBT3FVLFVBRXZCM0wsV0FBVSxJQUMyQixhQUE1QmpKLEVBQU9PLE9BQU9xVSxVQUd2QjNNLFlBQWEsRUFDYlcsVUFBVyxFQUVYc0gsYUFBYSxFQUNiQyxPQUFPLEVBRVAvUCxVQUFXLEVBQ1gyVCxrQkFBbUIsRUFDbkI5UyxTQUFVLEVBQ1ZpbEIsU0FBVSxFQUNWOVIsV0FBVyxFQUNYLHFCQUFBcEYsR0FHRSxPQUFPOU4sS0FBS2lsQixNQUFNaDFCLEtBQUtpUCxVQUFZLEdBQUssSUFBTSxHQUFLLEVBQ3JELEVBRUErVSxlQUFnQm5WLEVBQU9PLE9BQU80VSxlQUM5QkMsZUFBZ0JwVixFQUFPTyxPQUFPNlUsZUFFOUIrRCxnQkFBaUIsQ0FDZjRCLGVBQVdybUIsRUFDWHNtQixhQUFTdG1CLEVBQ1QwbkIseUJBQXFCMW5CLEVBQ3JCNm5CLG9CQUFnQjduQixFQUNoQjJuQixpQkFBYTNuQixFQUNiK2Usc0JBQWtCL2UsRUFDbEIwa0Isb0JBQWdCMWtCLEVBQ2hCK25CLHdCQUFvQi9uQixFQUVwQmdvQixrQkFBbUIxYyxFQUFPTyxPQUFPbWMsa0JBRWpDNEMsY0FBZSxFQUNmOEcsa0JBQWMxeEIsRUFFZDJ4QixXQUFZLEdBQ1ozSCx5QkFBcUJocUIsRUFDckI0bkIsaUJBQWE1bkIsRUFDYnlsQixVQUFXLEtBQ1hFLFFBQVMsTUFHWHlCLFlBQVksRUFFWmMsZUFBZ0I1YyxFQUFPTyxPQUFPcWMsZUFDOUJwQyxRQUFTLENBQ1BYLE9BQVEsRUFDUnNDLE9BQVEsRUFDUkgsU0FBVSxFQUNWQyxTQUFVLEVBQ1YvQyxLQUFNLEdBR1JvTixhQUFjLEdBQ2RDLGFBQWMsSUFFaEJ2bUIsRUFBTzJHLEtBQUssV0FHUjNHLEVBQU9PLE9BQU9sUCxNQUNoQjJPLEVBQU8zTyxPQUtGMk8sQ0FDVCxDQUNBLGlCQUFBd0osQ0FBa0JnZCxHQUNoQixPQUFJcjFCLEtBQUs2WCxlQUNBd2QsRUFHRixDQUNMLE1BQVMsU0FDVCxhQUFjLGNBQ2QsaUJBQWtCLGVBQ2xCLGNBQWUsYUFDZixlQUFnQixnQkFDaEIsZUFBZ0IsY0FDaEIsZ0JBQWlCLGlCQUNqQixZQUFlLGdCQUNmQSxFQUNKLENBQ0EsYUFBQS9PLENBQWMvVixHQUNaLE1BQU0sU0FDSitILEVBQVEsT0FDUmxKLEdBQ0VwUCxLQUVFc2YsRUFBa0IsRUFEVCxFQUFnQmhILEVBQVUsSUFBSWxKLEVBQU84Ryw0QkFDUixJQUM1QyxPQUFPLEVBQWEzRixHQUFXK08sQ0FDakMsQ0FDQSxtQkFBQS9CLENBQW9COWIsR0FDbEIsT0FBT3pCLEtBQUtzbUIsY0FBY3RtQixLQUFLc1csT0FBT3BVLFFBQU9xTyxHQUE2RCxFQUFsREEsRUFBUW1SLGFBQWEsNkJBQW1DamdCLElBQU8sR0FDekgsQ0FDQSxZQUFBc2xCLEdBQ0UsTUFDTSxTQUNKek8sRUFBUSxPQUNSbEosR0FIYXBQLFVBS1JzVyxPQUFTLEVBQWdCZ0MsRUFBVSxJQUFJbEosRUFBTzhHLDJCQUN2RCxDQUNBLE1BQUEyYyxHQUNFLE1BQU1oa0IsRUFBUzdPLEtBQ1g2TyxFQUFPZ0ssVUFDWGhLLEVBQU9nSyxTQUFVLEVBQ2JoSyxFQUFPTyxPQUFPb2UsWUFDaEIzZSxFQUFPNGUsZ0JBRVQ1ZSxFQUFPMkcsS0FBSyxVQUNkLENBQ0EsT0FBQW9kLEdBQ0UsTUFBTS9qQixFQUFTN08sS0FDVjZPLEVBQU9nSyxVQUNaaEssRUFBT2dLLFNBQVUsRUFDYmhLLEVBQU9PLE9BQU9vZSxZQUNoQjNlLEVBQU9pakIsa0JBRVRqakIsRUFBTzJHLEtBQUssV0FDZCxDQUNBLFdBQUE4ZixDQUFZeGxCLEVBQVVULEdBQ3BCLE1BQU1SLEVBQVM3TyxLQUNmOFAsRUFBV0MsS0FBS0UsSUFBSUYsS0FBS0MsSUFBSUYsRUFBVSxHQUFJLEdBQzNDLE1BQU1HLEVBQU1wQixFQUFPd1AsZUFFYjFPLEdBRE1kLEVBQU9pUSxlQUNJN08sR0FBT0gsRUFBV0csRUFDekNwQixFQUFPZ1UsWUFBWWxULE9BQTBCLElBQVZOLEVBQXdCLEVBQUlBLEdBQy9EUixFQUFPaVMsb0JBQ1BqUyxFQUFPZ1IscUJBQ1QsQ0FDQSxvQkFBQTRTLEdBQ0UsTUFBTTVqQixFQUFTN08sS0FDZixJQUFLNk8sRUFBT08sT0FBTzhoQixlQUFpQnJpQixFQUFPaEssR0FBSSxPQUMvQyxNQUFNMHdCLEVBQU0xbUIsRUFBT2hLLEdBQUdFLFVBQVUvRCxNQUFNLEtBQUtrQixRQUFPNkMsR0FDVCxJQUFoQ0EsRUFBVTNDLFFBQVEsV0FBK0UsSUFBNUQyQyxFQUFVM0MsUUFBUXlNLEVBQU9PLE9BQU8yTiwwQkFFOUVsTyxFQUFPMkcsS0FBSyxvQkFBcUIrZixFQUFJdG9CLEtBQUssS0FDNUMsQ0FDQSxlQUFBdW9CLENBQWdCamxCLEdBQ2QsTUFBTTFCLEVBQVM3TyxLQUNmLE9BQUk2TyxFQUFPMkYsVUFBa0IsR0FDdEJqRSxFQUFReEwsVUFBVS9ELE1BQU0sS0FBS2tCLFFBQU82QyxHQUNJLElBQXRDQSxFQUFVM0MsUUFBUSxpQkFBeUUsSUFBaEQyQyxFQUFVM0MsUUFBUXlNLEVBQU9PLE9BQU84RyxjQUNqRmpKLEtBQUssSUFDVixDQUNBLGlCQUFBNFQsR0FDRSxNQUFNaFMsRUFBUzdPLEtBQ2YsSUFBSzZPLEVBQU9PLE9BQU84aEIsZUFBaUJyaUIsRUFBT2hLLEdBQUksT0FDL0MsTUFBTTR3QixFQUFVLEdBQ2hCNW1CLEVBQU95SCxPQUFPck8sU0FBUXNJLElBQ3BCLE1BQU11akIsRUFBYWpsQixFQUFPMm1CLGdCQUFnQmpsQixHQUMxQ2tsQixFQUFROXpCLEtBQUssQ0FDWDRPLFVBQ0F1akIsZUFFRmpsQixFQUFPMkcsS0FBSyxjQUFlakYsRUFBU3VqQixFQUFXLElBRWpEamxCLEVBQU8yRyxLQUFLLGdCQUFpQmlnQixFQUMvQixDQUNBLG9CQUFBN2UsQ0FBcUI4ZSxFQUFNQyxRQUNaLElBQVRELElBQ0ZBLEVBQU8sZ0JBRUssSUFBVkMsSUFDRkEsR0FBUSxHQUVWLE1BQ00sT0FDSnZtQixFQUFNLE9BQ05rSCxFQUFNLFdBQ04yQyxFQUFVLGdCQUNWQyxFQUNBekgsS0FBTThHLEVBQVUsWUFDaEJ6QixHQVBhOVcsS0FTZixJQUFJNDFCLEVBQU0sRUFDVixHQUFvQyxpQkFBekJ4bUIsRUFBT3VILGNBQTRCLE9BQU92SCxFQUFPdUgsY0FDNUQsR0FBSXZILEVBQU8ySyxlQUFnQixDQUN6QixJQUNJOGIsRUFEQTNiLEVBQVk1RCxFQUFPUSxHQUFlUixFQUFPUSxHQUFhbUUsZ0JBQWtCLEVBRTVFLElBQUssSUFBSXhhLEVBQUlxVyxFQUFjLEVBQUdyVyxFQUFJNlYsRUFBTzVWLE9BQVFELEdBQUssRUFDaEQ2VixFQUFPN1YsS0FBT28xQixJQUNoQjNiLEdBQWE1RCxFQUFPN1YsR0FBR3dhLGdCQUN2QjJhLEdBQU8sRUFDSDFiLEVBQVkzQixJQUFZc2QsR0FBWSxJQUc1QyxJQUFLLElBQUlwMUIsRUFBSXFXLEVBQWMsRUFBR3JXLEdBQUssRUFBR0EsR0FBSyxFQUNyQzZWLEVBQU83VixLQUFPbzFCLElBQ2hCM2IsR0FBYTVELEVBQU83VixHQUFHd2EsZ0JBQ3ZCMmEsR0FBTyxFQUNIMWIsRUFBWTNCLElBQVlzZCxHQUFZLEdBRzlDLE1BRUUsR0FBYSxZQUFUSCxFQUNGLElBQUssSUFBSWoxQixFQUFJcVcsRUFBYyxFQUFHclcsRUFBSTZWLEVBQU81VixPQUFRRCxHQUFLLEVBQUcsRUFDbkNrMUIsRUFBUTFjLEVBQVd4WSxHQUFLeVksRUFBZ0J6WSxHQUFLd1ksRUFBV25DLEdBQWV5QixFQUFhVSxFQUFXeFksR0FBS3dZLEVBQVduQyxHQUFleUIsS0FFaEpxZCxHQUFPLEVBRVgsTUFHQSxJQUFLLElBQUluMUIsRUFBSXFXLEVBQWMsRUFBR3JXLEdBQUssRUFBR0EsR0FBSyxFQUFHLENBQ3hCd1ksRUFBV25DLEdBQWVtQyxFQUFXeFksR0FBSzhYLElBRTVEcWQsR0FBTyxFQUVYLENBR0osT0FBT0EsQ0FDVCxDQUNBLE1BQUExd0IsR0FDRSxNQUFNMkosRUFBUzdPLEtBQ2YsSUFBSzZPLEdBQVVBLEVBQU8yRixVQUFXLE9BQ2pDLE1BQU0sU0FDSndFLEVBQVEsT0FDUjVKLEdBQ0VQLEVBY0osU0FBUzBULElBQ1AsTUFBTXVULEVBQWlCam5CLEVBQU8ySixjQUFtQyxFQUFwQjNKLEVBQU9JLFVBQWlCSixFQUFPSSxVQUN0RWtVLEVBQWVwVCxLQUFLRSxJQUFJRixLQUFLQyxJQUFJOGxCLEVBQWdCam5CLEVBQU9pUSxnQkFBaUJqUSxFQUFPd1AsZ0JBQ3RGeFAsRUFBTzBULGFBQWFZLEdBQ3BCdFUsRUFBT2lTLG9CQUNQalMsRUFBT2dSLHFCQUNULENBQ0EsSUFBSWtXLEVBQ0osR0FwQkkzbUIsRUFBT2tMLGFBQ1R6TCxFQUFPb2dCLGdCQUVULElBQUlwZ0IsRUFBT2hLLEdBQUdyRSxpQkFBaUIscUJBQXFCeUgsU0FBUThOLElBQ3REQSxFQUFRaWdCLFVBQ1ZsZ0IsRUFBcUJqSCxFQUFRa0gsRUFDL0IsSUFFRmxILEVBQU82SSxhQUNQN0ksRUFBT3FKLGVBQ1BySixFQUFPOFAsaUJBQ1A5UCxFQUFPZ1Isc0JBU0h6USxFQUFPeWMsVUFBWXpjLEVBQU95YyxTQUFTaFQsVUFBWXpKLEVBQU80SyxRQUN4RHVJLElBQ0luVCxFQUFPd1EsWUFDVC9RLEVBQU9xTyx1QkFFSixDQUNMLElBQThCLFNBQXpCOU4sRUFBT3VILGVBQTRCdkgsRUFBT3VILGNBQWdCLElBQU05SCxFQUFPbVEsUUFBVTVQLEVBQU8ySyxlQUFnQixDQUMzRyxNQUFNekQsRUFBU3pILEVBQU8rSixTQUFXeEosRUFBT3dKLFFBQVFDLFFBQVVoSyxFQUFPK0osUUFBUXRDLE9BQVN6SCxFQUFPeUgsT0FDekZ5ZixFQUFhbG5CLEVBQU84VSxRQUFRck4sRUFBTzVWLE9BQVMsRUFBRyxHQUFHLEdBQU8sRUFDM0QsTUFDRXExQixFQUFhbG5CLEVBQU84VSxRQUFROVUsRUFBT2lJLFlBQWEsR0FBRyxHQUFPLEdBRXZEaWYsR0FDSHhULEdBRUosQ0FDSW5ULEVBQU9zTixlQUFpQjFELElBQWFuSyxFQUFPbUssVUFDOUNuSyxFQUFPOE4sZ0JBRVQ5TixFQUFPMkcsS0FBSyxTQUNkLENBQ0EsZUFBQXlkLENBQWdCZ0QsRUFBY0MsUUFDVCxJQUFmQSxJQUNGQSxHQUFhLEdBRWYsTUFBTXJuQixFQUFTN08sS0FDVG0yQixFQUFtQnRuQixFQUFPTyxPQUFPcVUsVUFLdkMsT0FKS3dTLElBRUhBLEVBQW9DLGVBQXJCRSxFQUFvQyxXQUFhLGNBRTlERixJQUFpQkUsR0FBcUMsZUFBakJGLEdBQWtELGFBQWpCQSxJQUcxRXBuQixFQUFPaEssR0FBRzdCLFVBQVVNLE9BQU8sR0FBR3VMLEVBQU9PLE9BQU8yTix5QkFBeUJvWixLQUNyRXRuQixFQUFPaEssR0FBRzdCLFVBQVVHLElBQUksR0FBRzBMLEVBQU9PLE9BQU8yTix5QkFBeUJrWixLQUNsRXBuQixFQUFPNGpCLHVCQUNQNWpCLEVBQU9PLE9BQU9xVSxVQUFZd1MsRUFDMUJwbkIsRUFBT3lILE9BQU9yTyxTQUFRc0ksSUFDQyxhQUFqQjBsQixFQUNGMWxCLEVBQVE1SixNQUFNa00sTUFBUSxHQUV0QnRDLEVBQVE1SixNQUFNRyxPQUFTLEVBQ3pCLElBRUYrSCxFQUFPMkcsS0FBSyxtQkFDUjBnQixHQUFZcm5CLEVBQU8zSixVQWRkMkosQ0FnQlgsQ0FDQSx1QkFBQXVuQixDQUF3QjNTLEdBQ3RCLE1BQU01VSxFQUFTN08sS0FDWDZPLEVBQU80SixLQUFxQixRQUFkZ0wsSUFBd0I1VSxFQUFPNEosS0FBcUIsUUFBZGdMLElBQ3hENVUsRUFBTzRKLElBQW9CLFFBQWRnTCxFQUNiNVUsRUFBTzJKLGFBQTJDLGVBQTVCM0osRUFBT08sT0FBT3FVLFdBQThCNVUsRUFBTzRKLElBQ3JFNUosRUFBTzRKLEtBQ1Q1SixFQUFPaEssR0FBRzdCLFVBQVVHLElBQUksR0FBRzBMLEVBQU9PLE9BQU8yTiw2QkFDekNsTyxFQUFPaEssR0FBRzRLLElBQU0sUUFFaEJaLEVBQU9oSyxHQUFHN0IsVUFBVU0sT0FBTyxHQUFHdUwsRUFBT08sT0FBTzJOLDZCQUM1Q2xPLEVBQU9oSyxHQUFHNEssSUFBTSxPQUVsQlosRUFBTzNKLFNBQ1QsQ0FDQSxLQUFBbXhCLENBQU1uMUIsR0FDSixNQUFNMk4sRUFBUzdPLEtBQ2YsR0FBSTZPLEVBQU95bkIsUUFBUyxPQUFPLEVBRzNCLElBQUl6eEIsRUFBSzNELEdBQVcyTixFQUFPTyxPQUFPdkssR0FJbEMsR0FIa0IsaUJBQVBBLElBQ1RBLEVBQUt0RSxTQUFTZSxjQUFjdUQsS0FFekJBLEVBQ0gsT0FBTyxFQUVUQSxFQUFHZ0ssT0FBU0EsRUFDUmhLLEVBQUd6RCxZQUFjeUQsRUFBR3pELFdBQVd3SixNQUF3QyxxQkFBaEMvRixFQUFHekQsV0FBV3dKLEtBQUtULFdBQzVEMEUsRUFBT29ILFdBQVksR0FFckIsTUFBTXNnQixFQUFxQixJQUNsQixLQUFLMW5CLEVBQU9PLE9BQU82aEIsY0FBZ0IsSUFBSWx3QixPQUFPQyxNQUFNLEtBQUtpTSxLQUFLLE9BV3ZFLElBQUlxQyxFQVRlLE1BQ2pCLEdBQUl6SyxHQUFNQSxFQUFHMkwsWUFBYzNMLEVBQUcyTCxXQUFXbFAsY0FBZSxDQUd0RCxPQUZZdUQsRUFBRzJMLFdBQVdsUCxjQUFjaTFCLElBRzFDLENBQ0EsT0FBTyxFQUFnQjF4QixFQUFJMHhCLEtBQXNCLEVBQUUsRUFHckNDLEdBbUJoQixPQWxCS2xuQixHQUFhVCxFQUFPTyxPQUFPdWhCLGlCQUM5QnJoQixFQUFZLEVBQWMsTUFBT1QsRUFBT08sT0FBTzZoQixjQUMvQ3BzQixFQUFHZ2lCLE9BQU92WCxHQUNWLEVBQWdCekssRUFBSSxJQUFJZ0ssRUFBT08sT0FBTzhHLGNBQWNqTyxTQUFRc0ksSUFDMURqQixFQUFVdVgsT0FBT3RXLEVBQVEsS0FHN0I5RyxPQUFPd08sT0FBT3BKLEVBQVEsQ0FDcEJoSyxLQUNBeUssWUFDQWdKLFNBQVV6SixFQUFPb0gsWUFBY3BSLEVBQUd6RCxXQUFXd0osS0FBSzZyQixXQUFhNXhCLEVBQUd6RCxXQUFXd0osS0FBTzBFLEVBQ3BGb25CLE9BQVE3bkIsRUFBT29ILFVBQVlwUixFQUFHekQsV0FBV3dKLEtBQU8vRixFQUNoRHl4QixTQUFTLEVBRVQ3ZCxJQUE4QixRQUF6QjVULEVBQUc0SyxJQUFJaUUsZUFBNkQsUUFBbEN2QyxFQUFhdE0sRUFBSSxhQUN4RDJULGFBQTBDLGVBQTVCM0osRUFBT08sT0FBT3FVLFlBQXdELFFBQXpCNWUsRUFBRzRLLElBQUlpRSxlQUE2RCxRQUFsQ3ZDLEVBQWF0TSxFQUFJLGNBQzlHNlQsU0FBaUQsZ0JBQXZDdkgsRUFBYTdCLEVBQVcsY0FFN0IsQ0FDVCxDQUNBLElBQUFwUCxDQUFLMkUsR0FDSCxNQUFNZ0ssRUFBUzdPLEtBQ2YsR0FBSTZPLEVBQU84UyxZQUFhLE9BQU85UyxFQUUvQixJQUFnQixJQURBQSxFQUFPd25CLE1BQU14eEIsR0FDTixPQUFPZ0ssRUFDOUJBLEVBQU8yRyxLQUFLLGNBR1IzRyxFQUFPTyxPQUFPa0wsYUFDaEJ6TCxFQUFPb2dCLGdCQUlUcGdCLEVBQU9nbEIsYUFHUGhsQixFQUFPNkksYUFHUDdJLEVBQU9xSixlQUNIckosRUFBT08sT0FBT3NOLGVBQ2hCN04sRUFBTzhOLGdCQUlMOU4sRUFBT08sT0FBT29lLFlBQWMzZSxFQUFPZ0ssU0FDckNoSyxFQUFPNGUsZ0JBSUw1ZSxFQUFPTyxPQUFPb0ksTUFBUTNJLEVBQU8rSixTQUFXL0osRUFBT08sT0FBT3dKLFFBQVFDLFFBQ2hFaEssRUFBTzhVLFFBQVE5VSxFQUFPTyxPQUFPbVYsYUFBZTFWLEVBQU8rSixRQUFRK0MsYUFBYyxFQUFHOU0sRUFBT08sT0FBT3dTLG9CQUFvQixHQUFPLEdBRXJIL1MsRUFBTzhVLFFBQVE5VSxFQUFPTyxPQUFPbVYsYUFBYyxFQUFHMVYsRUFBT08sT0FBT3dTLG9CQUFvQixHQUFPLEdBSXJGL1MsRUFBT08sT0FBT29JLE1BQ2hCM0ksRUFBTzBYLGFBSVQxWCxFQUFPa2pCLGVBQ1AsTUFBTTRFLEVBQWUsSUFBSTluQixFQUFPaEssR0FBR3JFLGlCQUFpQixxQkFzQnBELE9BckJJcU8sRUFBT29ILFdBQ1QwZ0IsRUFBYWgxQixRQUFRa04sRUFBTzZuQixPQUFPbDJCLGlCQUFpQixxQkFFdERtMkIsRUFBYTF1QixTQUFROE4sSUFDZkEsRUFBUWlnQixTQUNWbGdCLEVBQXFCakgsRUFBUWtILEdBRTdCQSxFQUFRaE0saUJBQWlCLFFBQVF3WixJQUMvQnpOLEVBQXFCakgsRUFBUTBVLEVBQUU5YyxPQUFPLEdBRTFDLElBRUYrUCxFQUFRM0gsR0FHUkEsRUFBTzhTLGFBQWMsRUFDckJuTCxFQUFRM0gsR0FHUkEsRUFBTzJHLEtBQUssUUFDWjNHLEVBQU8yRyxLQUFLLGFBQ0wzRyxDQUNULENBQ0EsT0FBQStuQixDQUFRQyxFQUFnQkMsUUFDQyxJQUFuQkQsSUFDRkEsR0FBaUIsUUFFQyxJQUFoQkMsSUFDRkEsR0FBYyxHQUVoQixNQUFNam9CLEVBQVM3TyxNQUNULE9BQ0pvUCxFQUFNLEdBQ052SyxFQUFFLFVBQ0Z5SyxFQUFTLE9BQ1RnSCxHQUNFekgsRUFDSixZQUE2QixJQUFsQkEsRUFBT08sUUFBMEJQLEVBQU8yRixZQUduRDNGLEVBQU8yRyxLQUFLLGlCQUdaM0csRUFBTzhTLGFBQWMsRUFHckI5UyxFQUFPb2pCLGVBR0g3aUIsRUFBT29JLE1BQ1QzSSxFQUFPeVosY0FJTHdPLElBQ0Zqb0IsRUFBT3ZJLGdCQUNQekIsRUFBRzBSLGdCQUFnQixTQUNuQmpILEVBQVVpSCxnQkFBZ0IsU0FDdEJELEdBQVVBLEVBQU81VixRQUNuQjRWLEVBQU9yTyxTQUFRc0ksSUFDYkEsRUFBUXZOLFVBQVVNLE9BQU84TCxFQUFPNE8sa0JBQW1CNU8sRUFBTzZPLHVCQUF3QjdPLEVBQU84USxpQkFBa0I5USxFQUFPK1EsZUFBZ0IvUSxFQUFPZ1IsZ0JBQ3pJN1AsRUFBUWdHLGdCQUFnQixTQUN4QmhHLEVBQVFnRyxnQkFBZ0IsMEJBQTBCLEtBSXhEMUgsRUFBTzJHLEtBQUssV0FHWi9MLE9BQU9FLEtBQUtrRixFQUFPMEYsaUJBQWlCdE0sU0FBUTZzQixJQUMxQ2ptQixFQUFPZ0csSUFBSWlnQixFQUFVLEtBRUEsSUFBbkIrQixJQUNGaG9CLEVBQU9oSyxHQUFHZ0ssT0FBUyxLRHR2SHpCLFNBQXFCdEYsR0FDbkIsTUFBTXd0QixFQUFTeHRCLEVBQ2ZFLE9BQU9FLEtBQUtvdEIsR0FBUTl1QixTQUFRMkIsSUFDMUIsSUFDRW10QixFQUFPbnRCLEdBQU8sSUFDaEIsQ0FBRSxNQUFPMlosR0FFVCxDQUNBLFdBQ1N3VCxFQUFPbnRCLEVBQ2hCLENBQUUsTUFBTzJaLEdBRVQsSUFFSixDQ3l1SE15VCxDQUFZbm9CLElBRWRBLEVBQU8yRixXQUFZLEdBdENWLElBd0NYLENBQ0EscUJBQU95aUIsQ0FBZUMsR0FDcEIsRUFBTzlDLEdBQWtCOEMsRUFDM0IsQ0FDQSwyQkFBVzlDLEdBQ1QsT0FBT0EsRUFDVCxDQUNBLG1CQUFXM0QsR0FDVCxPQUFPQSxFQUNULENBQ0Esb0JBQU8wRyxDQUFjekMsR0FDZEwsR0FBT3AwQixVQUFVdzBCLGNBQWFKLEdBQU9wMEIsVUFBVXcwQixZQUFjLElBQ2xFLE1BQU1ELEVBQVVILEdBQU9wMEIsVUFBVXcwQixZQUNkLG1CQUFSQyxHQUFzQkYsRUFBUXB5QixRQUFRc3lCLEdBQU8sR0FDdERGLEVBQVE3eUIsS0FBSyt5QixFQUVqQixDQUNBLFVBQU8wQyxDQUFJenhCLEdBQ1QsT0FBSTdELE1BQU1tUCxRQUFRdEwsSUFDaEJBLEVBQU9zQyxTQUFRb3ZCLEdBQUtoRCxHQUFPOEMsY0FBY0UsS0FDbENoRCxLQUVUQSxHQUFPOEMsY0FBY3h4QixHQUNkMHVCLEdBQ1QsRUMxeEhGLFNBQVMsR0FBMEJ4bEIsRUFBUXdqQixFQUFnQmpqQixFQUFRa29CLEdBZWpFLE9BZEl6b0IsRUFBT08sT0FBT3VoQixnQkFDaEJsbkIsT0FBT0UsS0FBSzJ0QixHQUFZcnZCLFNBQVEyQixJQUM5QixJQUFLd0YsRUFBT3hGLEtBQXdCLElBQWhCd0YsRUFBT21pQixLQUFlLENBQ3hDLElBQUlyd0IsRUFBVSxFQUFnQjJOLEVBQU9oSyxHQUFJLElBQUl5eUIsRUFBVzF0QixNQUFRLEdBQzNEMUksSUFDSEEsRUFBVSxFQUFjLE1BQU9vMkIsRUFBVzF0QixJQUMxQzFJLEVBQVE2RCxVQUFZdXlCLEVBQVcxdEIsR0FDL0JpRixFQUFPaEssR0FBR2dpQixPQUFPM2xCLElBRW5Ca08sRUFBT3hGLEdBQU8xSSxFQUNkbXhCLEVBQWV6b0IsR0FBTzFJLENBQ3hCLEtBR0drTyxDQUNULENDaEJBLFNBQVNtb0IsR0FBVzNvQixHQUNsQixJQUFJLE9BQ0ZDLEVBQU0sYUFDTjhsQixFQUFZLEdBQ1p4Z0IsRUFBRSxLQUNGcUIsR0FDRTVHLEVBQ0orbEIsRUFBYSxDQUNYOUYsV0FBWSxDQUNWQyxPQUFRLEtBQ1JDLE9BQVEsS0FDUnlJLGFBQWEsRUFDYkMsY0FBZSx5QkFDZkMsWUFBYSx1QkFDYkMsVUFBVyxxQkFDWEMsd0JBQXlCLGdDQUc3Qi9vQixFQUFPZ2dCLFdBQWEsQ0FDbEJDLE9BQVEsS0FDUkMsT0FBUSxNQUVWLE1BQU04SSxFQUFvQmh6QixJQUFPL0MsTUFBTW1QLFFBQVFwTSxHQUFNQSxFQUFLLENBQUNBLElBQUszQyxRQUFPcWhCLEtBQU9BLElBQzlFLFNBQVN1VSxFQUFNanpCLEdBQ2IsSUFBSWt6QixFQUNKLE9BQUlsekIsR0FBb0IsaUJBQVBBLEdBQW1CZ0ssRUFBT29ILFlBQ3pDOGhCLEVBQU1scEIsRUFBT2hLLEdBQUd2RCxjQUFjdUQsR0FDMUJrekIsR0FBWUEsR0FFZGx6QixJQUNnQixpQkFBUEEsSUFBaUJrekIsRUFBTSxJQUFJeDNCLFNBQVNDLGlCQUFpQnFFLEtBQzVEZ0ssRUFBT08sT0FBTzJoQixtQkFBbUMsaUJBQVBsc0IsR0FBbUJrekIsRUFBSXIzQixPQUFTLEdBQStDLElBQTFDbU8sRUFBT2hLLEdBQUdyRSxpQkFBaUJxRSxHQUFJbkUsU0FDaEhxM0IsRUFBTWxwQixFQUFPaEssR0FBR3ZELGNBQWN1RCxLQUc5QkEsSUFBT2t6QixFQUFZbHpCLEVBRWhCa3pCLEVBQ1QsQ0FDQSxTQUFTQyxFQUFTbnpCLEVBQUl3RCxHQUNwQixNQUFNK0csRUFBU1AsRUFBT08sT0FBT3lmLFlBQzdCaHFCLEVBQUtnekIsRUFBa0JoekIsSUFDcEJvRCxTQUFRZ3dCLElBQ0xBLElBQ0ZBLEVBQU1qMUIsVUFBVXFGLEVBQVcsTUFBUSxhQUFhK0csRUFBT3FvQixjQUFjejJCLE1BQU0sTUFDckQsV0FBbEJpM0IsRUFBTTd2QixVQUFzQjZ2QixFQUFNNXZCLFNBQVdBLEdBQzdDd0csRUFBT08sT0FBT3NOLGVBQWlCN04sRUFBT2dLLFNBQ3hDb2YsRUFBTWoxQixVQUFVNkwsRUFBTytpQixTQUFXLE1BQVEsVUFBVXhpQixFQUFPdW9CLFdBRS9ELEdBRUosQ0FDQSxTQUFTenlCLElBRVAsTUFBTSxPQUNKNHBCLEVBQU0sT0FDTkMsR0FDRWxnQixFQUFPZ2dCLFdBQ1gsR0FBSWhnQixFQUFPTyxPQUFPb0ksS0FHaEIsT0FGQXdnQixFQUFTakosR0FBUSxRQUNqQmlKLEVBQVNsSixHQUFRLEdBR25Ca0osRUFBU2pKLEVBQVFsZ0IsRUFBT2tRLGNBQWdCbFEsRUFBT08sT0FBT21JLFFBQ3REeWdCLEVBQVNsSixFQUFRamdCLEVBQU9tUSxRQUFVblEsRUFBT08sT0FBT21JLE9BQ2xELENBQ0EsU0FBUzJnQixFQUFZM1UsR0FDbkJBLEVBQUVzRixtQkFDRWhhLEVBQU9rUSxhQUFnQmxRLEVBQU9PLE9BQU9vSSxNQUFTM0ksRUFBT08sT0FBT21JLFVBQ2hFMUksRUFBTzBXLFlBQ1AvUCxFQUFLLGtCQUNQLENBQ0EsU0FBUzJpQixFQUFZNVUsR0FDbkJBLEVBQUVzRixtQkFDRWhhLEVBQU9tUSxPQUFVblEsRUFBT08sT0FBT29JLE1BQVMzSSxFQUFPTyxPQUFPbUksVUFDMUQxSSxFQUFPbVcsWUFDUHhQLEVBQUssa0JBQ1AsQ0FDQSxTQUFTdFYsSUFDUCxNQUFNa1AsRUFBU1AsRUFBT08sT0FBT3lmLFdBSzdCLEdBSkFoZ0IsRUFBT08sT0FBT3lmLFdBQWEsR0FBMEJoZ0IsRUFBUUEsRUFBT3dqQixlQUFleEQsV0FBWWhnQixFQUFPTyxPQUFPeWYsV0FBWSxDQUN2SEMsT0FBUSxxQkFDUkMsT0FBUSx3QkFFSjNmLEVBQU8wZixTQUFVMWYsRUFBTzJmLE9BQVMsT0FDdkMsSUFBSUQsRUFBU2dKLEVBQU0xb0IsRUFBTzBmLFFBQ3RCQyxFQUFTK0ksRUFBTTFvQixFQUFPMmYsUUFDMUJ0bEIsT0FBT3dPLE9BQU9wSixFQUFPZ2dCLFdBQVksQ0FDL0JDLFNBQ0FDLFdBRUZELEVBQVMrSSxFQUFrQi9JLEdBQzNCQyxFQUFTOEksRUFBa0I5SSxHQUMzQixNQUFNcUosRUFBYSxDQUFDdnpCLEVBQUk0SyxLQUNsQjVLLEdBQ0ZBLEVBQUdrRixpQkFBaUIsUUFBaUIsU0FBUjBGLEVBQWlCMG9CLEVBQWNELElBRXpEcnBCLEVBQU9nSyxTQUFXaFUsR0FDckJBLEVBQUc3QixVQUFVRyxPQUFPaU0sRUFBT3VvQixVQUFVMzJCLE1BQU0sS0FDN0MsRUFFRjh0QixFQUFPN21CLFNBQVFwRCxHQUFNdXpCLEVBQVd2ekIsRUFBSSxVQUNwQ2txQixFQUFPOW1CLFNBQVFwRCxHQUFNdXpCLEVBQVd2ekIsRUFBSSxTQUN0QyxDQUNBLFNBQVMreEIsSUFDUCxJQUFJLE9BQ0Y5SCxFQUFNLE9BQ05DLEdBQ0VsZ0IsRUFBT2dnQixXQUNYQyxFQUFTK0ksRUFBa0IvSSxHQUMzQkMsRUFBUzhJLEVBQWtCOUksR0FDM0IsTUFBTXNKLEVBQWdCLENBQUN4ekIsRUFBSTRLLEtBQ3pCNUssRUFBR21GLG9CQUFvQixRQUFpQixTQUFSeUYsRUFBaUIwb0IsRUFBY0QsR0FDL0RyekIsRUFBRzdCLFVBQVVNLFVBQVV1TCxFQUFPTyxPQUFPeWYsV0FBVzRJLGNBQWN6MkIsTUFBTSxLQUFLLEVBRTNFOHRCLEVBQU83bUIsU0FBUXBELEdBQU13ekIsRUFBY3h6QixFQUFJLFVBQ3ZDa3FCLEVBQU85bUIsU0FBUXBELEdBQU13ekIsRUFBY3h6QixFQUFJLFNBQ3pDLENBQ0FzUCxFQUFHLFFBQVEsTUFDZ0MsSUFBckN0RixFQUFPTyxPQUFPeWYsV0FBV2hXLFFBRTNCK1osS0FFQTF5QixJQUNBZ0YsSUFDRixJQUVGaVAsRUFBRywrQkFBK0IsS0FDaENqUCxHQUFRLElBRVZpUCxFQUFHLFdBQVcsS0FDWnlpQixHQUFTLElBRVh6aUIsRUFBRyxrQkFBa0IsS0FDbkIsSUFBSSxPQUNGMmEsRUFBTSxPQUNOQyxHQUNFbGdCLEVBQU9nZ0IsV0FDWEMsRUFBUytJLEVBQWtCL0ksR0FDM0JDLEVBQVM4SSxFQUFrQjlJLEdBQ3ZCbGdCLEVBQU9nSyxRQUNUM1QsSUFHRixJQUFJNHBCLEtBQVdDLEdBQVE3c0IsUUFBTzJDLEtBQVFBLElBQUlvRCxTQUFRcEQsR0FBTUEsRUFBRzdCLFVBQVVHLElBQUkwTCxFQUFPTyxPQUFPeWYsV0FBVzhJLFlBQVcsSUFFL0d4akIsRUFBRyxTQUFTLENBQUNta0IsRUFBSS9VLEtBQ2YsSUFBSSxPQUNGdUwsRUFBTSxPQUNOQyxHQUNFbGdCLEVBQU9nZ0IsV0FDWEMsRUFBUytJLEVBQWtCL0ksR0FDM0JDLEVBQVM4SSxFQUFrQjlJLEdBQzNCLE1BQU12RixFQUFXakcsRUFBRTljLE9BQ25CLEdBQUlvSSxFQUFPTyxPQUFPeWYsV0FBVzJJLGNBQWdCekksRUFBT3BiLFNBQVM2VixLQUFjc0YsRUFBT25iLFNBQVM2VixHQUFXLENBQ3BHLEdBQUkzYSxFQUFPMHBCLFlBQWMxcEIsRUFBT08sT0FBT21wQixZQUFjMXBCLEVBQU9PLE9BQU9tcEIsV0FBV0MsWUFBYzNwQixFQUFPMHBCLFdBQVcxekIsS0FBTzJrQixHQUFZM2EsRUFBTzBwQixXQUFXMXpCLEdBQUc1QixTQUFTdW1CLElBQVksT0FDM0ssSUFBSWlQLEVBQ0EzSixFQUFPcHVCLE9BQ1QrM0IsRUFBVzNKLEVBQU8sR0FBRzlyQixVQUFVQyxTQUFTNEwsRUFBT08sT0FBT3lmLFdBQVc2SSxhQUN4RDNJLEVBQU9ydUIsU0FDaEIrM0IsRUFBVzFKLEVBQU8sR0FBRy9yQixVQUFVQyxTQUFTNEwsRUFBT08sT0FBT3lmLFdBQVc2SSxjQUdqRWxpQixHQURlLElBQWJpakIsRUFDRyxpQkFFQSxrQkFFUCxJQUFJM0osS0FBV0MsR0FBUTdzQixRQUFPMkMsS0FBUUEsSUFBSW9ELFNBQVFwRCxHQUFNQSxFQUFHN0IsVUFBVTAxQixPQUFPN3BCLEVBQU9PLE9BQU95ZixXQUFXNkksY0FDdkcsS0FFRixNQUtNOUUsRUFBVSxLQUNkL2pCLEVBQU9oSyxHQUFHN0IsVUFBVUcsT0FBTzBMLEVBQU9PLE9BQU95ZixXQUFXK0ksd0JBQXdCNTJCLE1BQU0sTUFDbEY0MUIsR0FBUyxFQUVYbnRCLE9BQU93TyxPQUFPcEosRUFBT2dnQixXQUFZLENBQy9CZ0UsT0FWYSxLQUNiaGtCLEVBQU9oSyxHQUFHN0IsVUFBVU0sVUFBVXVMLEVBQU9PLE9BQU95ZixXQUFXK0ksd0JBQXdCNTJCLE1BQU0sTUFDckZkLElBQ0FnRixHQUFRLEVBUVIwdEIsVUFDQTF0QixTQUNBaEYsT0FDQTAyQixXQUVKLENDNUxBLFNBQVMsR0FBa0I1bEIsR0FJekIsWUFIZ0IsSUFBWkEsSUFDRkEsRUFBVSxJQUVMLElBQUlBLEVBQVFqUSxPQUFPMEgsUUFBUSxlQUFnQixRQUNqREEsUUFBUSxLQUFNLE1BQ2pCLENDRkEsU0FBU2t3QixHQUFXL3BCLEdBQ2xCLElBQUksT0FDRkMsRUFBTSxhQUNOOGxCLEVBQVksR0FDWnhnQixFQUFFLEtBQ0ZxQixHQUNFNUcsRUFDSixNQUFNZ3FCLEVBQU0sb0JBcUNaLElBQUlDLEVBcENKbEUsRUFBYSxDQUNYNEQsV0FBWSxDQUNWMXpCLEdBQUksS0FDSmkwQixjQUFlLE9BQ2ZOLFdBQVcsRUFDWGhCLGFBQWEsRUFDYnVCLGFBQWMsS0FDZEMsa0JBQW1CLEtBQ25CQyxlQUFnQixLQUNoQkMsYUFBYyxLQUNkQyxxQkFBcUIsRUFDckJwNUIsS0FBTSxVQUVOcTVCLGdCQUFnQixFQUNoQkMsbUJBQW9CLEVBQ3BCQyxzQkFBdUJDLEdBQVVBLEVBQ2pDQyxvQkFBcUJELEdBQVVBLEVBQy9CRSxZQUFhLEdBQUdiLFdBQ2hCYyxrQkFBbUIsR0FBR2Qsa0JBQ3RCZSxjQUFlLEdBQUdmLEtBQ2xCZ0IsYUFBYyxHQUFHaEIsWUFDakJpQixXQUFZLEdBQUdqQixVQUNmbEIsWUFBYSxHQUFHa0IsV0FDaEJrQixxQkFBc0IsR0FBR2xCLHFCQUN6Qm1CLHlCQUEwQixHQUFHbkIseUJBQzdCb0IsZUFBZ0IsR0FBR3BCLGNBQ25CakIsVUFBVyxHQUFHaUIsU0FDZHFCLGdCQUFpQixHQUFHckIsZUFDcEJzQixjQUFlLEdBQUd0QixhQUNsQnVCLHdCQUF5QixHQUFHdkIsZ0JBR2hDL3BCLEVBQU8wcEIsV0FBYSxDQUNsQjF6QixHQUFJLEtBQ0p1MUIsUUFBUyxJQUdYLElBQUlDLEVBQXFCLEVBQ3pCLE1BQU14QyxFQUFvQmh6QixJQUFPL0MsTUFBTW1QLFFBQVFwTSxHQUFNQSxFQUFLLENBQUNBLElBQUszQyxRQUFPcWhCLEtBQU9BLElBQzlFLFNBQVMrVyxJQUNQLE9BQVF6ckIsRUFBT08sT0FBT21wQixXQUFXMXpCLEtBQU9nSyxFQUFPMHBCLFdBQVcxekIsSUFBTS9DLE1BQU1tUCxRQUFRcEMsRUFBTzBwQixXQUFXMXpCLEtBQXVDLElBQWhDZ0ssRUFBTzBwQixXQUFXMXpCLEdBQUduRSxNQUM5SCxDQUNBLFNBQVM2NUIsRUFBZUMsRUFBVUMsR0FDaEMsTUFBTSxrQkFDSmYsR0FDRTdxQixFQUFPTyxPQUFPbXBCLFdBQ2JpQyxJQUNMQSxFQUFXQSxHQUF5QixTQUFiQyxFQUFzQixXQUFhLFFBQXRDLHFCQUVsQkQsRUFBU3gzQixVQUFVRyxJQUFJLEdBQUd1MkIsS0FBcUJlLE1BQy9DRCxFQUFXQSxHQUF5QixTQUFiQyxFQUFzQixXQUFhLFFBQXRDLG9CQUVsQkQsRUFBU3gzQixVQUFVRyxJQUFJLEdBQUd1MkIsS0FBcUJlLEtBQVlBLEtBR2pFLENBQ0EsU0FBU0MsRUFBY25YLEdBQ3JCLE1BQU1pWCxFQUFXalgsRUFBRTljLE9BQU91UCxRQUFRLEdBQWtCbkgsRUFBT08sT0FBT21wQixXQUFXa0IsY0FDN0UsSUFBS2UsRUFDSCxPQUVGalgsRUFBRXNGLGlCQUNGLE1BQU1wbkIsRUFBUSxFQUFhKzRCLEdBQVkzckIsRUFBT08sT0FBTytMLGVBQ3JELEdBQUl0TSxFQUFPTyxPQUFPb0ksS0FBTSxDQUN0QixHQUFJM0ksRUFBTzRJLFlBQWNoVyxFQUFPLE9BQ2hDb04sRUFBTzRWLFlBQVloakIsRUFDckIsTUFDRW9OLEVBQU84VSxRQUFRbGlCLEVBRW5CLENBQ0EsU0FBU3lELElBRVAsTUFBTXVULEVBQU01SixFQUFPNEosSUFDYnJKLEVBQVNQLEVBQU9PLE9BQU9tcEIsV0FDN0IsR0FBSStCLElBQXdCLE9BQzVCLElBR0kzcUIsRUFDQXFSLEVBSkFuYyxFQUFLZ0ssRUFBTzBwQixXQUFXMXpCLEdBQzNCQSxFQUFLZ3pCLEVBQWtCaHpCLEdBSXZCLE1BQU1rVSxFQUFlbEssRUFBTytKLFNBQVcvSixFQUFPTyxPQUFPd0osUUFBUUMsUUFBVWhLLEVBQU8rSixRQUFRdEMsT0FBTzVWLE9BQVNtTyxFQUFPeUgsT0FBTzVWLE9BQzlHaTZCLEVBQVE5ckIsRUFBT08sT0FBT29JLEtBQU96SCxLQUFLOEcsS0FBS2tDLEVBQWVsSyxFQUFPTyxPQUFPK0wsZ0JBQWtCdE0sRUFBT21LLFNBQVN0WSxPQVk1RyxHQVhJbU8sRUFBT08sT0FBT29JLE1BQ2hCd0osRUFBZ0JuUyxFQUFPb1MsbUJBQXFCLEVBQzVDdFIsRUFBVWQsRUFBT08sT0FBTytMLGVBQWlCLEVBQUlwTCxLQUFLaUwsTUFBTW5NLEVBQU80SSxVQUFZNUksRUFBT08sT0FBTytMLGdCQUFrQnRNLEVBQU80SSxnQkFDN0UsSUFBckI1SSxFQUFPeU4sV0FDdkIzTSxFQUFVZCxFQUFPeU4sVUFDakIwRSxFQUFnQm5TLEVBQU9xUyxvQkFFdkJGLEVBQWdCblMsRUFBT21TLGVBQWlCLEVBQ3hDclIsRUFBVWQsRUFBT2lJLGFBQWUsR0FHZCxZQUFoQjFILEVBQU9yUCxNQUFzQjhPLEVBQU8wcEIsV0FBVzZCLFNBQVd2ckIsRUFBTzBwQixXQUFXNkIsUUFBUTE1QixPQUFTLEVBQUcsQ0FDbEcsTUFBTTA1QixFQUFVdnJCLEVBQU8wcEIsV0FBVzZCLFFBQ2xDLElBQUlRLEVBQ0E5VSxFQUNBK1UsRUFzQkosR0FyQkl6ckIsRUFBT2dxQixpQkFDVFAsRUFBYXJuQixFQUFpQjRvQixFQUFRLEdBQUl2ckIsRUFBT2dKLGVBQWlCLFFBQVUsVUFBVSxHQUN0RmhULEVBQUdvRCxTQUFRZ3dCLElBQ1RBLEVBQU10eEIsTUFBTWtJLEVBQU9nSixlQUFpQixRQUFVLFVBQWVnaEIsR0FBY3pwQixFQUFPaXFCLG1CQUFxQixHQUE3QyxJQUFtRCxJQUUzR2pxQixFQUFPaXFCLG1CQUFxQixRQUF1QjkxQixJQUFsQnlkLElBQ25DcVosR0FBc0IxcUIsR0FBV3FSLEdBQWlCLEdBQzlDcVosRUFBcUJqckIsRUFBT2lxQixtQkFBcUIsRUFDbkRnQixFQUFxQmpyQixFQUFPaXFCLG1CQUFxQixFQUN4Q2dCLEVBQXFCLElBQzlCQSxFQUFxQixJQUd6Qk8sRUFBYTdxQixLQUFLQyxJQUFJTCxFQUFVMHFCLEVBQW9CLEdBQ3BEdlUsRUFBWThVLEdBQWM3cUIsS0FBS0UsSUFBSW1xQixFQUFRMTVCLE9BQVEwTyxFQUFPaXFCLG9CQUFzQixHQUNoRndCLEdBQVkvVSxFQUFZOFUsR0FBYyxHQUV4Q1IsRUFBUW55QixTQUFRdXlCLElBQ2QsTUFBTU0sRUFBa0IsSUFBSSxDQUFDLEdBQUksUUFBUyxhQUFjLFFBQVMsYUFBYyxTQUFTLzRCLEtBQUlnNUIsR0FBVSxHQUFHM3JCLEVBQU9zcUIsb0JBQW9CcUIsT0FBV2g1QixLQUFJaTVCLEdBQWtCLGlCQUFOQSxHQUFrQkEsRUFBRXJuQixTQUFTLEtBQU9xbkIsRUFBRWg2QixNQUFNLEtBQU9nNkIsSUFBR0MsT0FDck5ULEVBQVN4M0IsVUFBVU0sVUFBVXczQixFQUFnQixJQUUzQ2oyQixFQUFHbkUsT0FBUyxFQUNkMDVCLEVBQVFueUIsU0FBUWl6QixJQUNkLE1BQU1DLEVBQWMsRUFBYUQsR0FDN0JDLElBQWdCeHJCLEVBQ2xCdXJCLEVBQU9sNEIsVUFBVUcsT0FBT2lNLEVBQU9zcUIsa0JBQWtCMTRCLE1BQU0sTUFDOUM2TixFQUFPb0gsV0FDaEJpbEIsRUFBTzN3QixhQUFhLE9BQVEsVUFFMUI2RSxFQUFPZ3FCLGlCQUNMK0IsR0FBZVAsR0FBY08sR0FBZXJWLEdBQzlDb1YsRUFBT2w0QixVQUFVRyxPQUFPLEdBQUdpTSxFQUFPc3FCLHlCQUF5QjE0QixNQUFNLE1BRS9EbTZCLElBQWdCUCxHQUNsQkwsRUFBZVcsRUFBUSxRQUVyQkMsSUFBZ0JyVixHQUNsQnlVLEVBQWVXLEVBQVEsUUFFM0IsUUFFRyxDQUNMLE1BQU1BLEVBQVNkLEVBQVF6cUIsR0FTdkIsR0FSSXVyQixHQUNGQSxFQUFPbDRCLFVBQVVHLE9BQU9pTSxFQUFPc3FCLGtCQUFrQjE0QixNQUFNLE1BRXJENk4sRUFBT29ILFdBQ1Rta0IsRUFBUW55QixTQUFRLENBQUN1eUIsRUFBVVcsS0FDekJYLEVBQVNqd0IsYUFBYSxPQUFRNHdCLElBQWdCeHJCLEVBQVUsZ0JBQWtCLFNBQVMsSUFHbkZQLEVBQU9ncUIsZUFBZ0IsQ0FDekIsTUFBTWdDLEVBQXVCaEIsRUFBUVEsR0FDL0JTLEVBQXNCakIsRUFBUXRVLEdBQ3BDLElBQUssSUFBSXJsQixFQUFJbTZCLEVBQVluNkIsR0FBS3FsQixFQUFXcmxCLEdBQUssRUFDeEMyNUIsRUFBUTM1QixJQUNWMjVCLEVBQVEzNUIsR0FBR3VDLFVBQVVHLE9BQU8sR0FBR2lNLEVBQU9zcUIseUJBQXlCMTRCLE1BQU0sTUFHekV1NUIsRUFBZWEsRUFBc0IsUUFDckNiLEVBQWVjLEVBQXFCLE9BQ3RDLENBQ0YsQ0FDQSxHQUFJanNCLEVBQU9ncUIsZUFBZ0IsQ0FDekIsTUFBTWtDLEVBQXVCdnJCLEtBQUtFLElBQUltcUIsRUFBUTE1QixPQUFRME8sRUFBT2lxQixtQkFBcUIsR0FDNUVrQyxHQUFpQjFDLEVBQWF5QyxFQUF1QnpDLEdBQWMsRUFBSWdDLEVBQVdoQyxFQUNsRjJDLEVBQWEvaUIsRUFBTSxRQUFVLE9BQ25DMmhCLEVBQVFueUIsU0FBUWl6QixJQUNkQSxFQUFPdjBCLE1BQU1rSSxFQUFPZ0osZUFBaUIyakIsRUFBYSxPQUFTLEdBQUdELEtBQWlCLEdBRW5GLENBQ0YsQ0FDQTEyQixFQUFHb0QsU0FBUSxDQUFDZ3dCLEVBQU93RCxLQVNqQixHQVJvQixhQUFoQnJzQixFQUFPclAsT0FDVGs0QixFQUFNejNCLGlCQUFpQixHQUFrQjRPLEVBQU93cUIsZUFBZTN4QixTQUFReXpCLElBQ3JFQSxFQUFXQyxZQUFjdnNCLEVBQU9rcUIsc0JBQXNCM3BCLEVBQVUsRUFBRSxJQUVwRXNvQixFQUFNejNCLGlCQUFpQixHQUFrQjRPLEVBQU95cUIsYUFBYTV4QixTQUFRMnpCLElBQ25FQSxFQUFRRCxZQUFjdnNCLEVBQU9vcUIsb0JBQW9CbUIsRUFBTSxLQUd2QyxnQkFBaEJ2ckIsRUFBT3JQLEtBQXdCLENBQ2pDLElBQUk4N0IsRUFFRkEsRUFERXpzQixFQUFPK3BCLG9CQUNjdHFCLEVBQU9nSixlQUFpQixXQUFhLGFBRXJDaEosRUFBT2dKLGVBQWlCLGFBQWUsV0FFaEUsTUFBTWlrQixHQUFTbnNCLEVBQVUsR0FBS2dyQixFQUM5QixJQUFJb0IsRUFBUyxFQUNUQyxFQUFTLEVBQ2dCLGVBQXpCSCxFQUNGRSxFQUFTRCxFQUVURSxFQUFTRixFQUVYN0QsRUFBTXozQixpQkFBaUIsR0FBa0I0TyxFQUFPMHFCLHVCQUF1Qjd4QixTQUFRZzBCLElBQzdFQSxFQUFXdDFCLE1BQU1vRyxVQUFZLDZCQUE2Qmd2QixhQUFrQkMsS0FDNUVDLEVBQVd0MUIsTUFBTUUsbUJBQXFCLEdBQUdnSSxFQUFPTyxPQUFPQyxTQUFTLEdBRXBFLENBQ29CLFdBQWhCRCxFQUFPclAsTUFBcUJxUCxFQUFPOHBCLGNBQ3JDakIsRUFBTWlFLFVBQVk5c0IsRUFBTzhwQixhQUFhcnFCLEVBQVFjLEVBQVUsRUFBR2dyQixHQUN4QyxJQUFmYyxHQUFrQmptQixFQUFLLG1CQUFvQnlpQixLQUU1QixJQUFmd0QsR0FBa0JqbUIsRUFBSyxtQkFBb0J5aUIsR0FDL0N6aUIsRUFBSyxtQkFBb0J5aUIsSUFFdkJwcEIsRUFBT08sT0FBT3NOLGVBQWlCN04sRUFBT2dLLFNBQ3hDb2YsRUFBTWoxQixVQUFVNkwsRUFBTytpQixTQUFXLE1BQVEsVUFBVXhpQixFQUFPdW9CLFVBQzdELEdBRUosQ0FDQSxTQUFTd0UsSUFFUCxNQUFNL3NCLEVBQVNQLEVBQU9PLE9BQU9tcEIsV0FDN0IsR0FBSStCLElBQXdCLE9BQzVCLE1BQU12aEIsRUFBZWxLLEVBQU8rSixTQUFXL0osRUFBT08sT0FBT3dKLFFBQVFDLFFBQVVoSyxFQUFPK0osUUFBUXRDLE9BQU81VixPQUFTbU8sRUFBT2tJLE1BQVFsSSxFQUFPTyxPQUFPMkgsS0FBS0MsS0FBTyxFQUFJbkksRUFBT3lILE9BQU81VixPQUFTcVAsS0FBSzhHLEtBQUtoSSxFQUFPTyxPQUFPMkgsS0FBS0MsTUFBUW5JLEVBQU95SCxPQUFPNVYsT0FDN04sSUFBSW1FLEVBQUtnSyxFQUFPMHBCLFdBQVcxekIsR0FDM0JBLEVBQUtnekIsRUFBa0JoekIsR0FDdkIsSUFBSXUzQixFQUFpQixHQUNyQixHQUFvQixZQUFoQmh0QixFQUFPclAsS0FBb0IsQ0FDN0IsSUFBSXM4QixFQUFrQnh0QixFQUFPTyxPQUFPb0ksS0FBT3pILEtBQUs4RyxLQUFLa0MsRUFBZWxLLEVBQU9PLE9BQU8rTCxnQkFBa0J0TSxFQUFPbUssU0FBU3RZLE9BQ2hIbU8sRUFBT08sT0FBT3ljLFVBQVloZCxFQUFPTyxPQUFPeWMsU0FBU2hULFNBQVd3akIsRUFBa0J0akIsSUFDaEZzakIsRUFBa0J0akIsR0FFcEIsSUFBSyxJQUFJdFksRUFBSSxFQUFHQSxFQUFJNDdCLEVBQWlCNTdCLEdBQUssRUFDcEMyTyxFQUFPMnBCLGFBQ1RxRCxHQUFrQmh0QixFQUFPMnBCLGFBQWEvMkIsS0FBSzZNLEVBQVFwTyxFQUFHMk8sRUFBT3FxQixhQUc3RDJDLEdBQWtCLElBQUlodEIsRUFBTzBwQixpQkFBaUJqcUIsRUFBT29ILFVBQVksZ0JBQWtCLGFBQWE3RyxFQUFPcXFCLGtCQUFrQnJxQixFQUFPMHBCLGdCQUd0SSxDQUNvQixhQUFoQjFwQixFQUFPclAsT0FFUHE4QixFQURFaHRCLEVBQU82cEIsZUFDUTdwQixFQUFPNnBCLGVBQWVqM0IsS0FBSzZNLEVBQVFPLEVBQU93cUIsYUFBY3hxQixFQUFPeXFCLFlBRS9ELGdCQUFnQnpxQixFQUFPd3FCLHdDQUFrRHhxQixFQUFPeXFCLHVCQUdqRixnQkFBaEJ6cUIsRUFBT3JQLE9BRVBxOEIsRUFERWh0QixFQUFPNHBCLGtCQUNRNXBCLEVBQU80cEIsa0JBQWtCaDNCLEtBQUs2TSxFQUFRTyxFQUFPMHFCLHNCQUU3QyxnQkFBZ0IxcUIsRUFBTzBxQixpQ0FHNUNqckIsRUFBTzBwQixXQUFXNkIsUUFBVSxHQUM1QnYxQixFQUFHb0QsU0FBUWd3QixJQUNXLFdBQWhCN29CLEVBQU9yUCxPQUNUazRCLEVBQU1pRSxVQUFZRSxHQUFrQixJQUVsQixZQUFoQmh0QixFQUFPclAsTUFDVDhPLEVBQU8wcEIsV0FBVzZCLFFBQVF6NEIsUUFBUXMyQixFQUFNejNCLGlCQUFpQixHQUFrQjRPLEVBQU9xcUIsY0FDcEYsSUFFa0IsV0FBaEJycUIsRUFBT3JQLE1BQ1R5VixFQUFLLG1CQUFvQjNRLEVBQUcsR0FFaEMsQ0FDQSxTQUFTM0UsSUFDUDJPLEVBQU9PLE9BQU9tcEIsV0FBYSxHQUEwQjFwQixFQUFRQSxFQUFPd2pCLGVBQWVrRyxXQUFZMXBCLEVBQU9PLE9BQU9tcEIsV0FBWSxDQUN2SDF6QixHQUFJLHNCQUVOLE1BQU11SyxFQUFTUCxFQUFPTyxPQUFPbXBCLFdBQzdCLElBQUtucEIsRUFBT3ZLLEdBQUksT0FDaEIsSUFBSUEsRUFDcUIsaUJBQWR1SyxFQUFPdkssSUFBbUJnSyxFQUFPb0gsWUFDMUNwUixFQUFLZ0ssRUFBT2hLLEdBQUd2RCxjQUFjOE4sRUFBT3ZLLEtBRWpDQSxHQUEyQixpQkFBZHVLLEVBQU92SyxLQUN2QkEsRUFBSyxJQUFJdEUsU0FBU0MsaUJBQWlCNE8sRUFBT3ZLLE1BRXZDQSxJQUNIQSxFQUFLdUssRUFBT3ZLLElBRVRBLEdBQW9CLElBQWRBLEVBQUduRSxTQUNWbU8sRUFBT08sT0FBTzJoQixtQkFBMEMsaUJBQWQzaEIsRUFBT3ZLLElBQW1CL0MsTUFBTW1QLFFBQVFwTSxJQUFPQSxFQUFHbkUsT0FBUyxJQUN2R21FLEVBQUssSUFBSWdLLEVBQU9oSyxHQUFHckUsaUJBQWlCNE8sRUFBT3ZLLEtBRXZDQSxFQUFHbkUsT0FBUyxJQUNkbUUsRUFBS0EsRUFBRzNDLFFBQU8rMUIsR0FDVCxFQUFlQSxFQUFPLFdBQVcsS0FBT3BwQixFQUFPaEssS0FFbEQsS0FHSC9DLE1BQU1tUCxRQUFRcE0sSUFBcUIsSUFBZEEsRUFBR25FLFNBQWNtRSxFQUFLQSxFQUFHLElBQ2xENEUsT0FBT3dPLE9BQU9wSixFQUFPMHBCLFdBQVksQ0FDL0IxekIsT0FFRkEsRUFBS2d6QixFQUFrQmh6QixHQUN2QkEsRUFBR29ELFNBQVFnd0IsSUFDVyxZQUFoQjdvQixFQUFPclAsTUFBc0JxUCxFQUFPb3BCLFdBQ3RDUCxFQUFNajFCLFVBQVVHLFFBQVFpTSxFQUFPNHFCLGdCQUFrQixJQUFJaDVCLE1BQU0sTUFFN0RpM0IsRUFBTWoxQixVQUFVRyxJQUFJaU0sRUFBT3VxQixjQUFnQnZxQixFQUFPclAsTUFDbERrNEIsRUFBTWoxQixVQUFVRyxJQUFJMEwsRUFBT2dKLGVBQWlCekksRUFBTzZxQixnQkFBa0I3cUIsRUFBTzhxQixlQUN4RCxZQUFoQjlxQixFQUFPclAsTUFBc0JxUCxFQUFPZ3FCLGlCQUN0Q25CLEVBQU1qMUIsVUFBVUcsSUFBSSxHQUFHaU0sRUFBT3VxQixnQkFBZ0J2cUIsRUFBT3JQLGdCQUNyRHM2QixFQUFxQixFQUNqQmpyQixFQUFPaXFCLG1CQUFxQixJQUM5QmpxQixFQUFPaXFCLG1CQUFxQixJQUdaLGdCQUFoQmpxQixFQUFPclAsTUFBMEJxUCxFQUFPK3BCLHFCQUMxQ2xCLEVBQU1qMUIsVUFBVUcsSUFBSWlNLEVBQU8ycUIsMEJBRXpCM3FCLEVBQU9vcEIsV0FDVFAsRUFBTWx1QixpQkFBaUIsUUFBUzJ3QixHQUU3QjdyQixFQUFPZ0ssU0FDVm9mLEVBQU1qMUIsVUFBVUcsSUFBSWlNLEVBQU91b0IsVUFDN0IsSUFFSixDQUNBLFNBQVNmLElBQ1AsTUFBTXhuQixFQUFTUCxFQUFPTyxPQUFPbXBCLFdBQzdCLEdBQUkrQixJQUF3QixPQUM1QixJQUFJejFCLEVBQUtnSyxFQUFPMHBCLFdBQVcxekIsR0FDdkJBLElBQ0ZBLEVBQUtnekIsRUFBa0JoekIsR0FDdkJBLEVBQUdvRCxTQUFRZ3dCLElBQ1RBLEVBQU1qMUIsVUFBVU0sT0FBTzhMLEVBQU9zb0IsYUFDOUJPLEVBQU1qMUIsVUFBVU0sT0FBTzhMLEVBQU91cUIsY0FBZ0J2cUIsRUFBT3JQLE1BQ3JEazRCLEVBQU1qMUIsVUFBVU0sT0FBT3VMLEVBQU9nSixlQUFpQnpJLEVBQU82cUIsZ0JBQWtCN3FCLEVBQU84cUIsZUFDM0U5cUIsRUFBT29wQixZQUNUUCxFQUFNajFCLFVBQVVNLFdBQVc4TCxFQUFPNHFCLGdCQUFrQixJQUFJaDVCLE1BQU0sTUFDOURpM0IsRUFBTWp1QixvQkFBb0IsUUFBUzB3QixHQUNyQyxLQUdBN3JCLEVBQU8wcEIsV0FBVzZCLFNBQVN2ckIsRUFBTzBwQixXQUFXNkIsUUFBUW55QixTQUFRZ3dCLEdBQVNBLEVBQU1qMUIsVUFBVU0sVUFBVThMLEVBQU9zcUIsa0JBQWtCMTRCLE1BQU0sT0FDckksQ0FDQW1ULEVBQUcsbUJBQW1CLEtBQ3BCLElBQUt0RixFQUFPMHBCLGFBQWUxcEIsRUFBTzBwQixXQUFXMXpCLEdBQUksT0FDakQsTUFBTXVLLEVBQVNQLEVBQU9PLE9BQU9tcEIsV0FDN0IsSUFBSSxHQUNGMXpCLEdBQ0VnSyxFQUFPMHBCLFdBQ1gxekIsRUFBS2d6QixFQUFrQmh6QixHQUN2QkEsRUFBR29ELFNBQVFnd0IsSUFDVEEsRUFBTWoxQixVQUFVTSxPQUFPOEwsRUFBTzZxQixnQkFBaUI3cUIsRUFBTzhxQixlQUN0RGpDLEVBQU1qMUIsVUFBVUcsSUFBSTBMLEVBQU9nSixlQUFpQnpJLEVBQU82cUIsZ0JBQWtCN3FCLEVBQU84cUIsY0FBYyxHQUMxRixJQUVKL2xCLEVBQUcsUUFBUSxNQUNnQyxJQUFyQ3RGLEVBQU9PLE9BQU9tcEIsV0FBVzFmLFFBRTNCK1osS0FFQTF5QixJQUNBaThCLElBQ0FqM0IsSUFDRixJQUVGaVAsRUFBRyxxQkFBcUIsVUFDVSxJQUFyQnRGLEVBQU95TixXQUNoQnBYLEdBQ0YsSUFFRmlQLEVBQUcsbUJBQW1CLEtBQ3BCalAsR0FBUSxJQUVWaVAsRUFBRyx3QkFBd0IsS0FDekJnb0IsSUFDQWozQixHQUFRLElBRVZpUCxFQUFHLFdBQVcsS0FDWnlpQixHQUFTLElBRVh6aUIsRUFBRyxrQkFBa0IsS0FDbkIsSUFBSSxHQUNGdFAsR0FDRWdLLEVBQU8wcEIsV0FDUDF6QixJQUNGQSxFQUFLZ3pCLEVBQWtCaHpCLEdBQ3ZCQSxFQUFHb0QsU0FBUWd3QixHQUFTQSxFQUFNajFCLFVBQVU2TCxFQUFPZ0ssUUFBVSxTQUFXLE9BQU9oSyxFQUFPTyxPQUFPbXBCLFdBQVdaLGFBQ2xHLElBRUZ4akIsRUFBRyxlQUFlLEtBQ2hCalAsR0FBUSxJQUVWaVAsRUFBRyxTQUFTLENBQUNta0IsRUFBSS9VLEtBQ2YsTUFBTWlHLEVBQVdqRyxFQUFFOWMsT0FDYjVCLEVBQUtnekIsRUFBa0JocEIsRUFBTzBwQixXQUFXMXpCLElBQy9DLEdBQUlnSyxFQUFPTyxPQUFPbXBCLFdBQVcxekIsSUFBTWdLLEVBQU9PLE9BQU9tcEIsV0FBV2YsYUFBZTN5QixHQUFNQSxFQUFHbkUsT0FBUyxJQUFNOG9CLEVBQVN4bUIsVUFBVUMsU0FBUzRMLEVBQU9PLE9BQU9tcEIsV0FBV2tCLGFBQWMsQ0FDcEssR0FBSTVxQixFQUFPZ2dCLGFBQWVoZ0IsRUFBT2dnQixXQUFXQyxRQUFVdEYsSUFBYTNhLEVBQU9nZ0IsV0FBV0MsUUFBVWpnQixFQUFPZ2dCLFdBQVdFLFFBQVV2RixJQUFhM2EsRUFBT2dnQixXQUFXRSxRQUFTLE9BQ25LLE1BQU0wSixFQUFXNXpCLEVBQUcsR0FBRzdCLFVBQVVDLFNBQVM0TCxFQUFPTyxPQUFPbXBCLFdBQVdiLGFBRWpFbGlCLEdBRGUsSUFBYmlqQixFQUNHLGlCQUVBLGtCQUVQNXpCLEVBQUdvRCxTQUFRZ3dCLEdBQVNBLEVBQU1qMUIsVUFBVTAxQixPQUFPN3BCLEVBQU9PLE9BQU9tcEIsV0FBV2IsY0FDdEUsS0FFRixNQWFNOUUsRUFBVSxLQUNkL2pCLEVBQU9oSyxHQUFHN0IsVUFBVUcsSUFBSTBMLEVBQU9PLE9BQU9tcEIsV0FBVzRCLHlCQUNqRCxJQUFJLEdBQ0Z0MUIsR0FDRWdLLEVBQU8wcEIsV0FDUDF6QixJQUNGQSxFQUFLZ3pCLEVBQWtCaHpCLEdBQ3ZCQSxFQUFHb0QsU0FBUWd3QixHQUFTQSxFQUFNajFCLFVBQVVHLElBQUkwTCxFQUFPTyxPQUFPbXBCLFdBQVc0Qiw0QkFFbkV2RCxHQUFTLEVBRVhudEIsT0FBT3dPLE9BQU9wSixFQUFPMHBCLFdBQVksQ0FDL0IxRixPQXpCYSxLQUNiaGtCLEVBQU9oSyxHQUFHN0IsVUFBVU0sT0FBT3VMLEVBQU9PLE9BQU9tcEIsV0FBVzRCLHlCQUNwRCxJQUFJLEdBQ0Z0MUIsR0FDRWdLLEVBQU8wcEIsV0FDUDF6QixJQUNGQSxFQUFLZ3pCLEVBQWtCaHpCLEdBQ3ZCQSxFQUFHb0QsU0FBUWd3QixHQUFTQSxFQUFNajFCLFVBQVVNLE9BQU91TCxFQUFPTyxPQUFPbXBCLFdBQVc0Qiw0QkFFdEVqNkIsSUFDQWk4QixJQUNBajNCLEdBQVEsRUFlUjB0QixVQUNBdUosU0FDQWozQixTQUNBaEYsT0FDQTAyQixXQUVKLENDdmJBLFNBQVMsR0FBYTBGLEVBQWMvckIsR0FDbEMsTUFBTWdzQixFQUFjLEVBQW9CaHNCLEdBS3hDLE9BSklnc0IsSUFBZ0Joc0IsSUFDbEJnc0IsRUFBWTUxQixNQUFNNjFCLG1CQUFxQixTQUN2Q0QsRUFBWTUxQixNQUFNLCtCQUFpQyxVQUU5QzQxQixDQUNULENDUEEsU0FBUyxHQUEyQjN0QixHQUNsQyxJQUFJLE9BQ0ZDLEVBQU0sU0FDTjFKLEVBQVEsa0JBQ1JzM0IsRUFBaUIsVUFDakJDLEdBQ0U5dEIsRUFDSixNQUFNLFlBQ0prSSxHQUNFakksRUFTSixHQUFJQSxFQUFPTyxPQUFPaVQsa0JBQWlDLElBQWJsZCxFQUFnQixDQUNwRCxJQUNJdzNCLEVBREFDLEdBQWlCLEVBR25CRCxFQURFRCxFQUNvQkQsRUFFQUEsRUFBa0J2NkIsUUFBT3E2QixJQUM3QyxNQUFNMTNCLEVBQUswM0IsRUFBWXY1QixVQUFVQyxTQUFTLDBCQWYvQjRCLEtBQ2YsSUFBS0EsRUFBR2lFLGNBR04sT0FEYytGLEVBQU95SCxPQUFPcFUsUUFBT3FPLEdBQVdBLEVBQVFDLFlBQWNELEVBQVFDLGFBQWUzTCxFQUFHekQsYUFBWSxHQUc1RyxPQUFPeUQsRUFBR2lFLGFBQWEsRUFTbUQrekIsQ0FBU04sR0FBZUEsRUFDOUYsT0FBTzF0QixFQUFPeVgsY0FBY3poQixLQUFRaVMsQ0FBVyxJQUduRDZsQixFQUFvQjEwQixTQUFRcEQsS1ArT2hDLFNBQThCQSxFQUFJc0gsR0FNNUJBLEdBQ0Z0SCxFQUFHa0YsaUJBQWlCLGlCQU50QixTQUFTK3lCLEVBQWF2WixHQUNoQkEsRUFBRTljLFNBQVc1QixJQUNqQnNILEVBQVNuSyxLQUFLNkMsRUFBSTBlLEdBQ2xCMWUsRUFBR21GLG9CQUFvQixnQkFBaUI4eUIsR0FDMUMsR0FJRixDT3ZQTSxDQUFxQmo0QixHQUFJLEtBQ3ZCLEdBQUkrM0IsRUFBZ0IsT0FDcEIsSUFBSy90QixHQUFVQSxFQUFPMkYsVUFBVyxPQUNqQ29vQixHQUFpQixFQUNqQi90QixFQUFPb1UsV0FBWSxFQUNuQixNQUFNb0ssRUFBTSxJQUFJNXFCLE9BQU8rRSxZQUFZLGdCQUFpQixDQUNsRDhsQixTQUFTLEVBQ1RaLFlBQVksSUFFZDdkLEVBQU9TLFVBQVUvSCxjQUFjOGxCLEVBQUksR0FDbkMsR0FFTixDQUNGLENDeENBLFNBQVMwUCxHQUFXbnVCLEdBQ2xCLElBQUksT0FDRkMsRUFBTSxhQUNOOGxCLEVBQVksR0FDWnhnQixHQUNFdkYsRUFDSitsQixFQUFhLENBQ1hxSSxXQUFZLENBQ1ZDLFdBQVcsTUNiakIsU0FBb0I3dEIsR0FDbEIsTUFBTSxPQUNKaU0sRUFBTSxPQUNOeE0sRUFBTSxHQUNOc0YsRUFBRSxhQUNGb08sRUFBWSxjQUNabEYsRUFBYSxnQkFDYjZmLEVBQWUsWUFDZkMsRUFBVyxnQkFDWEMsRUFBZSxnQkFDZkMsR0FDRWp1QixFQStCSixJQUFJa3VCLEVBOUJKbnBCLEVBQUcsY0FBYyxLQUNmLEdBQUl0RixFQUFPTyxPQUFPaU0sU0FBV0EsRUFBUSxPQUNyQ3hNLEVBQU9pbEIsV0FBV255QixLQUFLLEdBQUdrTixFQUFPTyxPQUFPMk4seUJBQXlCMUIsS0FDN0Q4aEIsR0FBZUEsS0FDakJ0dUIsRUFBT2lsQixXQUFXbnlCLEtBQUssR0FBR2tOLEVBQU9PLE9BQU8yTiw0QkFFMUMsTUFBTXdnQixFQUF3QkwsRUFBa0JBLElBQW9CLENBQUMsRUFDckV6ekIsT0FBT3dPLE9BQU9wSixFQUFPTyxPQUFRbXVCLEdBQzdCOXpCLE9BQU93TyxPQUFPcEosRUFBT3dqQixlQUFnQmtMLEVBQXNCLElBRTdEcHBCLEVBQUcsZ0JBQWdCLEtBQ2J0RixFQUFPTyxPQUFPaU0sU0FBV0EsR0FDN0JrSCxHQUFjLElBRWhCcE8sRUFBRyxpQkFBaUIsQ0FBQ21rQixFQUFJbnpCLEtBQ25CMEosRUFBT08sT0FBT2lNLFNBQVdBLEdBQzdCZ0MsRUFBY2xZLEVBQVMsSUFFekJnUCxFQUFHLGlCQUFpQixLQUNsQixHQUFJdEYsRUFBT08sT0FBT2lNLFNBQVdBLEdBQ3pCK2hCLEVBQWlCLENBQ25CLElBQUtDLElBQW9CQSxJQUFrQkcsYUFBYyxPQUV6RDN1QixFQUFPeUgsT0FBT3JPLFNBQVFzSSxJQUNwQkEsRUFBUS9QLGlCQUFpQixnSEFBZ0h5SCxTQUFRdzFCLEdBQVlBLEVBQVNuNkIsVUFBUyxJQUdqTDg1QixHQUNGLEtBR0ZqcEIsRUFBRyxpQkFBaUIsS0FDZHRGLEVBQU9PLE9BQU9pTSxTQUFXQSxJQUN4QnhNLEVBQU95SCxPQUFPNVYsU0FDakI0OEIsR0FBeUIsR0FFM0JweEIsdUJBQXNCLEtBQ2hCb3hCLEdBQTBCenVCLEVBQU95SCxRQUFVekgsRUFBT3lILE9BQU81VixTQUMzRDZoQixJQUNBK2EsR0FBeUIsRUFDM0IsSUFDQSxHQUVOLENETkUsQ0FBVyxDQUNUamlCLE9BQVEsT0FDUnhNLFNBQ0FzRixLQUNBb08sYUFyQ21CLEtBQ25CLE1BQU0sT0FDSmpNLEdBQ0V6SCxFQUNXQSxFQUFPTyxPQUFPNHRCLFdBQzdCLElBQUssSUFBSXY4QixFQUFJLEVBQUdBLEVBQUk2VixFQUFPNVYsT0FBUUQsR0FBSyxFQUFHLENBQ3pDLE1BQU04UCxFQUFVMUIsRUFBT3lILE9BQU83VixHQUU5QixJQUFJaTlCLEdBRFdudEIsRUFBUXFOLGtCQUVsQi9PLEVBQU9PLE9BQU9pVCxtQkFBa0JxYixHQUFNN3VCLEVBQU9JLFdBQ2xELElBQUkwdUIsRUFBSyxFQUNKOXVCLEVBQU9nSixpQkFDVjhsQixFQUFLRCxFQUNMQSxFQUFLLEdBRVAsTUFBTUUsRUFBZS91QixFQUFPTyxPQUFPNHRCLFdBQVdDLFVBQVlsdEIsS0FBS0MsSUFBSSxFQUFJRCxLQUFLbUwsSUFBSTNLLEVBQVFULFVBQVcsR0FBSyxFQUFJQyxLQUFLRSxJQUFJRixLQUFLQyxJQUFJTyxFQUFRVCxVQUFXLEdBQUksR0FDL0kwWixFQUFXLEdBQWFwYSxFQUFRbUIsR0FDdENpWixFQUFTN2lCLE1BQU1rM0IsUUFBVUQsRUFDekJwVSxFQUFTN2lCLE1BQU1vRyxVQUFZLGVBQWUyd0IsUUFBU0MsV0FDckQsR0FtQkF0Z0IsY0FqQm9CbFksSUFDcEIsTUFBTXMzQixFQUFvQjV0QixFQUFPeUgsT0FBT3ZVLEtBQUl3TyxHQUFXLEVBQW9CQSxLQUMzRWtzQixFQUFrQngwQixTQUFRcEQsSUFDeEJBLEVBQUc4QixNQUFNRSxtQkFBcUIsR0FBRzFCLEtBQVksSUFFL0MsR0FBMkIsQ0FDekIwSixTQUNBMUosV0FDQXMzQixvQkFDQUMsV0FBVyxHQUNYLEVBUUZRLGdCQUFpQixLQUFNLENBQ3JCdm1CLGNBQWUsRUFDZndFLGVBQWdCLEVBQ2hCeUIscUJBQXFCLEVBQ3JCbkQsYUFBYyxFQUNkNEksa0JBQW1CeFQsRUFBT08sT0FBTzRLLFdBR3ZDLENQK3RIQXZRLE9BQU9FLEtBQUs2bkIsSUFBWXZwQixTQUFRNjFCLElBQzlCcjBCLE9BQU9FLEtBQUs2bkIsR0FBV3NNLElBQWlCNzFCLFNBQVE4MUIsSUFDOUMxSixHQUFPcDBCLFVBQVU4OUIsR0FBZXZNLEdBQVdzTSxHQUFnQkMsRUFBWSxHQUN2RSxJQUVKMUosR0FBTytDLElBQUksQ0EvckhYLFNBQWdCeG9CLEdBQ2QsSUFBSSxPQUNGQyxFQUFNLEdBQ05zRixFQUFFLEtBQ0ZxQixHQUNFNUcsRUFDSixNQUFNbk0sRUFBUyxJQUNmLElBQUl1N0IsRUFBVyxLQUNYQyxFQUFpQixLQUNyQixNQUFNQyxFQUFnQixLQUNmcnZCLElBQVVBLEVBQU8yRixXQUFjM0YsRUFBTzhTLGNBQzNDbk0sRUFBSyxnQkFDTEEsRUFBSyxVQUFTLEVBc0NWMm9CLEVBQTJCLEtBQzFCdHZCLElBQVVBLEVBQU8yRixXQUFjM0YsRUFBTzhTLGFBQzNDbk0sRUFBSyxvQkFBb0IsRUFFM0JyQixFQUFHLFFBQVEsS0FDTHRGLEVBQU9PLE9BQU9zaEIscUJBQW1ELElBQTFCanVCLEVBQU8yN0IsZUF4QzdDdnZCLElBQVVBLEVBQU8yRixXQUFjM0YsRUFBTzhTLGNBQzNDcWMsRUFBVyxJQUFJSSxnQkFBZXBLLElBQzVCaUssRUFBaUJ4N0IsRUFBT3lKLHVCQUFzQixLQUM1QyxNQUFNLE1BQ0oyRyxFQUFLLE9BQ0wvTCxHQUNFK0gsRUFDSixJQUFJd3ZCLEVBQVd4ckIsRUFDWHVLLEVBQVl0VyxFQUNoQmt0QixFQUFRL3JCLFNBQVFxMkIsSUFDZCxJQUFJLGVBQ0ZDLEVBQWMsWUFDZEMsRUFBVyxPQUNYLzNCLEdBQ0U2M0IsRUFDQTczQixHQUFVQSxJQUFXb0ksRUFBT2hLLEtBQ2hDdzVCLEVBQVdHLEVBQWNBLEVBQVkzckIsT0FBUzByQixFQUFlLElBQU1BLEdBQWdCRSxXQUNuRnJoQixFQUFZb2hCLEVBQWNBLEVBQVkxM0IsUUFBVXkzQixFQUFlLElBQU1BLEdBQWdCRyxVQUFTLElBRTVGTCxJQUFheHJCLEdBQVN1SyxJQUFjdFcsR0FDdENvM0IsR0FDRixHQUNBLElBRUpGLEVBQVNXLFFBQVE5dkIsRUFBT2hLLE1Bb0J4QnBDLEVBQU9zSCxpQkFBaUIsU0FBVW0wQixHQUNsQ3o3QixFQUFPc0gsaUJBQWlCLG9CQUFxQm8wQixHQUF5QixJQUV4RWhxQixFQUFHLFdBQVcsS0FwQlI4cEIsR0FDRng3QixFQUFPMkoscUJBQXFCNnhCLEdBRTFCRCxHQUFZQSxFQUFTWSxXQUFhL3ZCLEVBQU9oSyxLQUMzQ201QixFQUFTWSxVQUFVL3ZCLEVBQU9oSyxJQUMxQm01QixFQUFXLE1BaUJidjdCLEVBQU91SCxvQkFBb0IsU0FBVWswQixHQUNyQ3o3QixFQUFPdUgsb0JBQW9CLG9CQUFxQm0wQixFQUF5QixHQUU3RSxFQUVBLFNBQWtCdnZCLEdBQ2hCLElBQUksT0FDRkMsRUFBTSxhQUNOOGxCLEVBQVksR0FDWnhnQixFQUFFLEtBQ0ZxQixHQUNFNUcsRUFDSixNQUFNaXdCLEVBQVksR0FDWnA4QixFQUFTLElBQ1RxOEIsRUFBUyxTQUFVcjRCLEVBQVFzNEIsUUFDZixJQUFaQSxJQUNGQSxFQUFVLENBQUMsR0FFYixNQUNNZixFQUFXLElBREl2N0IsRUFBT3U4QixrQkFBb0J2OEIsRUFBT3c4Qix5QkFDckJDLElBSWhDLEdBQUlyd0IsRUFBTzhZLG9CQUFxQixPQUNoQyxHQUF5QixJQUFyQnVYLEVBQVV4K0IsT0FFWixZQURBOFUsRUFBSyxpQkFBa0IwcEIsRUFBVSxJQUduQyxNQUFNQyxFQUFpQixXQUNyQjNwQixFQUFLLGlCQUFrQjBwQixFQUFVLEdBQ25DLEVBQ0l6OEIsRUFBT3lKLHNCQUNUekosRUFBT3lKLHNCQUFzQml6QixHQUU3QjE4QixFQUFPd0QsV0FBV2s1QixFQUFnQixFQUNwQyxJQUVGbkIsRUFBU1csUUFBUWw0QixFQUFRLENBQ3ZCMjRCLGdCQUEwQyxJQUF2QkwsRUFBUUssWUFBb0NMLEVBQVFLLFdBQ3ZFQyxlQUF3QyxJQUF0Qk4sRUFBUU0sV0FBbUNOLEVBQVFNLFVBQ3JFQyxtQkFBZ0QsSUFBMUJQLEVBQVFPLGVBQXVDUCxFQUFRTyxnQkFFL0VULEVBQVVsOUIsS0FBS3E4QixFQUNqQixFQXlCQXJKLEVBQWEsQ0FDWHFKLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQkMsc0JBQXNCLElBRXhCcnJCLEVBQUcsUUE3QlUsS0FDWCxHQUFLdEYsRUFBT08sT0FBTzR1QixTQUFuQixDQUNBLEdBQUludkIsRUFBT08sT0FBT213QixlQUFnQixDQUNoQyxNQUFNRSxFQUFtQixFQUFlNXdCLEVBQU82bkIsUUFDL0MsSUFBSyxJQUFJajJCLEVBQUksRUFBR0EsRUFBSWcvQixFQUFpQi8rQixPQUFRRCxHQUFLLEVBQ2hEcStCLEVBQU9XLEVBQWlCaC9CLEdBRTVCLENBRUFxK0IsRUFBT2p3QixFQUFPNm5CLE9BQVEsQ0FDcEIySSxVQUFXeHdCLEVBQU9PLE9BQU9vd0IsdUJBSTNCVixFQUFPandCLEVBQU9TLFVBQVcsQ0FDdkI4dkIsWUFBWSxHQWRxQixDQWVqQyxJQWNKanJCLEVBQUcsV0FaYSxLQUNkMHFCLEVBQVU1MkIsU0FBUSsxQixJQUNoQkEsRUFBUzBCLFlBQVksSUFFdkJiLEVBQVV2cEIsT0FBTyxFQUFHdXBCLEVBQVVuK0IsT0FBTyxHQVN6QyxJU3RPQSxJQUFJaS9CLEdBQW1CLEtBRXZCLE1BQU1DLEdBQWlCQSxDQUFDL3dCLEVBQVEwcEIsRUFBWTl4QixLQUMxQyxNQUFNNlAsRUFBU3pILEVBQU95SCxPQUVsQkEsRUFBTzVWLFFBQVU2M0IsR0FDbkJqaUIsRUFBT3JPLFNBQVFzUyxJQUNiQSxFQUFNalosY0FBY21GLEdBQVF5MUIsVUFBYSxHQUN2QzNELEVBQVdqM0IsY0FBYyxvQ0FBb0M0NkIsV0FDN0QsR0FFTixFQUVJMkQsR0FBa0JBLENBQUN0SCxFQUFZOXhCLEtBQy9CQSxHQUFVOHhCLEVBQVcxekIsS0FDdkI0QixFQUFPeTFCLFVBQWEsR0FDbEIzRCxFQUFXMXpCLEdBQUd2RCxjQUFjLG9DQUFvQzQ2QixZQUVwRSxFQUVJNEQsR0FBd0JqeEIsSUFDNUIsR0FBSUEsRUFBT3lILE9BQU81VixRQUFVLEVBQUcsQ0FDN0IsTUFBTTA1QixFQUFVdnJCLEVBQU8wcEIsV0FBVzZCLFFBQzVCOWpCLEVBQVN6SCxFQUFPeUgsT0FDaEJ5cEIsRUFBV2x4QixFQUFPNEksVUFFcEIyaUIsRUFBUTE1QixRQUNWNEYsRUFBYzh6QixFQUFTLGFBRXZCMzNCLE9BQU8yQixZQUFjLEtBQ2pCZzJCLEVBQVEyRixHQUFVLzhCLFVBQVVHLElBQUksYUFFcENpM0IsRUFBUTJGLEVBQVcsSUFDZjNGLEVBQVEyRixFQUFXLEdBQUcvOEIsVUFBVUcsSUFBSSxhQUV4Q2kzQixFQUFRMkYsRUFBVyxJQUNmM0YsRUFBUTJGLEVBQVcsR0FBRy84QixVQUFVRyxJQUFJLGFBR3hDVixPQUFPMkIsV0FBYSxLQUFPZzJCLEVBQVEyRixFQUFXLElBQzFDM0YsRUFBUTJGLEVBQVcsR0FBRy84QixVQUFVRyxJQUFJLGFBSXRDVixPQUFPMkIsWUFBYyxNQUNwQjI3QixJQUFhenBCLEVBQU81VixPQUFTLEdBQUtxL0IsSUFBYXpwQixFQUFPNVYsT0FBUyxLQUVoRTA1QixFQUFROWpCLEVBQU81VixPQUFTLEdBQUdzQyxVQUFVRyxJQUFJLGFBQ3pDaTNCLEVBQVE5akIsRUFBTzVWLE9BQVMsR0FBR3NDLFVBQVVHLElBQUksYUFDekNpM0IsRUFBUTlqQixFQUFPNVYsT0FBUyxHQUFHc0MsVUFBVUcsSUFBSSxjQUV2Q1YsT0FBTzJCLFdBQWEsS0FBTzI3QixJQUFhenBCLEVBQU81VixPQUFTLElBQzFEMDVCLEVBQVEsR0FBR3AzQixVQUFVRyxJQUFJLGFBQ3pCaTNCLEVBQVEsR0FBR3AzQixVQUFVRyxJQUFJLGFBQ3pCaTNCLEVBQVEsR0FBR3AzQixVQUFVRyxJQUFJLGVBRWxCVixPQUFPMkIsV0FBYSxLQUM3QmcyQixFQUFRbnlCLFNBQVFpekIsSUFDVEEsRUFBT2w0QixVQUFVQyxTQUFTLG9DQUM3Qmk0QixFQUFPbDRCLFVBQVVHLElBQUksWUFDdkIsR0FHTixHQUVJNjhCLEdBQWVueEIsSUFDbkIsTUFBTXlILEVBQVN4VSxNQUFNcVYsS0FBS3RJLEVBQU9oSyxHQUFHckUsaUJBQWlCLGtCQUVyRDhGLEVBQWNnUSxFQUFRLGFBRXRCQSxFQUFPck8sU0FBUSxDQUFDc1MsRUFBTzlZLEtBQ2pCOFksRUFBTXZYLFVBQVVDLFNBQVMseUJBQzNCcVQsRUFBTzdVLEdBQU91QixVQUFVRyxJQUFJLGFBQ3hCVixPQUFPMkIsV0FBYSxNQUN0QmtTLEVBQU83VSxFQUFRLElBQUs2VSxFQUFPN1UsRUFBUSxHQUFHdUIsVUFBVUcsSUFBSSxhQUNwRG1ULEVBQU83VSxFQUFRLElBQUs2VSxFQUFPN1UsRUFBUSxHQUFHdUIsVUFBVUcsSUFBSSxjQUV4RCxHQUNBLEVBd1RKVixPQUFPc0gsaUJBQWlCLFFBQVEsU0FBVXdaLEdBcFRwQ2hqQixTQUFTZSxjQUFjLHdCQUN6QixJQUFJK3lCLEdBQU8sc0JBQXVCLENBQ2hDRyxRQUFTLENBQUMrQyxHQUFZd0YsSUFDdEJpQixVQUFVLEVBQ1Z1QixnQkFBZ0IsRUFDaEJDLHNCQUFzQixFQUN0QjdvQixjQUFlLEVBQ2Z0SCxNQUFPLElBQ1BtSSxNQUFNLEVBR042RCxPQUFRLE9BR1J3VCxXQUFZLENBQ1ZFLE9BQVEsdURBQ1JELE9BQVEsMERBS1Z2dUIsU0FBU2UsY0FBYyxrQkFDekIsSUFBSSt5QixHQUFPLGdCQUFpQixDQUMxQkcsUUFBUyxDQUFDK0MsR0FBWW9CLElBQ3RCcUYsVUFBVSxFQUNWdUIsZ0JBQWdCLEVBQ2hCM2YsWUFBWSxFQUNaakosY0FBZSxFQUNmdEgsTUFBTyxJQUNQbUksTUFBTSxFQUdOcVgsV0FBWSxDQUNWRSxPQUFRLDRCQUNSRCxPQUFRLDZCQUlWeUosV0FBWSxDQUNWMXpCLEdBQUksbUNBQ0oyekIsV0FBVyxFQUNYTyxhQUFjLFNBQVV0M0IsRUFBT3NELEdBQzdCLE1BQ0UsZ0JBQWtCQSxFQUFsQixPQUE0Q3RELEVBQVEsR0FBSyxTQUU3RCxHQUlGNlksWUFBYSxDQUNYLElBQUssQ0FDSG1KLFVBQVcsV0FDWDlNLGNBQWUsU0FLbkJ4QyxHQUFJLENBQ0ZqVSxLQUFNMk8sSUFDSixNQUFNb3hCLEVBQVdweEIsRUFBT2dtQixhQUFhcGIsYUFDL0J5bUIsRUFBa0JyeEIsRUFBT3lILE9BQU8sR0FBR3NCLGFBQWVxb0IsRUFDeERweEIsRUFBT2hLLEdBQUc4QixNQUFNRyxPQUFTbzVCLEVBQWtCLEtBRTNDTixHQUFlL3dCLEVBQVFBLEVBQU8wcEIsV0FBVzF6QixHQUFJLHNCQUFzQixFQUVyRXM3QixZQUFhdHhCLElBQ1grd0IsR0FBZS93QixFQUFRQSxFQUFPMHBCLFdBQVcxekIsR0FBSSx1QkFDN0NpN0IsR0FBc0JqeEIsRUFBTyxLQUtqQ3RPLFNBQVNlLGNBQWMsNkJBQ3pCLElBQUkreUIsR0FBTywyQkFBNEIsQ0FDckNHLFFBQVMsQ0FBQytDLEdBQVlvQixJQUN0QnFGLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQjVvQixjQUFlLElBQ2Y4QyxhQUFjLEdBQ2RwSyxNQUFPLElBQ1BtSSxNQUFNLEVBQ05rWCxZQUFZLEVBQ1o5UixxQkFBcUIsRUFDckJ3akIsdUJBQXVCLEVBR3ZCdlIsV0FBWSxDQUNWRSxPQUFRLHVDQUNSRCxPQUFRLHdDQUlWeUosV0FBWSxDQUNWMXpCLEdBQUksa0NBQ0oyekIsV0FBVyxFQUNYTyxhQUFjLFNBQVV0M0IsRUFBT3NELEdBQzdCLE1BQ0UsZ0JBQWtCQSxFQUFsQixPQUE0Q3RELEVBQVEsR0FBSyxTQUU3RCxHQUlGNlksWUFBYSxDQUNYLElBQUssQ0FDSDNELGNBQWUsRUFDZjhDLGFBQWMsTUFLbEJ0RixHQUFJLENBQ0Zrc0IsVUFBV3h4QixJQUNUZ3hCLEdBQ0VoeEIsRUFBTzBwQixXQUNQaDRCLFNBQVNlLGNBQWMsNkJBRXpCdytCLEdBQXNCanhCLEdBQ3RCbXhCLEdBQWFueEIsRUFBTyxFQUV0Qnl4QixnQkFBaUJ6eEIsSUFDZmd4QixHQUNFaHhCLEVBQU8wcEIsV0FDUGg0QixTQUFTZSxjQUFjLDZCQUd6QncrQixHQUFzQmp4QixFQUFPLEVBRS9CMHhCLDJCQUE0QjF4QixJQUMxQm14QixHQUFhbnhCLEVBQU8sRUFFdEIyeEIsVUFBVzN4QixJQUNUbXhCLEdBQWFueEIsRUFBTyxLQUt4QnRPLFNBQVNlLGNBQWMsbUJBQ3pCLElBQUkreUIsR0FBTyxpQkFBa0IsQ0FDM0JHLFFBQVMsQ0FBQytDLEdBQVlvQixJQUN0QnFGLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQjVvQixjQUFlLEVBQ2Y4QyxhQUFjLEdBQ2RwSyxNQUFPLElBQ1BtSSxNQUFNLEVBQ05vRixxQkFBcUIsRUFDckJ3akIsdUJBQXVCLEVBR3ZCdlIsV0FBWSxDQUNWRSxPQUFRLDZCQUNSRCxPQUFRLDhCQUlWeUosV0FBWSxDQUNWMXpCLEdBQUksd0JBQ0oyekIsV0FBVyxFQUNYTyxhQUFjLFNBQVV0M0IsRUFBT3NELEdBQzdCLE1BQ0UsZ0JBQWtCQSxFQUFsQixPQUE0Q3RELEVBQVEsR0FBSyxTQUU3RCxHQUlGNlksWUFBYSxDQUNYLElBQUssQ0FDSDNELGNBQWUsT0FLbkJ4QyxHQUFJLENBQ0Zrc0IsVUFBV3h4QixJQUNUZ3hCLEdBQ0VoeEIsRUFBTzBwQixXQUNQaDRCLFNBQVNlLGNBQWMsMEJBR3pCdytCLEdBQXNCanhCLEVBQU8sRUFFL0JzeEIsWUFBYXR4QixJQUNYZ3hCLEdBQ0VoeEIsRUFBTzBwQixXQUNQaDRCLFNBQVNlLGNBQWMseUJBQ3hCLEVBRUhnL0IsZ0JBQWlCenhCLElBQ2ZpeEIsR0FBc0JqeEIsRUFBTyxLQUtqQ3RPLFNBQVNlLGNBQWMseUJBQ3pCLElBQUkreUIsR0FBTyx1QkFBd0IsQ0FDakNHLFFBQVMsQ0FBQytDLEdBQVlvQixJQUN0QnFGLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQmx3QixNQUFPLElBQ1BtSSxNQUFNLEVBQ05iLGNBQWUsSUFDZjhDLGFBQWMsR0FDZG1ELHFCQUFxQixFQUNyQndqQix1QkFBdUIsRUFDdkJ2UyxZQUFZLEVBR1pnQixXQUFZLENBQ1ZFLE9BQVEsbUNBQ1JELE9BQVEsb0NBSVZ5SixXQUFZLENBQ1YxekIsR0FBSSw4QkFDSjJ6QixXQUFXLEVBQ1hPLGFBQWMsU0FBVXQzQixFQUFPc0QsR0FDN0IsTUFDRSxnQkFBa0JBLEVBQWxCLE9BQTRDdEQsRUFBUSxHQUFLLFNBRTdELEdBSUY2WSxZQUFhLENBQ1gsSUFBSyxDQUNIM0QsY0FBZSxPQUNmOEMsYUFBYyxNQUtsQnRGLEdBQUksQ0FDRmtzQixVQUFXeHhCLElBQ1RneEIsR0FDRWh4QixFQUFPMHBCLFdBQ1BoNEIsU0FBU2UsY0FBYywrQkFDeEIsRUFFSDYrQixZQUFhdHhCLElBQ05BLEVBQU9oSyxHQUFHN0IsVUFBVUMsU0FBUyxXQUNoQzRMLEVBQU9oSyxHQUFHN0IsVUFBVUcsSUFBSSxVQUUxQjA4QixHQUNFaHhCLEVBQU8wcEIsV0FDUGg0QixTQUFTZSxjQUFjLGdDQUV6QncrQixHQUFzQmp4QixFQUFPLEtBS2pDdE8sU0FBU2UsY0FBYyx5QkFDckJtQixPQUFPMkIsWUFBYyxNQUFRdTdCLEdBQy9CQSxHQUFtQixJQUFJdEwsR0FBTyxzQkFBdUIsQ0FDbkRHLFFBQVMsQ0FBQytDLEdBQVlvQixJQUN0QnFGLFVBQVUsRUFDVnVCLGdCQUFnQixFQUNoQjVvQixjQUFlLEVBQ2Y4QyxhQUFjbFQsRUFBSSxJQUNsQjhJLE1BQU8sSUFDUG1JLE1BQU0sRUFHTnFYLFdBQVksQ0FDVkUsT0FBUSxrQ0FDUkQsT0FBUSxtQ0FJVnlKLFdBQVksQ0FDVjF6QixHQUFJLDZCQUNKMnpCLFdBQVcsRUFDWE8sYUFBYyxTQUFVdDNCLEVBQU9zRCxHQUM3QixNQUNFLGdCQUNBQSxFQUNBLE1BQ0d0RCxFQUFRLEVBQUksR0FBSyxJQUFNLEtBQ3pCQSxFQUFRLEdBQ1QsU0FFSixHQUlGMFMsR0FBSSxDQUNGa3NCLFVBQVd4eEIsSUFDVDVJLFlBQVcsS0FDVDY1QixHQUFzQmp4QixFQUFPLEdBQzVCLEVBQUUsRUFFUDB4QiwyQkFBNEIxeEIsSUFDMUJpeEIsR0FBc0JqeEIsRUFBTyxLQUkxQnBNLE9BQU8yQixXQUFhLEtBQU91N0IsS0FDcENBLEdBQWlCL0ksVUFDakIrSSxHQUFtQixNQVN6QixJLE1DbVBBLElBaG9CQSxNQUdFbjJCLFdBQUFBLEdBQ0V4SixLQUFLRyxNQUFRSCxLQUdiQSxLQUFLZ1IsUUFBVSxDQUVieXZCLElBQUssU0FDTDMyQixLQUFNLGVBQ05zTyxNQUFPLGdCQUNQc29CLE1BQU8sZ0JBQ1BqYixJQUFLLGdCQUNMa2IsUUFBUyxrQkFDVDVCLFFBQVMsa0JBQ1Q2QixPQUFRLGlCQUNSQyxPQUFRLGlCQUNSQyxNQUFPLGdCQUNQQyxJQUFLLGdCQUNMQyxNQUFPLGdCQUNQQyxJQUFLLGVBQ0xDLEtBQU0sZUFHTkMsT0FBUSxpQkFDUkMsUUFBUyxrQkFDVEMsT0FBUSxpQkFDUkMsT0FBUSxpQkFDUkMsU0FBVSxtQkFDVmw1QixTQUFVLG1CQUdWbTVCLEtBQU0sZUFDTno1QixNQUFPLGdCQUNQMDVCLFNBQVUsbUJBQ1ZDLFNBQVUsbUJBQ1Z0cEIsTUFBTyxpQkFJVCxNQUFNdXBCLEVBQWFwaEMsU0FBU0MsaUJBQWlCLFVBQ3pDbWhDLEVBQVdqaEMsUUFDYlYsS0FBS0UsS0FBS3loQyxFQUVkLENBS0F6aEMsSUFBQUEsQ0FBS3loQyxHQUVIQSxFQUFXMTVCLFNBQVEsQ0FBQzI1QixFQUFRbmdDLEtBQzFCekIsS0FBSzZoQyxZQUFZRCxFQUFRbmdDLEVBQVEsRUFBRSxJQUlyQ2xCLFNBQVN3SixpQkFDUCxRQUNBLFNBQVV3WixHQUNSdmpCLEtBQUs4aEMsV0FBV3ZlLEVBQ2xCLEVBQUV5TyxLQUFLaHlCLE9BRVRPLFNBQVN3SixpQkFDUCxVQUNBLFNBQVV3WixHQUNSdmpCLEtBQUs4aEMsV0FBV3ZlLEVBQ2xCLEVBQUV5TyxLQUFLaHlCLE9BRVRPLFNBQVN3SixpQkFDUCxVQUNBLFNBQVV3WixHQUNSdmpCLEtBQUs4aEMsV0FBV3ZlLEVBQ2xCLEVBQUV5TyxLQUFLaHlCLE9BRVRPLFNBQVN3SixpQkFDUCxXQUNBLFNBQVV3WixHQUNSdmpCLEtBQUs4aEMsV0FBV3ZlLEVBQ2xCLEVBQUV5TyxLQUFLaHlCLE1BRVgsQ0FFQTZoQyxXQUFBQSxDQUFZRSxFQUFhdGdDLEdBQ3ZCLE1BQU10QixFQUFRSCxLQUNSNGhDLEVBQVNyaEMsU0FBU3VFLGNBQWMsT0FRdEMsR0FOQTg4QixFQUFPNStCLFVBQVVHLElBQUluRCxLQUFLZ1IsUUFBUXl2QixLQUNsQ3NCLEVBQVkzZ0MsV0FBVzRnQyxhQUFhSixFQUFRRyxHQUM1Q0gsRUFBT0ssWUFBWUYsR0FDbkJBLEVBQVkxNkIsUUFBUyxFQUNyQjVGLElBQVNzZ0MsRUFBWWxoQyxRQUFRcWhDLE1BQVF6Z0MsR0FFakN6QixLQUFLbWlDLGVBQWVKLEtBQ3RCQSxFQUFZbGhDLFFBQVF1aEMsZUFDbEJwaUMsS0FBS21pQyxlQUFlSixHQUFhdjVCLE1BQy9CeEksS0FBS21pQyxlQUFlSixHQUFhM3BCLE1BQU1pcUIsTUFBTSxDQUM5QnJpQyxLQUFLc2lDLFVBQVVWLEVBQVE1aEMsS0FBS2dSLFFBQVEwdkIsT0FBTzZCLFFBQ25EdDVCLG1CQUNQLGFBQ0MsZ0JBQWVqSixLQUFLZ1IsUUFBUW9ILFVBQzNCcFksS0FBS21pQyxlQUFlSixHQUFhM3BCLE1BQU16SCxLQUNuQzNRLEtBQUttaUMsZUFBZUosR0FBYTNwQixNQUFNekgsS0FDdkMzUSxLQUFLbWlDLGVBQWVKLEdBQWF2NUIsZUFHM0MsQ0FFRm81QixFQUFPMzRCLG1CQUNMLFlBQ0MsZUFBY2pKLEtBQUtnUixRQUFRbEgsNEJBQTRCOUosS0FBS2dSLFFBQVErdEIseUJBRXZFLytCLEtBQUt3aUMsTUFBTVQsR0FFWEEsRUFBWWxoQyxRQUFRd08sTUFBUTB5QixFQUFZbGhDLFFBQVF3TyxNQUM1QzB5QixFQUFZbGhDLFFBQVF3TyxNQUNwQixNQUNKMHlCLEVBQVloNEIsaUJBQWlCLFVBQVUsU0FBVXdaLEdBQy9DcGpCLEVBQU1zaUMsZUFBZWxmLEVBQ3ZCLEdBQ0YsQ0FFQWlmLEtBQUFBLENBQU1ULEdBQ0osTUFBTUgsRUFBU0csRUFBWWo1QixjQUczQjg0QixFQUFPL2dDLFFBQVFxaEMsTUFBUUgsRUFBWWxoQyxRQUFRcWhDLE1BRTNDbGlDLEtBQUswaUMsU0FBU2QsRUFBUUcsR0FFdEIvaEMsS0FBSzJpQyxXQUFXZixFQUFRRyxHQUV4QkEsRUFBWWxoQyxRQUFRK2hDLGVBQ2hCaEIsRUFBTzUrQixVQUFVRyxJQUFLLFVBQVM0K0IsRUFBWWxoQyxRQUFRK2hDLGlCQUd2RGIsRUFBWU4sU0FDUkcsRUFBTzUrQixVQUFVRyxJQUFJbkQsS0FBS2dSLFFBQVF5d0IsVUFDbENHLEVBQU81K0IsVUFBVU0sT0FBT3RELEtBQUtnUixRQUFReXdCLFVBRXpDTSxFQUFZYyxhQUFhLHdCQUEwQmQsRUFBWU4sU0FDM0RHLEVBQU81K0IsVUFBVUcsSUFBSW5ELEtBQUtnUixRQUFRMHdCLFVBQ2xDRSxFQUFPNStCLFVBQVVNLE9BQU90RCxLQUFLZ1IsUUFBUTB3QixVQUV6QzFoQyxLQUFLOGlDLGNBQWNsQixFQUFRRyxHQUUzQkEsRUFBWWMsYUFBYSxvQkFDckI3aUMsS0FBSytpQyxpQkFBaUJuQixHQUcxQkcsRUFBWWMsYUFBYSxvQkFBcUI3aUMsS0FBS2dqQyxVQUFVcEIsR0FHekRHLEVBQVlsaEMsUUFBUW9pQyxTQUN0QmxCLEVBQVlqNUIsY0FBY0csbUJBQ3hCLFlBQ0MsNkJBQTRCODRCLEVBQVlsaEMsUUFBUW9pQyxpQkFLakRsQixFQUFZYyxhQUFhLGlCQUMzQmpCLEVBQU81K0IsVUFBVUcsSUFBSSxvQkFFckJ5K0IsRUFBTzUrQixVQUFVTSxPQUFPLG1CQUU1QixDQUVBby9CLFFBQUFBLENBQVNkLEVBQVFHLEdBQ2YsTUFBTW1CLEVBQVVsakMsS0FBS3NpQyxVQUFVVixFQUFRNWhDLEtBQUtnUixRQUFRbEgsTUFBTXk0QixRQUNwRFksRUFBV25qQyxLQUFLc2lDLFVBQVVWLEVBQVE1aEMsS0FBS2dSLFFBQVEwdkIsT0FBTzZCLFFBRXhEWSxHQUFVQSxFQUFTNy9CLFNBQ3ZCNC9CLEVBQVFqNkIsbUJBQ04sYUFDQWpKLEtBQUtvakMsU0FBU3hCLEVBQVFHLEdBRTFCLENBRUFZLFVBQUFBLENBQVdmLEVBQVFHLEdBQ2pCLE1BQU1oRCxFQUFVLytCLEtBQUtzaUMsVUFBVVYsRUFBUTVoQyxLQUFLZ1IsUUFBUSt0QixTQUFTd0QsUUFFN0R4RCxFQUFRN0MsVUFBWWw4QixLQUFLcWpDLFdBQVd0QixHQUNwQ2hELEVBQ0d6OUIsY0FBZSxJQUFHdEIsS0FBS2dSLFFBQVE0dkIsVUFDL0I1OUIsVUFBVUcsSUFBSW5ELEtBQUtnUixRQUFRdXdCLFNBQ2hDLENBRUF1QixhQUFBQSxDQUFjbEIsRUFBUUcsR0FDaEJBLEVBQVkxNUIsVUFDZHU1QixFQUFPNStCLFVBQVVHLElBQUluRCxLQUFLZ1IsUUFBUTNJLFVBQ2xDckksS0FBS3NpQyxVQUFVVixFQUFRNWhDLEtBQUtnUixRQUFRMHZCLE9BQU82QixRQUFRbDZCLFVBQVcsSUFFOUR1NUIsRUFBTzUrQixVQUFVTSxPQUFPdEQsS0FBS2dSLFFBQVEzSSxVQUNyQ3JJLEtBQUtzaUMsVUFBVVYsRUFBUTVoQyxLQUFLZ1IsUUFBUTB2QixPQUFPNkIsUUFBUWw2QixVQUFXLEVBRWxFLENBS0F5NUIsVUFBQUEsQ0FBV3ZlLEdBQ1QsTUFBTTljLEVBQVM4YyxFQUFFOWMsT0FDWDFHLEVBQU93akIsRUFBRXhqQixLQUVmLEdBQ0UwRyxFQUFPdVAsUUFBUWhXLEtBQUtzakMsU0FBU3RqQyxLQUFLZ1IsUUFBUXl2QixPQUMxQ2g2QixFQUFPdVAsUUFBUWhXLEtBQUtzakMsU0FBU3RqQyxLQUFLZ1IsUUFBUXd3QixPQUMxQyxDQUNBLE1BQU1JLEVBQVNuN0IsRUFBT3VQLFFBQVEsV0FDMUJ2UCxFQUFPdVAsUUFBUSxXQUNmelYsU0FBU2UsY0FDTixJQUFHdEIsS0FBS2dSLFFBQVF5dkIsb0JBQ2ZoNkIsRUFBT3VQLFFBQVFoVyxLQUFLc2pDLFNBQVN0akMsS0FBS2dSLFFBQVF3d0IsT0FBTzNnQyxRQUFRMGlDLGNBRzNEeEIsRUFBYy9oQyxLQUFLc2lDLFVBQVVWLEdBQVFHLFlBQzNDLEdBQWEsVUFBVGhpQyxHQUNGLElBQUtnaUMsRUFBWTE1QixTQUNmLEdBQUk1QixFQUFPdVAsUUFBUWhXLEtBQUtzakMsU0FBU3RqQyxLQUFLZ1IsUUFBUXd3QixPQUFRLENBQ3BELE1BQU1nQyxFQUFVLzhCLEVBQU91UCxRQUFRaFcsS0FBS3NqQyxTQUFTdGpDLEtBQUtnUixRQUFRd3dCLE9BQ3BEaUMsRUFBWWxqQyxTQUFTZSxjQUN4QixJQUFHdEIsS0FBS2dSLFFBQVF5dkIsb0JBQW9CK0MsRUFBUTNpQyxRQUFRcWhDLHlDQUF5Q3NCLEVBQVEzaUMsUUFBUTZpQyxZQUVoSDFqQyxLQUFLMmpDLGdCQUFnQi9CLEVBQVFHLEVBQWEwQixFQUM1QyxNQUFPLEdBQUloOUIsRUFBT3VQLFFBQVFoVyxLQUFLc2pDLFNBQVN0akMsS0FBS2dSLFFBQVEwdkIsUUFDbkQxZ0MsS0FBS2dqQyxVQUFVcEIsUUFDVixHQUFJbjdCLEVBQU91UCxRQUFRaFcsS0FBS3NqQyxTQUFTdGpDLEtBQUtnUixRQUFRNHZCLFNBQVUsQ0FDN0QsTUFBTTZDLEVBQVloOUIsRUFBT3VQLFFBQ3ZCaFcsS0FBS3NqQyxTQUFTdGpDLEtBQUtnUixRQUFRNHZCLFNBRTdCNWdDLEtBQUsyakMsZ0JBQWdCL0IsRUFBUUcsRUFBYTBCLEVBQzVDLE1BRWdCLFlBQVQxakMsR0FBK0IsYUFBVEEsRUFDM0IwRyxFQUFPdVAsUUFBUWhXLEtBQUtzakMsU0FBU3RqQyxLQUFLZ1IsUUFBUXl2QixRQUMvQixZQUFUMWdDLEVBQ0Y2aEMsRUFBTzUrQixVQUFVRyxJQUFJbkQsS0FBS2dSLFFBQVFvd0IsVUFFbENRLEVBQU81K0IsVUFBVU0sT0FBT3RELEtBQUtnUixRQUFRb3dCLFNBQ2pDVyxFQUFZYyxhQUFhLG1CQUN0QmpCLEVBQU81K0IsVUFBVUMsU0FBU2pELEtBQUtnUixRQUFRc3dCLFFBRzFDdGhDLEtBQUs0akMsVUFBVTdCLEVBQWFILEdBRjVCNWhDLEtBQUs2akMsT0FBTzlCLEVBQWFILE1BT2YsWUFBVDdoQyxHQUFpQyxXQUFYd2pCLEVBQUV1Z0IsTUFDakM5akMsS0FBSytqQyxZQUVULE1BQ0UvakMsS0FBSytqQyxZQUVULENBRUFmLFNBQUFBLENBQVVwQixHQUNSLE1BQU1HLEVBQWMvaEMsS0FBS3NpQyxVQUFVVixHQUFRRyxZQUNyQ2lDLEVBQWFoa0MsS0FBS3NpQyxVQUFVVixFQUFRNWhDLEtBQUtnUixRQUFRK3RCLFNBQVN3RCxRQUVoRSxHQUFJUixFQUFZL3JCLFFBQVEscUJBQXNCLENBQzVDLE1BQU1pdUIsRUFBaUJsQyxFQUFZL3JCLFFBQVEscUJBQzNDaFcsS0FBSytqQyxXQUFXRSxFQUNsQixDQUVLRCxFQUFXaGhDLFVBQVVDLFNBQVMsWUFDakMyK0IsRUFBTzUrQixVQUFVMDFCLE9BQU8xNEIsS0FBS2dSLFFBQVFxd0IsUUFDckMzNUIsRUFBYXM4QixFQUFZakMsRUFBWWxoQyxRQUFRd08sT0FFM0N1eUIsRUFBTzUrQixVQUFVQyxTQUFTakQsS0FBS2dSLFFBQVFxd0IsU0FDdkNVLEVBQVljLGFBQWEsa0JBQ3pCakIsRUFBTzUrQixVQUFVQyxTQUFTakQsS0FBS2dSLFFBQVFqSixRQUV2Qy9ILEtBQUs0akMsVUFBVTdCLEVBQWFILEdBR2xDLENBRUFtQyxVQUFBQSxDQUFXakQsR0FDVCxNQUNNb0QsR0FEV3BELEdBQWdCdmdDLFVBQ0xDLGlCQUN6QixHQUFFUixLQUFLc2pDLFNBQVN0akMsS0FBS2dSLFFBQVF5dkIsT0FBT3pnQyxLQUFLc2pDLFNBQVN0akMsS0FBS2dSLFFBQVFxd0IsV0FFOUQ2QyxFQUFXeGpDLFFBQ2J3akMsRUFBV2o4QixTQUFRazhCLElBQ2pCbmtDLEtBQUtva0MsVUFBVUQsRUFBVSxHQUcvQixDQUVBQyxTQUFBQSxDQUFVeEMsR0FDUixNQUFNRyxFQUFjL2hDLEtBQUtzaUMsVUFBVVYsR0FBUUcsWUFDckNpQyxFQUFhaGtDLEtBQUtzaUMsVUFBVVYsRUFBUTVoQyxLQUFLZ1IsUUFBUSt0QixTQUFTd0QsUUFFM0R5QixFQUFXaGhDLFVBQVVDLFNBQVMsWUFDakMyK0IsRUFBTzUrQixVQUFVTSxPQUFPdEQsS0FBS2dSLFFBQVFxd0IsUUFDckM3NkIsRUFBU3c5QixFQUFZakMsRUFBWWxoQyxRQUFRd08sT0FFN0MsQ0FFQXMwQixlQUFBQSxDQUFnQi9CLEVBQVFHLEVBQWFuQixHQUNuQyxHQUFJbUIsRUFBWU4sU0FBVSxDQUN4QmIsRUFBTzU5QixVQUFVMDFCLE9BQU8xNEIsS0FBS2dSLFFBQVF1d0IsVUFDVnZoQyxLQUFLcWtDLFFBQVF0QyxHQUFhdUMsU0FFbENyOEIsU0FBUXM4QixJQUN6QkEsRUFBa0JodUIsZ0JBQWdCLFdBQVcsSUFHeEJxckIsRUFBT3BoQyxpQkFDNUJSLEtBQUtzakMsU0FBU3RqQyxLQUFLZ1IsUUFBUXV3QixXQUVkdDVCLFNBQVF1OEIsSUFDckJ6QyxFQUNHemdDLGNBQWUsaUJBQWdCa2pDLEVBQWMzakMsUUFBUTZpQyxZQUNyRG41QixhQUFhLFdBQVksV0FBVyxJQUVwQ3EyQixFQUFPNTlCLFVBQVVDLFNBQVNqRCxLQUFLZ1IsUUFBUXV3QixZQUMxQzN3QixRQUFRNnpCLElBQ04xQyxFQUFZemdDLGNBQWUsaUJBQWdCcy9CLEVBQU8vL0IsUUFBUTZpQyxhQUU1RDNCLEVBQ0d6Z0MsY0FBZSxpQkFBZ0JzL0IsRUFBTy8vQixRQUFRNmlDLFlBQzlDbnRCLGdCQUFnQixZQUV2QixNQUNFcXJCLEVBQ0dwaEMsaUJBQWlCLG1CQUNqQnlILFNBQVF5OEIsR0FBT0EsRUFBSTFoQyxVQUFVTSxPQUFPdEQsS0FBS2dSLFFBQVF1d0IsWUFDcERYLEVBQU81OUIsVUFBVUcsSUFBSW5ELEtBQUtnUixRQUFRdXdCLFVBQzdCUSxFQUFZYyxhQUFhLHlCQUUxQmpCLEVBQU90Z0MsY0FBZSxHQUFFdEIsS0FBS3NqQyxTQUFTdGpDLEtBQUtnUixRQUFRNHZCLHFCQUVuRGdCLEVBQU90Z0MsY0FDSixHQUFFdEIsS0FBS3NqQyxTQUFTdGpDLEtBQUtnUixRQUFRNHZCLG1CQUM5QnY1QixRQUFTLEdBRWJ1NUIsRUFBT3Y1QixRQUFTLEdBRWxCMDZCLEVBQVl2NUIsTUFBUW80QixFQUFPaUMsYUFBYSxnQkFDcENqQyxFQUFPLy9CLFFBQVE2aUMsT0FDZjlDLEVBQU9qRixZQUNYMzdCLEtBQUtnakMsVUFBVXBCLEdBRWpCNWhDLEtBQUswaUMsU0FBU2QsRUFBUUcsR0FDdEIvaEMsS0FBSzJrQyxjQUFjNUMsRUFDckIsQ0FFQWdCLGdCQUFBQSxDQUFpQm5CLEdBQ2YsTUFBTXpoQyxFQUFRSCxLQUNSNGtDLEVBQVc1a0MsS0FBS3NpQyxVQUFVVixFQUFRNWhDLEtBQUtnUixRQUFRK3ZCLEtBQUt3QixRQUNwRHlCLEVBQWFoa0MsS0FBS3NpQyxVQUN0QlYsRUFDQTVoQyxLQUFLZ1IsUUFBUSt0QixTQUNid0QsUUFBUS9oQyxpQkFBa0IsSUFBR1IsS0FBS2dSLFFBQVE0dkIsVUFFNUNnRSxFQUFTNzZCLGlCQUFpQixTQUFTLFdBQ2pDaTZCLEVBQVcvN0IsU0FBUXc3QixJQUVmQSxFQUFVOUgsWUFDUGtKLGNBQ0F6aUMsUUFBUXdpQyxFQUFTcDhCLE1BQU1xOEIsZ0JBQWtCLEVBRTVDcEIsRUFBVXA4QixRQUFTLEVBRW5CbzhCLEVBQVVwOEIsUUFBUyxDQUNyQixLQUVvQixJQUF0QjI4QixFQUFXMzhCLFFBQWtCbEgsRUFBTTZpQyxVQUFVcEIsRUFDL0MsR0FDRixDQUVBa0QsV0FBQUEsQ0FBWS9DLEdBQWMsQ0FLMUI4QixNQUFBQSxDQUFPOUIsRUFBYUgsR0FDbEJBLEVBQU81K0IsVUFBVUcsSUFBSW5ELEtBQUtnUixRQUFRakosT0FFOUJnNkIsRUFBWWxoQyxRQUFRa2tDLFdBQWFoRCxFQUFZbGhDLFFBQVFvaUMsU0FDdkRsQixFQUFZajVCLGNBQWNHLG1CQUN4QixZQUNDLDZCQUE0Qjg0QixFQUFZbGhDLFFBQVFra0MsaUJBR3ZELENBRUFuQixTQUFBQSxDQUFVN0IsRUFBYUgsR0FDakJBLEVBQU81K0IsVUFBVUMsU0FBU2pELEtBQUtnUixRQUFRakosUUFDekM2NUIsRUFBTzUrQixVQUFVTSxPQUFPdEQsS0FBS2dSLFFBQVFqSixPQUdyQ2c2QixFQUFZajVCLGNBQWN4SCxjQUFjLG1CQUN2Q3lnQyxFQUFZbGhDLFFBQVFvaUMsU0FFckJsQixFQUFZajVCLGNBQWNFLFlBQ3hCKzRCLEVBQVlqNUIsY0FBY3hILGNBQWMsaUJBRzlDLENBS0FnaUMsUUFBQUEsQ0FBUzBCLEdBQ1AsTUFBUSxJQUFHQSxHQUNiLENBRUExQyxTQUFBQSxDQUFVVixFQUFRb0QsR0FDaEIsTUFBTyxDQUNMakQsWUFBYUgsRUFBT3RnQyxjQUFjLFVBQ2xDaWhDLFFBQVNYLEVBQU90Z0MsY0FBY3RCLEtBQUtzakMsU0FBUzBCLElBRWhELENBRUE1QixRQUFBQSxDQUFTeEIsRUFBUUcsR0FDZixJQUFJa0QsRUFDRkMsRUFDQUMsRUFBV25sQyxLQUFLcWtDLFFBQVF0QyxFQUFhLEdBQUdxRCxLQTZDMUMsR0ExQ0FELEVBQVdBLEVBQVN6a0MsT0FDaEJ5a0MsRUFDQXBELEVBQVlsaEMsUUFBUXdrQyxTQUNwQnRELEVBQVlsaEMsUUFBUXdrQyxTQUNwQixHQUdBcmxDLEtBQUtxa0MsUUFBUXRDLEdBQWF1RCxPQUFPNWtDLE9BQ25Da2hDLEVBQU81K0IsVUFBVUcsSUFBSW5ELEtBQUtnUixRQUFRbXdCLFFBRWxDUyxFQUFPNStCLFVBQVVNLE9BQU90RCxLQUFLZ1IsUUFBUW13QixRQUluQ1ksRUFBWWMsYUFBYSxvQkFDM0JvQyxFQUFPbEQsRUFBWWxoQyxRQUFRd2tDLFNBQ3RCLG9CQUFtQnRELEVBQVlsaEMsUUFBUXdrQyxZQUN2QywwQkFDTEgsRUFBYSxJQUFHbGxDLEtBQUtnUixRQUFRb0gsU0FJM0IycEIsRUFBWU4sVUFBWU0sRUFBWWMsYUFBYSxtQkFDbkRzQyxFQUFXbmxDLEtBQUtxa0MsUUFBUXRDLEdBQ3JCdUMsU0FBU3ZpQyxLQUNSNitCLEdBQ0csc0JBQXFCZ0IsRUFBTy9nQyxRQUFRcWhDLHdCQUNuQ3RCLEVBQU9wNEIsNkJBQ2V4SSxLQUFLdWxDLFdBQVczRSxjQUUzQzN6QixLQUFLLElBR044MEIsRUFBWWxoQyxRQUFRMmdDLE1BQ3BCamhDLFNBQVNlLGNBQWN5Z0MsRUFBWWxoQyxRQUFRMmdDLFFBRTNDamhDLFNBQVNlLGNBQWN5Z0MsRUFBWWxoQyxRQUFRMmdDLE1BQU10RixVQUFZaUosRUFDekRwRCxFQUFZYyxhQUFhLHFCQUFvQnNDLEdBQVcsS0FLNURwRCxFQUFZYyxhQUFhLG1CQUMzQixNQUFRLGVBQWM3aUMsS0FBS2dSLFFBQVEwdkIsZ0JBQWdCdUUsWUFBZWpsQyxLQUFLZ1IsUUFBUXlVLDZEQUE2RDBmLHdCQUErQkEsYUFBb0JubEMsS0FBS2dSLFFBQVErdkIscUJBQ3ZNLENBQ0wsTUFBTXlFLEVBQ0p4bEMsS0FBS3FrQyxRQUFRdEMsR0FBYXVDLFNBQVM1akMsUUFDbkNWLEtBQUtxa0MsUUFBUXRDLEdBQWF1QyxTQUFTLEdBQUd6akMsUUFBUTRrQyxTQUN6QyxJQUFHemxDLEtBQUtxa0MsUUFBUXRDLEdBQWF1QyxTQUFTLEdBQUd6akMsUUFBUTRrQyxXQUNsRCxHQUNOLE1BQVEsZ0NBQStCemxDLEtBQUtnUixRQUFRMHZCLGdCQUNsRHVFLEdBQWMsYUFDTGpsQyxLQUFLZ1IsUUFBUXlVLE9BQ3RCeWYsR0FBd0Isb0JBRXhCbGxDLEtBQUtnUixRQUFRMnZCLFVBQ1o2RSxNQUFnQkwsMEJBQ3JCLENBQ0YsQ0FFQTlCLFVBQUFBLENBQVd0QixHQUNULE1BQU0yRCxFQUFZM0QsRUFBWWMsYUFBYSxtQkFDdEMsaUJBQ0QsR0FDSixJQUFJOEMsRUFBa0I1RCxFQUFZbGhDLFFBQVE2a0MsVUFDckMscUJBQW9CM0QsRUFBWWxoQyxRQUFRNmtDLGVBQ3pDLEdBQ0ExQixFQUFhbGlDLE1BQU1xVixLQUFLNHFCLEVBQVloRCxTQUV4QyxHQUFJaUYsRUFBV3RqQyxPQUFRLENBQ3JCLElBQUlrbEMsRUFBa0IsR0FnQnRCLE9BYkc1bEMsS0FBS21pQyxlQUFlSixLQUNsQi9oQyxLQUFLbWlDLGVBQWVKLEdBQWFNLE1BQ3BDTixFQUFZTixZQUVadUMsRUFBYUEsRUFBVzloQyxRQUFPMCtCLEdBQVVBLEVBQU9wNEIsU0FFbERvOUIsR0FBa0JGLEVBQ2IsUUFBT0EsS0FBYUMsWUFBMEIzbEMsS0FBS2dSLFFBQVE2dkIsV0FDNUQsR0FDSm1ELEVBQVcvN0IsU0FBUTI0QixJQUNqQmdGLEdBQWtCNWxDLEtBQUs2bEMsVUFBVWpGLEVBQVFtQixFQUFZLElBRXZENkQsR0FBa0JGLEVBQWEsU0FBVSxHQUNsQ0UsQ0FDVCxDQUNGLENBRUFDLFNBQUFBLENBQVVqRixFQUFRbUIsR0FDaEIsTUFBTW1DLEVBQ0p0RCxFQUFPVyxVQUFZUSxFQUFZTixTQUMxQixJQUFHemhDLEtBQUtnUixRQUFRdXdCLFdBQ2pCLEdBQ0F1RSxHQUNKbEYsRUFBT1csVUFDTlEsRUFBWWMsYUFBYSx3QkFDekJkLEVBQVlOLFNBRVIsR0FEQSxTQUVEc0UsRUFBY25GLEVBQU8vL0IsUUFBUTRrQyxTQUM5QixJQUFHN0UsRUFBTy8vQixRQUFRNGtDLFdBQ25CLEdBQ0VPLElBQWFwRixFQUFPLy9CLFFBQVFtbEMsWUFDOUJwRixFQUFPLy9CLFFBQVFtbEMsV0FFYkMsRUFBbUJyRixFQUFPaUMsYUFBYSwyQkFDeEMsa0JBQ0QsR0FDSixJQUFJcUQsRUFBYyxHQU9sQixPQUxBQSxHQUFjRixFQUNULE1BQUtDLEtBQW9CSCxXQUF1QkUsb0JBQTZCcEYsRUFBT3A0QixpQkFBaUJ4SSxLQUFLZ1IsUUFBUTR2QixTQUFTbUYsSUFBYzdCLE1BQ3pJLFdBQVU0QixZQUF3QjlsQyxLQUFLZ1IsUUFBUTR2QixTQUFTbUYsSUFBYzdCLG9CQUE2QnRELEVBQU9wNEIsd0JBQy9HMDlCLEdBQWNsbUMsS0FBS3VsQyxXQUFXM0UsR0FDOUJzRixHQUFjRixFQUFjLE9BQVMsWUFDOUJFLENBQ1QsQ0FFQVgsVUFBQUEsQ0FBVzNFLEdBQ1QsTUFBTXVGLEVBQWF2RixFQUFPLy9CLFFBQVF1bEMsU0FDN0IsR0FBRXhGLEVBQU8vL0IsUUFBUXVsQyxXQUNsQixHQUNFQyxFQUNKRixFQUFXL2pDLFFBQVEsUUFBVSxFQUN4QixhQUFZK2pDLGFBQ2JBLEVBQ04sSUFBSUcsRUFBcUIsR0FjekIsT0FaQUEsR0FBcUJILEVBQ2hCLGdCQUFlbm1DLEtBQUtnUixRQUFROHZCLFVBQzdCLEdBQ0p3RixHQUFxQkgsRUFDaEIsZ0JBQWVubUMsS0FBS2dSLFFBQVFnd0IsVUFDN0IsR0FDSnNGLEdBQXFCSCxFQUFhRSxFQUFpQixHQUNuREMsR0FBcUJILEVBQWMsVUFBVyxHQUM5Q0csR0FBcUJILEVBQWMsZ0JBQWVubUMsS0FBS2dSLFFBQVFpd0IsUUFBVSxHQUN6RXFGLEdBQXFCMUYsRUFBT2pGLFlBQzVCMkssR0FBcUJILEVBQWMsVUFBVyxHQUM5Q0csR0FBcUJILEVBQWMsVUFBVyxHQUN2Q0csQ0FDVCxDQUVBbkUsY0FBQUEsQ0FBZUosR0FDYixNQUFNd0UsRUFBY3prQyxNQUFNcVYsS0FBSzRxQixFQUFZaEQsU0FBU3lILE1BQ2xENUYsSUFBV0EsRUFBT3A0QixRQUdwQixHQUFJKzlCLEVBRUYsT0FEQUEsRUFBWXZqQyxVQUFVRyxJQUFJbkQsS0FBS2dSLFFBQVF5MUIsVUFDaEMsQ0FDTGorQixNQUFPKzlCLEVBQVk1SyxZQUNuQjBHLEtBQU1rRSxFQUFZMUQsYUFBYSxvQkFDL0J6cUIsTUFBTyxDQUNMaXFCLEtBQU1rRSxFQUFZMUQsYUFBYSxlQUMvQmx5QixLQUFNNDFCLEVBQVkxbEMsUUFBUXVoQyxnQkFJbEMsQ0FFQWlDLE9BQUFBLENBQVF0QyxHQUNOLElBQUltQyxFQUFhLEdBU2pCLE9BUEluQyxFQUFZTixTQUNkeUMsRUFBYXBpQyxNQUFNcVYsS0FBSzRxQixFQUFZaEQsU0FDakM3OEIsUUFBTzArQixHQUFVQSxFQUFPcDRCLFFBQ3hCdEcsUUFBTzArQixHQUFVQSxFQUFPVyxXQUUzQjJDLEVBQVd2aUMsS0FBS29nQyxFQUFZaEQsUUFBUWdELEVBQVkyRSxnQkFFM0MsQ0FDTHBDLFNBQVVKLEVBQVduaUMsS0FBSTYrQixHQUFVQSxJQUNuQzBFLE9BQVFwQixFQUNMaGlDLFFBQU8wK0IsR0FBVUEsRUFBT3A0QixRQUN4QnpHLEtBQUk2K0IsR0FBVUEsRUFBT3A0QixRQUN4QjQ4QixLQUFNbEIsRUFBV25pQyxLQUFJNitCLEdBQVU1Z0MsS0FBS3VsQyxXQUFXM0UsS0FFbkQsQ0FLQTZCLGNBQUFBLENBQWVsZixHQUNiLE1BQU13ZSxFQUFjeGUsRUFBRTljLE9BRXRCekcsS0FBS3dpQyxNQUFNVCxHQUNYL2hDLEtBQUsya0MsY0FBYzVDLEVBQ3JCLENBRUE0QyxhQUFBQSxDQUFjNUMsR0FDWixNQUFNSCxFQUFTRyxFQUFZajVCLGNBRTNCLEdBQUlpNUIsRUFBWWMsYUFBYSxnQkFBa0JkLEVBQVl2NUIsTUFBTyxDQUNoRSxJQUFJbStCLEVBQWFwbUMsU0FBU3VFLGNBQWMsVUFDeEM2aEMsRUFBVzVtQyxLQUFPLFNBQ2xCZ2lDLEVBQVkvckIsUUFBUSxRQUFRNlEsT0FBTzhmLEdBQ25DQSxFQUFXQyxRQUNYRCxFQUFXcmpDLFFBQ2IsQ0FDQXkrQixFQUFZajVCLGNBQWM5RixVQUFVRyxJQUFJbkQsS0FBS2dSLFFBQVFzd0IsUUFDckR0aEMsS0FBS21rQyxVQUFVdkMsRUFBUUcsRUFDekIsQ0FFQW9DLFNBQUFBLENBQVV2QyxFQUFRRyxHQUNoQnhoQyxTQUFTZ0gsY0FDUCxJQUFJQyxZQUFZLFlBQWEsQ0FDM0JDLE9BQVEsQ0FDTm02QixPQUFRRyxLQUloQixHQUVTLENBQUMsRyxPQ2xvQlp4aEMsU0FBU3dKLGlCQUFpQixvQkFBb0IsV0FFNUMsTUFBTTg4QixFQUFjdG1DLFNBQVNlLGNBQWMseUJBQ3ZDdWxDLElBQ0ZBLEVBQVk5OEIsaUJBQWlCLFdBQVcsV0FDdEN4SixTQUFTMkYsZ0JBQWdCbEQsVUFBVUcsSUFBSSxxQkFDekMsSUFDQTBqQyxFQUFZOThCLGlCQUFpQixTQUFTLFdBQ2hDODhCLEVBQVl2bEMsY0FBYyxTQUFTa0gsTUFBTTlILE9BQ3RDbW1DLEVBQVk3d0IsUUFBUSxRQUFRaFQsVUFBVUMsU0FBUyxZQUNsRDRqQyxFQUFZN3dCLFFBQVEsUUFBUWhULFVBQVVHLElBQUksV0FHeEMwakMsRUFBWTd3QixRQUFRLFFBQVFoVCxVQUFVQyxTQUFTLFlBQ2pENGpDLEVBQVk3d0IsUUFBUSxRQUFRaFQsVUFBVU0sT0FBTyxVQUduRCxJQUNBdWpDLEVBQVk3d0IsUUFBUSxRQUFRak0saUJBQWlCLFVBQVUsV0FDakR4SixTQUFTMkYsZ0JBQWdCbEQsVUFBVUMsU0FBUyx1QkFDOUMxQyxTQUFTMkYsZ0JBQWdCbEQsVUFBVU0sT0FBTyxzQkFFeEN1akMsRUFBWTd3QixRQUFRLFFBQVFoVCxVQUFVQyxTQUFTLFlBQ2pENGpDLEVBQVk3d0IsUUFBUSxRQUFRaFQsVUFBVU0sT0FBTyxXQUUvQ3VqQyxFQUFZdmxDLGNBQWMsU0FBUzRJLE1BQ3JDLEtBbUNGM0osU0FBU3dKLGlCQUFpQixTQS9CSHdaLElBQ3JCLE1BQU05YyxFQUFTOGMsRUFBRTljLE9BY2pCLEdBVklBLEVBQU91UCxRQUFRLHNCQUNqQnZQLEVBQU91UCxRQUFRLG9CQUFvQmhULFVBQVUwMUIsT0FBTyxXQUNwRG5WLEVBQUVzRixrQkFHRnRvQixTQUFTMkYsZ0JBQWdCbEQsVUFBVUMsU0FBUyx3QkFDM0N3RCxFQUFPdVAsUUFBUSxvQkFFaEJ6VixTQUFTMkYsZ0JBQWdCbEQsVUFBVU0sT0FBTyxzQkFFeENtRCxFQUFPdVAsUUFBUSwyQkFBNEIsQ0FDN0MsTUFBTTdVLEVBQVNzRixFQUFPdVAsUUFBUSxzQkFDakJ2UCxFQUFPdVAsUUFBUSxxQkFDdkIxUyxTQUVBbkMsRUFBT1gsaUJBQWlCLHFCQUFxQkUsUUFDaERTLEVBQU9tQyxRQUVYLENBQ0ltRCxFQUFPdVAsUUFBUSxxQkFDakIxUCxFQUFjL0YsU0FBU0MsaUJBQWlCLG1CQUFvQixXQUM1RGlHLEVBQU91UCxRQUFRLG1CQUFtQmhULFVBQVVHLElBQUksV0FDbEQsR0FLSixJZi9CTTVDLFNBQVNlLGNBQWMsZUFDekJmLFNBQVN3SixpQkFBaUIsU0FBUyxTQUFVd1osR0FDdkMxZCxHQUFrQjBkLEVBQUU5YyxPQUFPdVAsUUFBUSxjQUNyQzVQLElBRUFQLEdBQ0F0RixTQUFTMkYsZ0JBQWdCbEQsVUFBVUMsU0FBUyxrQkFDM0NzZ0IsRUFBRTljLE9BQU91UCxRQUFRLHNCQUF3QnVOLEVBQUU5YyxPQUFPdVAsUUFBUSxXQUUzRDNQLEdBRUosSUFnTEcsV0FDTCxNQUFNeWdDLEVBQWdCdm1DLFNBQVNDLGlCQUFpQixtQkFDaEQsR0FBSXNtQyxFQUFjcG1DLE9BQVMsRUFBRyxDQUU1QixNQUFNcW1DLEVBQWtCamxDLE1BQU1xVixLQUFLMnZCLEdBQWU1a0MsUUFBTyxTQUN2REQsRUFDQVIsRUFDQVUsR0FFQSxPQUFRRixFQUFLcEIsUUFBUW1tQyxTQUFTaG1DLE1BQU0sS0FBSyxFQUMzQyxJQUVJK2xDLEVBQWdCcm1DLFFBQ2xCdW1DLEVBQWFGLEdBR2YsSUFBSUcsRUEzRUQsU0FBMEIxakMsRUFBTzJqQyxHQUV0QyxNQUFNOWtDLEVBQVFQLE1BQU1xVixLQUFLM1QsR0FBT3RCLFFBQU8sU0FBVUQsRUFBTVIsRUFBT1UsR0FDNUQsR0FBSUYsRUFBS3BCLFFBQVFzbUMsR0FDZixPQUFPbGxDLEVBQUtwQixRQUFRc21DLEdBQWNubUMsTUFBTSxLQUFLLEVBRWpELElBRUEsR0FBSXFCLEVBQU0zQixPQUFRLENBQ2hCLE1BQU0wbUMsRUFBbUIsR0FDekIva0MsRUFBTTRGLFNBQVFoRyxJQUNaLE1BQ01WLEVBQWEsQ0FBQyxFQUNkOGxDLEVBRlNwbEMsRUFBS3BCLFFBQVFzbUMsR0FFRG5tQyxNQUFNLEtBQ2pDTyxFQUFXaUgsTUFBUTYrQixFQUFZLEdBQy9COWxDLEVBQVd4QixLQUFPc25DLEVBQVksR0FBS0EsRUFBWSxHQUFHdG1DLE9BQVMsTUFDM0RRLEVBQVdVLEtBQU9BLEVBQ2xCbWxDLEVBQWlCemxDLEtBQUtKLEVBQVcsSUFHbkMsSUFBSStsQyxFQUFZRixFQUFpQnJsQyxLQUFJLFNBQVVFLEdBQzdDLE1BQ0UsSUFDQUEsRUFBS2xDLEtBQ0wsV0FDQWtDLEVBQUt1RyxNQUNMLE9BQ0F2RyxFQUFLdUcsTUFDTCxJQUNBdkcsRUFBS2xDLElBRVQsSUFDQXVuQyxFQXZDRyxTQUFxQjlqQyxHQUMxQixPQUFPQSxFQUFNdEIsUUFBTyxTQUFVRCxFQUFNUixFQUFPVSxHQUN6QyxPQUFPQSxFQUFLQyxRQUFRSCxLQUFVUixDQUNoQyxHQUNGLENBbUNnQjhsQyxDQUFZRCxHQUN4QixNQUFNSixFQUFpQixHQUV2QixHQUFJSSxFQUFVNW1DLE9Ba0JaLE9BaEJBNG1DLEVBQVVyL0IsU0FBUTFHLElBQ2hCLE1BQU04bEMsRUFBYzlsQyxFQUFXUCxNQUFNLEtBQy9CMEIsRUFBa0Iya0MsRUFBWSxHQUM5QkcsRUFBWUgsRUFBWSxHQUN4QjdrQyxFQUFhQyxPQUFPRCxXQUFXNmtDLEVBQVksSUFFM0NJLEVBQWFMLEVBQWlCbGxDLFFBQU8sU0FBVUQsR0FDbkQsR0FBSUEsRUFBS3VHLFFBQVU5RixHQUFtQlQsRUFBS2xDLE9BQVN5bkMsRUFDbEQsT0FBTyxDQUVYLElBQ0FOLEVBQWV2bEMsS0FBSyxDQUNsQjhsQyxhQUNBamxDLGNBQ0EsSUFFRzBrQyxDQUVYLENBQ0YsQ0FtQnlCUSxDQUFpQlosRUFBZSxZQVdyRCxTQUFTRyxFQUFhSCxHQUFtQyxJQUFwQnRrQyxFQUFVd0QsVUFBQXRGLE9BQUEsUUFBQTZDLElBQUF5QyxVQUFBLElBQUFBLFVBQUEsR0FDN0M4Z0MsRUFBYzcrQixTQUFRMC9CLElBQ3BCQSxFQUFnQm5sQyxFQUFhbWxDLEVBQWMxbEMsS0FBTzBsQyxFQUM5Q25sQyxFQUFXTSxVQUFZTixHQUN6Qm1sQyxFQUFjM2tDLFVBQVVHLElBQUksaUJBQzVCeWtDLEVBQWdCRCxHQUNoQkEsRUFBYzU5QixpQkFBaUIsUUFBUzg5QixLQUV4Q0YsRUFBYzNrQyxVQUFVTSxPQUFPLGlCQUMvQnNrQyxFQUFnQkQsR0FBZSxHQUMvQkEsRUFBYzM5QixvQkFBb0IsUUFBUzY5QixHQUM3QyxHQUVKLENBRUEsU0FBU0QsRUFBZ0JELEdBQXVDLElBQXhCRyxJQUFlOWhDLFVBQUF0RixPQUFBLFFBQUE2QyxJQUFBeUMsVUFBQSxLQUFBQSxVQUFBLEdBQ2pEK2hDLEVBQWdCSixFQUFjbm5DLGlCQUFpQixrQkFDL0N1bkMsRUFBY3JuQyxTQUNoQnFuQyxFQUFnQmptQyxNQUFNcVYsS0FBSzR3QixHQUFlN2xDLFFBQ3hDRCxHQUFRQSxFQUFLK1QsUUFBUSxxQkFBdUIyeEIsSUFFOUNJLEVBQWM5L0IsU0FBUSsvQixJQUNoQkYsR0FDRkUsRUFBYXp4QixnQkFBZ0IsWUFDeEJ5eEIsRUFBYWhsQyxVQUFVQyxTQUFTLHFCQUNuQytrQyxFQUFhMW5CLG1CQUFtQmpaLFFBQVMsS0FHM0MyZ0MsRUFBYXo5QixhQUFhLFdBQVksTUFDdEN5OUIsRUFBYTFuQixtQkFBbUJqWixRQUFTLEVBQzNDLElBR04sQ0FDQSxTQUFTd2dDLEVBQWlCdGtCLEdBQ3hCLE1BQU0xZSxFQUFLMGUsRUFBRTljLE9BQ2IsR0FBSTVCLEVBQUdtUixRQUFRLGtCQUFtQixDQUNoQyxNQUFNZ3lCLEVBQWVuakMsRUFBR21SLFFBQVEsa0JBQzFCMnhCLEVBQWdCSyxFQUFhaHlCLFFBQVEsbUJBQ3JDaXlCLEVBQWFOLEVBQWM5RSxhQUFhLG9CQUN4Q3FGLEVBQWVQLEVBQWM5bUMsUUFBUXNuQyxjQUN2Q3B3QixTQUFTNHZCLEVBQWM5bUMsUUFBUXNuQyxlQUMvQixJQUNDUixFQUFjbm5DLGlCQUFpQixXQUFXRSxTQUUzQ3VuQyxJQUNDRCxFQUFhaGxDLFVBQVVDLFNBQVMsb0JBRWpDbWxDLEVBQWlCVCxHQUVuQkssRUFBYWhsQyxVQUFVMDFCLE9BQU8sbUJBQzlCaHhCLEVBQWFzZ0MsRUFBYTFuQixtQkFBb0I0bkIsSUFFaEQza0IsRUFBRXNGLGdCQUNKLENBQ0YsQ0FDQSxTQUFTdWYsRUFBaUJULEdBQ3hCLE1BQU1VLEVBQXFCVixFQUFjcm1DLGNBQ3ZDLGtDQUVJNG1DLEVBQWVQLEVBQWM5bUMsUUFBUXNuQyxjQUN2Q3B3QixTQUFTNHZCLEVBQWM5bUMsUUFBUXNuQyxlQUMvQixJQUVGRSxJQUNDVixFQUFjbm5DLGlCQUFpQixXQUFXRSxTQUUzQzJuQyxFQUFtQnJsQyxVQUFVTSxPQUFPLG1CQUNwQ2tELEVBQVM2aEMsRUFBbUIvbkIsbUJBQW9CNG5CLEdBRXBELENBaEZJaEIsR0FBa0JBLEVBQWV4bUMsUUFDbkN3bUMsRUFBZWovQixTQUFRcWdDLElBRXJCQSxFQUFjOWxDLFdBQVd1SCxpQkFBaUIsVUFBVSxXQUNsRGs5QixFQUFhcUIsRUFBY2IsV0FBWWEsRUFBYzlsQyxXQUN2RCxJQUNBeWtDLEVBQWFxQixFQUFjYixXQUFZYSxFQUFjOWxDLFdBQVcsSUE0RXBFLE1BQU0rbEMsRUFBZ0Job0MsU0FBU0MsaUJBQWlCLHdCQUM1QytuQyxFQUFjN25DLFFBQ2hCSCxTQUFTd0osaUJBQWlCLFNBQVMsU0FBVXdaLEdBQ2hDQSxFQUFFOWMsT0FDTHVQLFFBQVEsb0JBQ2R1eUIsRUFBY3RnQyxTQUFRdWdDLElBQ3BCLE1BQU1iLEVBQWdCYSxFQUFheHlCLFFBQVEsbUJBQ3JDa3lCLEVBQWVPLGNBQWM1bkMsUUFBUXNuQyxjQUN2Q3B3QixTQUFTNHZCLEVBQWM5bUMsUUFBUXNuQyxlQUMvQixJQUNKSyxFQUFheGxDLFVBQVVNLE9BQU8sbUJBQzlCa0QsRUFBU2dpQyxFQUFhbG9CLG1CQUFvQjRuQixFQUFhLEdBRzdELEdBRUosQ0FDRixDZ0J0VUFRLEdmVE8sV0FBdUQsSUFBL0IzSixFQUFPLzRCLFVBQUF0RixPQUFBLFFBQUE2QyxJQUFBeUMsVUFBQSxHQUFBQSxVQUFBLEdBQUcsQ0FBRTJpQyxVQUFVLEdBQ25ELE1BQU1DLEVBQWFyb0MsU0FBU0MsaUJBQzFCLDRDQUVFb29DLEVBQVdsb0MsUUFDYmtvQyxFQUFXM2dDLFNBQVE0Z0MsSUFDWkEsRUFBVWhHLGFBQWEsNkJBQzFCZ0csRUFBVWhvQyxRQUFRMGxDLFlBQWNzQyxFQUFVdEMsWUFDNUMsSUFHSmhtQyxTQUFTdUosS0FBS0MsaUJBQWlCLFdBQVcsU0FBVXdaLEdBQ2xELE1BQU11bEIsRUFBZ0J2bEIsRUFBRTljLE9BRUksVUFBMUJxaUMsRUFBYzFnQyxTQUNZLGFBQTFCMGdDLEVBQWMxZ0MsVUFFVjBnQyxFQUFjam9DLFFBQVEwbEMsY0FDeEJ1QyxFQUFjdkMsWUFBYyxJQUV6QnVDLEVBQWNqRyxhQUFhLDJCQUM5QmlHLEVBQWM5bEMsVUFBVUcsSUFBSSxlQUM1QjJsQyxFQUFjaGdDLGNBQWM5RixVQUFVRyxJQUFJLGdCQUU1Q3lFLEVBQWFnQixZQUFZa2dDLEdBRTdCLElBQ0F2b0MsU0FBU3VKLEtBQUtDLGlCQUFpQixZQUFZLFNBQVV3WixHQUNuRCxNQUFNdWxCLEVBQWdCdmxCLEVBQUU5YyxPQUVJLFVBQTFCcWlDLEVBQWMxZ0MsU0FDWSxhQUExQjBnQyxFQUFjMWdDLFVBRVYwZ0MsRUFBY2pvQyxRQUFRMGxDLGNBQ3hCdUMsRUFBY3ZDLFlBQWN1QyxFQUFjam9DLFFBQVEwbEMsYUFFL0N1QyxFQUFjakcsYUFBYSwyQkFDOUJpRyxFQUFjOWxDLFVBQVVNLE9BQU8sZUFDL0J3bEMsRUFBY2hnQyxjQUFjOUYsVUFBVU0sT0FBTyxnQkFFM0N3bEMsRUFBY2pHLGFBQWEsa0JBQzdCajdCLEVBQWFVLGNBQWN3Z0MsR0FHakMsSUFFSS9KLEVBQVE0SixVQUNWcG9DLFNBQVN3SixpQkFBaUIsU0FBUyxTQUFVd1osR0FDM0MsSUFBSXVsQixFQUFnQnZsQixFQUFFOWMsT0FDdEIsR0FBSXFpQyxFQUFjOXlCLFFBQVEseUJBQTBCLENBQ2xELElBQUkreUIsRUFBWUQsRUFBYzlsQyxVQUFVQyxTQUFTLG9CQUM3QyxXQUNBLE9BQ0o2bEMsRUFBY2hnQyxjQUNYeEgsY0FBYyxTQUNkaUosYUFBYSxPQUFRdytCLEdBQ3hCRCxFQUFjOWxDLFVBQVUwMUIsT0FBTyxtQkFDakMsQ0FDRixHQUVKLENlNUNBc1EsQ0FBcUIsQ0FBRUwsVUFBVSxJZjJJMUIsV0FDTCxNQUFNSyxFQUFRem9DLFNBQVN5b0MsTUFDdkIsR0FBSUEsRUFBTXRvQyxPQUNSLElBQUssTUFBTW9ILEtBQVFraEMsRUFDakJsaEMsRUFBS2lDLGlCQUFpQixVQUFVLFNBQVV3WixHQUV4QzBsQixFQURhMWxCLEVBQUU5YyxPQUNROGMsRUFDekIsSUFDQXpiLEVBQUtpQyxpQkFBaUIsU0FBUyxTQUFVd1osR0FDdkMsTUFBTXpiLEVBQU95YixFQUFFOWMsT0FDZm1CLEVBQWFzQixVQUFVcEIsRUFDekIsSUFHSi9ELGVBQWVrbEMsRUFBaUJuaEMsRUFBTXliLEdBSXBDLEdBQWMsS0FIQ3piLEVBQUsrNkIsYUFBYSxvQkFFN0IsRUFEQWo3QixFQUFhQyxVQUFVQyxJQUVWLENBRWYsR0FEYUEsRUFBSys2QixhQUFhLGFBQ3JCLENBQ1J0ZixFQUFFc0YsaUJBQ0YsTUFBTXFnQixFQUFhcGhDLEVBQUs0WixhQUFhLFVBQ2pDNVosRUFBSzRaLGFBQWEsVUFBVTNnQixPQUM1QixJQUNFb29DLEVBQWFyaEMsRUFBSzRaLGFBQWEsVUFDakM1WixFQUFLNFosYUFBYSxVQUFVM2dCLE9BQzVCLE1BQ0Vxb0MsRUFBVyxJQUFJQyxTQUFTdmhDLEdBRTlCQSxFQUFLOUUsVUFBVUcsSUFBSSxZQUNuQixNQUFNbW1DLFFBQWlCQyxNQUFNTCxFQUFZLENBQ3ZDejBCLE9BQVEwMEIsRUFDUnIvQixLQUFNcy9CLElBRVIsR0FBSUUsRUFBU0UsR0FBSSxDQUNmLElBQUlDLFFBQXVCSCxFQUFTSSxPQUNwQzVoQyxFQUFLOUUsVUFBVU0sT0FBTyxZQUN0QnFtQyxFQUFTN2hDLEVBQU0yaEMsRUFDakIsTUFDRUcsTUFBTSxTQUNOOWhDLEVBQUs5RSxVQUFVTSxPQUFPLFdBRTFCLE1BQVd3RSxFQUFLKzZCLGFBQWEsY0FFM0J0ZixFQUFFc0YsaUJBQ0Y4Z0IsRUFBUzdoQyxHQUViLEtBQU8sQ0FDTHliLEVBQUVzRixpQkFDRixNQUFNZ2hCLEVBQVkvaEMsRUFBS3hHLGNBQWMsZ0JBQ2pDdW9DLEdBQWEvaEMsRUFBSys2QixhQUFhLG9CQUNqQ2lILFVBQVVELEdBQVcsRUFBTSxJQUUvQixDQUNGLENBRUEsU0FBU0YsRUFBUzdoQyxHQUVoQnZILFNBQVNnSCxjQUNQLElBQUlDLFlBQVksV0FBWSxDQUMxQkMsT0FBUSxDQUNOSyxLQUFNQSxNQUtaRixFQUFhc0IsVUFBVXBCLEVBQ3pCLENBQ0YsQ2U3TUFraEMsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvbGlicy9kYS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL3V0aWxzL21hcC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9mb3JtL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zd2lwZXItY29yZS5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9zbGlkZXJzLmpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9zcmMvanMvbGlicy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gRHluYW1pY0FkYXB0KHR5cGUpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbn1cbkR5bmFtaWNBZGFwdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICB0aGlzLtC+YmplY3RzID0gW107XG4gIHRoaXMuZGFDbGFzc25hbWUgPSAnX2R5bmFtaWNfYWRhcHRfJztcbiAgdGhpcy5ub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRhXScpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1tpXTtcbiAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhc2V0LmRhLnRyaW0oKTtcbiAgICBjb25zdCBkYXRhQXJyYXkgPSBkYXRhLnNwbGl0KCcsJyk7XG4gICAgY29uc3Qg0L5iamVjdCA9IHt9O1xuICAgINC+YmplY3QuZWxlbWVudCA9IG5vZGU7XG4gICAg0L5iamVjdC5wYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAg0L5iamVjdC5kZXN0aW5hdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YUFycmF5WzBdLnRyaW0oKSk7XG4gICAg0L5iamVjdC5icmVha3BvaW50ID0gZGF0YUFycmF5WzFdID8gZGF0YUFycmF5WzFdLnRyaW0oKSA6ICc3NjcnO1xuICAgINC+YmplY3QucGxhY2UgPSBkYXRhQXJyYXlbMl0gPyBkYXRhQXJyYXlbMl0udHJpbSgpIDogJ2xhc3QnO1xuICAgINC+YmplY3QuaW5kZXggPSB0aGlzLmluZGV4SW5QYXJlbnQo0L5iamVjdC5wYXJlbnQsINC+YmplY3QuZWxlbWVudCk7XG4gICAgdGhpcy7QvmJqZWN0cy5wdXNoKNC+YmplY3QpO1xuICB9XG4gIHRoaXMuYXJyYXlTb3J0KHRoaXMu0L5iamVjdHMpO1xuICB0aGlzLm1lZGlhUXVlcmllcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChcbiAgICB0aGlzLtC+YmplY3RzLFxuICAgIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAnKCcgK1xuICAgICAgICB0aGlzLnR5cGUgK1xuICAgICAgICAnLXdpZHRoOiAnICtcbiAgICAgICAgaXRlbS5icmVha3BvaW50ICtcbiAgICAgICAgJ3B4KSwnICtcbiAgICAgICAgaXRlbS5icmVha3BvaW50XG4gICAgICApO1xuICAgIH0sXG4gICAgdGhpc1xuICApO1xuICB0aGlzLm1lZGlhUXVlcmllcyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChcbiAgICB0aGlzLm1lZGlhUXVlcmllcyxcbiAgICBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHNlbGYsIGl0ZW0pID09PSBpbmRleDtcbiAgICB9XG4gICk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZWRpYVF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtZWRpYSA9IHRoaXMubWVkaWFRdWVyaWVzW2ldO1xuICAgIGNvbnN0IG1lZGlhU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0LmNhbGwobWVkaWEsICcsJyk7XG4gICAgY29uc3QgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhU3BsaXRbMF0pO1xuICAgIGNvbnN0IG1lZGlhQnJlYWtwb2ludCA9IG1lZGlhU3BsaXRbMV07XG4gICAgY29uc3Qg0L5iamVjdHNGaWx0ZXIgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoXG4gICAgICB0aGlzLtC+YmplY3RzLFxuICAgICAgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uYnJlYWtwb2ludCA9PT0gbWVkaWFCcmVha3BvaW50O1xuICAgICAgfVxuICAgICk7XG4gICAgbWF0Y2hNZWRpYS5hZGRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5tZWRpYUhhbmRsZXIobWF0Y2hNZWRpYSwg0L5iamVjdHNGaWx0ZXIpO1xuICAgIH0pO1xuICAgIHRoaXMubWVkaWFIYW5kbGVyKG1hdGNoTWVkaWEsINC+YmplY3RzRmlsdGVyKTtcbiAgfVxufTtcbkR5bmFtaWNBZGFwdC5wcm90b3R5cGUubWVkaWFIYW5kbGVyID0gZnVuY3Rpb24gKG1hdGNoTWVkaWEsINC+YmplY3RzKSB7XG4gIGlmIChtYXRjaE1lZGlhLm1hdGNoZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8INC+YmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCDQvmJqZWN0ID0g0L5iamVjdHNbaV07XG4gICAgICDQvmJqZWN0LmluZGV4ID0gdGhpcy5pbmRleEluUGFyZW50KNC+YmplY3QucGFyZW50LCDQvmJqZWN0LmVsZW1lbnQpO1xuICAgICAgdGhpcy5tb3ZlVG8o0L5iamVjdC5wbGFjZSwg0L5iamVjdC5lbGVtZW50LCDQvmJqZWN0LmRlc3RpbmF0aW9uKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy9mb3IgKGxldCBpID0gMDsgaSA8INC+YmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaSA9INC+YmplY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCDQvmJqZWN0ID0g0L5iamVjdHNbaV07XG4gICAgICBpZiAo0L5iamVjdC5lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmRhQ2xhc3NuYW1lKSkge1xuICAgICAgICB0aGlzLm1vdmVCYWNrKNC+YmplY3QucGFyZW50LCDQvmJqZWN0LmVsZW1lbnQsINC+YmplY3QuaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbkR5bmFtaWNBZGFwdC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24gKHBsYWNlLCBlbGVtZW50LCBkZXN0aW5hdGlvbikge1xuICBlbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5kYUNsYXNzbmFtZSk7XG4gIGlmIChwbGFjZSA9PT0gJ2xhc3QnIHx8IHBsYWNlID49IGRlc3RpbmF0aW9uLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGRlc3RpbmF0aW9uLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgZWxlbWVudCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwbGFjZSA9PT0gJ2ZpcnN0Jykge1xuICAgIGRlc3RpbmF0aW9uLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIGVsZW1lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuICBkZXN0aW5hdGlvbi5jaGlsZHJlbltwbGFjZV0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGVsZW1lbnQpO1xufTtcbkR5bmFtaWNBZGFwdC5wcm90b3R5cGUubW92ZUJhY2sgPSBmdW5jdGlvbiAocGFyZW50LCBlbGVtZW50LCBpbmRleCkge1xuICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5kYUNsYXNzbmFtZSk7XG4gIGlmIChwYXJlbnQuY2hpbGRyZW5baW5kZXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW5baW5kZXhdLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCBlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCBlbGVtZW50KTtcbiAgfVxufTtcbkR5bmFtaWNBZGFwdC5wcm90b3R5cGUuaW5kZXhJblBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgYXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXJlbnQuY2hpbGRyZW4pO1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgZWxlbWVudCk7XG59O1xuRHluYW1pY0FkYXB0LnByb3RvdHlwZS5hcnJheVNvcnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdtaW4nKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLnNvcnQuY2FsbChhcnIsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYS5icmVha3BvaW50ID09PSBiLmJyZWFrcG9pbnQpIHtcbiAgICAgICAgaWYgKGEucGxhY2UgPT09IGIucGxhY2UpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLnBsYWNlID09PSAnZmlyc3QnIHx8IGIucGxhY2UgPT09ICdsYXN0Jykge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLnBsYWNlID09PSAnbGFzdCcgfHwgYi5wbGFjZSA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEucGxhY2UgLSBiLnBsYWNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYS5icmVha3BvaW50IC0gYi5icmVha3BvaW50O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIEFycmF5LnByb3RvdHlwZS5zb3J0LmNhbGwoYXJyLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGEuYnJlYWtwb2ludCA9PT0gYi5icmVha3BvaW50KSB7XG4gICAgICAgIGlmIChhLnBsYWNlID09PSBiLnBsYWNlKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYS5wbGFjZSA9PT0gJ2ZpcnN0JyB8fCBiLnBsYWNlID09PSAnbGFzdCcpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhLnBsYWNlID09PSAnbGFzdCcgfHwgYi5wbGFjZSA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiLnBsYWNlIC0gYS5wbGFjZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGIuYnJlYWtwb2ludCAtIGEuYnJlYWtwb2ludDtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbn07XG5jb25zdCBkYSA9IG5ldyBEeW5hbWljQWRhcHQoJ21heCcpO1xuZGEuaW5pdCgpO1xuIiwiaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSkge1xuICB3aW5kb3cubWFwID0gbnVsbDtcblxuICBhc3luYyBmdW5jdGlvbiBpbml0TWFwKCkge1xuICAgIGF3YWl0IHltYXBzMy5yZWFkeTtcblxuICAgIGNvbnN0IExPQ0FUSU9OID0ge1xuICAgICAgY2VudGVyOlxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OFxuICAgICAgICAgID8gWzMwLjI5MDcwODcyODAxNzcyLCA1OS45NjQ4NzMyNzQ0Mjg1N11cbiAgICAgICAgICA6IFszMC4yODU4MDQ5OTQ5NzMxOTgsIDU5Ljk2NjI4NDM1NTgzMzU0XSxcbiAgICAgIHpvb206IDE1LFxuICAgIH07XG4gICAgY29uc3QgUElOX0xPQ0FUSU9OID0ge1xuICAgICAgY2VudGVyOiBbMzAuMjg2NzgwNTAwMDAwMDAzLCA1OS45NjY3NzI1NjQxNTE1Ml0sXG4gICAgICB6b29tOiAxNSxcbiAgICB9O1xuXG4gICAgY29uc3Qge1xuICAgICAgWU1hcCxcbiAgICAgIFlNYXBEZWZhdWx0U2NoZW1lTGF5ZXIsXG4gICAgICBZTWFwRGVmYXVsdEZlYXR1cmVzTGF5ZXIsXG4gICAgICBZTWFwTWFya2VyLFxuICAgIH0gPSB5bWFwczM7XG5cbiAgICBjb25zdCBtYXAgPSBuZXcgWU1hcChcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSxcblxuICAgICAgeyBsb2NhdGlvbjogTE9DQVRJT04gfVxuICAgICk7XG5cbiAgICBtYXAuYWRkQ2hpbGQobmV3IFlNYXBEZWZhdWx0U2NoZW1lTGF5ZXIoKSk7XG4gICAgbWFwLmFkZENoaWxkKG5ldyBZTWFwRGVmYXVsdEZlYXR1cmVzTGF5ZXIoKSk7XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGVsLmNsYXNzTmFtZSA9ICdtYXJrZXInO1xuICAgIGVsLnNyYyA9ICcuLi9hcHAvaW1nL2ljb25zL3Bpbi5zdmcnO1xuICAgIGVsLm9uY2xpY2sgPSAoKSA9PlxuICAgICAgbWFwLnVwZGF0ZSh7IGxvY2F0aW9uOiB7IC4uLlBJTl9MT0NBVElPTiwgZHVyYXRpb246IDQwMCB9IH0pO1xuICAgIG1hcC5hZGRDaGlsZChuZXcgWU1hcE1hcmtlcih7IGNvb3JkaW5hdGVzOiBQSU5fTE9DQVRJT04uY2VudGVyIH0sIGVsKSk7XG4gIH1cbiAgaW5pdE1hcCgpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGJvZHkgbG9ja1xuZXhwb3J0IGxldCBib2R5TG9ja1N0YXR1cyA9IHRydWU7XG5leHBvcnQgY29uc3QgYm9keUxvY2tUb2dnbGUgPSAoZGVsYXkgPSA1MDApID0+IHtcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2xvY2snKSkge1xuICAgIGJvZHlVbmxvY2soZGVsYXkpO1xuICB9IGVsc2Uge1xuICAgIGJvZHlMb2NrKGRlbGF5KTtcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBib2R5VW5sb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XG4gIGlmIChib2R5TG9ja1N0YXR1cykge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2xvY2snKTtcbiAgICB9LCBkZWxheSk7XG4gICAgYm9keUxvY2tTdGF0dXMgPSBmYWxzZTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGJvZHlMb2NrU3RhdHVzID0gdHJ1ZTtcbiAgICB9LCBkZWxheSk7XG4gIH1cbn07XG5leHBvcnQgY29uc3QgYm9keUxvY2sgPSAoZGVsYXkgPSA1MDApID0+IHtcbiAgaWYgKGJvZHlMb2NrU3RhdHVzKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xvY2snKTtcblxuICAgIGJvZHlMb2NrU3RhdHVzID0gZmFsc2U7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBib2R5TG9ja1N0YXR1cyA9IHRydWU7XG4gICAgfSwgZGVsYXkpO1xuICB9XG59O1xuXG4vLyBtZW51XG5leHBvcnQgY29uc3QgbWVudUluaXQgPSAoKSA9PiB7XG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGFtYnVyZ2VyJykpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoYm9keUxvY2tTdGF0dXMgJiYgZS50YXJnZXQuY2xvc2VzdCgnLmhhbWJ1cmdlcicpKSB7XG4gICAgICAgIG1lbnVPcGVuKCk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBib2R5TG9ja1N0YXR1cyAmJlxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdfbWVudS1vcGVuZWQnKSAmJlxuICAgICAgICAoZS50YXJnZXQuY2xvc2VzdCgnLm1lbnVfX2Nsb3NlLWJ0bicpIHx8ICFlLnRhcmdldC5jbG9zZXN0KCcubWVudScpKVxuICAgICAgKSB7XG4gICAgICAgIG1lbnVDbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0IGNvbnN0IG1lbnVPcGVuID0gKCkgPT4ge1xuICBib2R5TG9jaygpO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnX21lbnUtb3BlbmVkJyk7XG59O1xuZXhwb3J0IGNvbnN0IG1lbnVDbG9zZSA9ICgpID0+IHtcbiAgYm9keVVubG9jaygpO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnX21lbnUtb3BlbmVkJyk7XG59O1xuXG4vLyByZW1vdmUgY2xhc3MgZnJvbSBhbGwgYXJyYXkgZWxlbWVudHNcbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzc2VzID0gKGFycmF5LCBjbGFzc05hbWUpID0+IHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcblxuLy8gY29udmVydCByZW1cbmV4cG9ydCBjb25zdCByZW0gPSByZW0gPT4ge1xuICBpZiAod2luZG93LmlubmVyV2lkdGggPiA3NjgpIHtcbiAgICByZXR1cm4gMC4wMDUyMDgzMzUgKiB3aW5kb3cuaW5uZXJXaWR0aCAqIHJlbTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDEwMCAvIDM5MCkgKiAoMC4xICogd2luZG93LmlubmVyV2lkdGgpICogcmVtO1xuICB9XG59O1xuXG4vLyBzbW9vdGggc2xpZGVcbmV4cG9ydCBsZXQgX3NsaWRlVXAgPSAodGFyZ2V0LCBkdXJhdGlvbiA9IDUwMCwgc2hvd21vcmUgPSAwKSA9PiB7XG4gIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnX3NsaWRlJykpIHtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnX3NsaWRlJyk7XG4gICAgdGFyZ2V0LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdoZWlnaHQsIG1hcmdpbiwgcGFkZGluZyc7XG4gICAgdGFyZ2V0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uICsgJ21zJztcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gYCR7dGFyZ2V0Lm9mZnNldEhlaWdodH1weGA7XG4gICAgdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICB0YXJnZXQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gc2hvd21vcmUgPyBgJHtzaG93bW9yZX1weGAgOiBgMHB4YDtcbiAgICB0YXJnZXQuc3R5bGUucGFkZGluZ1RvcCA9IDA7XG4gICAgdGFyZ2V0LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAwO1xuICAgIHRhcmdldC5zdHlsZS5tYXJnaW5Ub3AgPSAwO1xuICAgIHRhcmdldC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAwO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRhcmdldC5oaWRkZW4gPSAhc2hvd21vcmUgPyB0cnVlIDogZmFsc2U7XG4gICAgICAhc2hvd21vcmUgPyB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpIDogbnVsbDtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy10b3AnKTtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy1ib3R0b20nKTtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWFyZ2luLXRvcCcpO1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tYm90dG9tJyk7XG4gICAgICAhc2hvd21vcmUgPyB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ292ZXJmbG93JykgOiBudWxsO1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zaXRpb24tcHJvcGVydHknKTtcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdfc2xpZGUnKTtcbiAgICAgIC8vIGNyZWF0ZSBldmVudFxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCdzbGlkZVVwRG9uZScsIHtcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sIGR1cmF0aW9uKTtcbiAgfVxufTtcbmV4cG9ydCBsZXQgX3NsaWRlRG93biA9ICh0YXJnZXQsIGR1cmF0aW9uID0gNTAwLCBzaG93bW9yZSA9IDApID0+IHtcbiAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc2xpZGUnKSkge1xuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdfc2xpZGUnKTtcbiAgICB0YXJnZXQuaGlkZGVuID0gdGFyZ2V0LmhpZGRlbiA/IGZhbHNlIDogbnVsbDtcbiAgICBzaG93bW9yZSA/IHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0JykgOiBudWxsO1xuICAgIGxldCBoZWlnaHQgPSB0YXJnZXQub2Zmc2V0SGVpZ2h0O1xuICAgIHRhcmdldC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIHRhcmdldC5zdHlsZS5oZWlnaHQgPSBzaG93bW9yZSA/IGAke3Nob3dtb3JlfXB4YCA6IGAwcHhgO1xuICAgIHRhcmdldC5zdHlsZS5wYWRkaW5nVG9wID0gMDtcbiAgICB0YXJnZXQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgdGFyZ2V0LnN0eWxlLm1hcmdpblRvcCA9IDA7XG4gICAgdGFyZ2V0LnN0eWxlLm1hcmdpbkJvdHRvbSA9IDA7XG4gICAgdGFyZ2V0Lm9mZnNldEhlaWdodDtcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ2hlaWdodCwgbWFyZ2luLCBwYWRkaW5nJztcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb24gKyAnbXMnO1xuICAgIHRhcmdldC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy10b3AnKTtcbiAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BhZGRpbmctYm90dG9tJyk7XG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tdG9wJyk7XG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tYm90dG9tJyk7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnb3ZlcmZsb3cnKTtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLXByb3BlcnR5Jyk7XG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnX3NsaWRlJyk7XG4gICAgICAvLyBjcmVhdGUgZXZlbnRcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnc2xpZGVEb3duRG9uZScsIHtcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0sIGR1cmF0aW9uKTtcbiAgfVxufTtcbmV4cG9ydCBsZXQgX3NsaWRlVG9nZ2xlID0gKHRhcmdldCwgZHVyYXRpb24gPSA1MDApID0+IHtcbiAgaWYgKHRhcmdldC5oaWRkZW4pIHtcbiAgICByZXR1cm4gX3NsaWRlRG93bih0YXJnZXQsIGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gX3NsaWRlVXAodGFyZ2V0LCBkdXJhdGlvbik7XG4gIH1cbn07XG5cbi8vIGFycmF5IHVuaXF1ZWl6YXRpb25cbmV4cG9ydCBmdW5jdGlvbiB1bmlxdWVBcnJheShhcnJheSkge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpbmRleCwgc2VsZikge1xuICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT09IGluZGV4O1xuICB9KTtcbn1cblxuLy8gcHJvY2Vzc2luZyBtZWRpYSByZXF1ZXN0cyBmcm9tIGF0dHJpYnV0ZXNcbmV4cG9ydCBmdW5jdGlvbiBkYXRhTWVkaWFRdWVyaWVzKGFycmF5LCBkYXRhU2V0VmFsdWUpIHtcbiAgLy8gZ2V0IG9iamVjdHMgd2l0aCBtZWRpYSBxdWVyaWVzXG4gIGNvbnN0IG1lZGlhID0gQXJyYXkuZnJvbShhcnJheSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpbmRleCwgc2VsZikge1xuICAgIGlmIChpdGVtLmRhdGFzZXRbZGF0YVNldFZhbHVlXSkge1xuICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldFtkYXRhU2V0VmFsdWVdLnNwbGl0KCcsJylbMF07XG4gICAgfVxuICB9KTtcbiAgLy8gb2JqZWN0cyB3aXRoIG1lZGlhIHF1ZXJpZXMgaW5pdGlhbGl6YXRpb25cbiAgaWYgKG1lZGlhLmxlbmd0aCkge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzQXJyYXkgPSBbXTtcbiAgICBtZWRpYS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgcGFyYW1zID0gaXRlbS5kYXRhc2V0W2RhdGFTZXRWYWx1ZV07XG4gICAgICBjb25zdCBicmVha3BvaW50ID0ge307XG4gICAgICBjb25zdCBwYXJhbXNBcnJheSA9IHBhcmFtcy5zcGxpdCgnLCcpO1xuICAgICAgYnJlYWtwb2ludC52YWx1ZSA9IHBhcmFtc0FycmF5WzBdO1xuICAgICAgYnJlYWtwb2ludC50eXBlID0gcGFyYW1zQXJyYXlbMV0gPyBwYXJhbXNBcnJheVsxXS50cmltKCkgOiAnbWF4JztcbiAgICAgIGJyZWFrcG9pbnQuaXRlbSA9IGl0ZW07XG4gICAgICBicmVha3BvaW50c0FycmF5LnB1c2goYnJlYWtwb2ludCk7XG4gICAgfSk7XG4gICAgLy8gZ2V0IHVuaXF1ZSBicmVha3BvaW50c1xuICAgIGxldCBtZFF1ZXJpZXMgPSBicmVha3BvaW50c0FycmF5Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJygnICtcbiAgICAgICAgaXRlbS50eXBlICtcbiAgICAgICAgJy13aWR0aDogJyArXG4gICAgICAgIGl0ZW0udmFsdWUgK1xuICAgICAgICAncHgpLCcgK1xuICAgICAgICBpdGVtLnZhbHVlICtcbiAgICAgICAgJywnICtcbiAgICAgICAgaXRlbS50eXBlXG4gICAgICApO1xuICAgIH0pO1xuICAgIG1kUXVlcmllcyA9IHVuaXF1ZUFycmF5KG1kUXVlcmllcyk7XG4gICAgY29uc3QgbWRRdWVyaWVzQXJyYXkgPSBbXTtcblxuICAgIGlmIChtZFF1ZXJpZXMubGVuZ3RoKSB7XG4gICAgICAvLyB3b3JrIHdpdGggZXZlcnkgYnJlYWtwb2ludFxuICAgICAgbWRRdWVyaWVzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtc0FycmF5ID0gYnJlYWtwb2ludC5zcGxpdCgnLCcpO1xuICAgICAgICBjb25zdCBtZWRpYUJyZWFrcG9pbnQgPSBwYXJhbXNBcnJheVsxXTtcbiAgICAgICAgY29uc3QgbWVkaWFUeXBlID0gcGFyYW1zQXJyYXlbMl07XG4gICAgICAgIGNvbnN0IG1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYShwYXJhbXNBcnJheVswXSk7XG4gICAgICAgIC8vIG9iamVjdHMgd2l0aCBjb25kaXRpb25zXG4gICAgICAgIGNvbnN0IGl0ZW1zQXJyYXkgPSBicmVha3BvaW50c0FycmF5LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnZhbHVlID09PSBtZWRpYUJyZWFrcG9pbnQgJiYgaXRlbS50eXBlID09PSBtZWRpYVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1kUXVlcmllc0FycmF5LnB1c2goe1xuICAgICAgICAgIGl0ZW1zQXJyYXksXG4gICAgICAgICAgbWF0Y2hNZWRpYSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZFF1ZXJpZXNBcnJheTtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3BvaWxlcnNcbmV4cG9ydCBmdW5jdGlvbiBzcG9pbGVycygpIHtcbiAgY29uc3Qgc3BvaWxlcnNBcnJheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNwb2lsZXJzXScpO1xuICBpZiAoc3BvaWxlcnNBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgLy8gZ2V0IHJlZ3VsYXIgc3BvaWxlcnNcbiAgICBjb25zdCBzcG9pbGVyc1JlZ3VsYXIgPSBBcnJheS5mcm9tKHNwb2lsZXJzQXJyYXkpLmZpbHRlcihmdW5jdGlvbiAoXG4gICAgICBpdGVtLFxuICAgICAgaW5kZXgsXG4gICAgICBzZWxmXG4gICAgKSB7XG4gICAgICByZXR1cm4gIWl0ZW0uZGF0YXNldC5zcG9pbGVycy5zcGxpdCgnLCcpWzBdO1xuICAgIH0pO1xuICAgIC8vIHJlZ3VsYXIgc3BvaWxlcnMgaW5pdGlhbGl6YXRpb25cbiAgICBpZiAoc3BvaWxlcnNSZWd1bGFyLmxlbmd0aCkge1xuICAgICAgaW5pdFNwb2lsZXJzKHNwb2lsZXJzUmVndWxhcik7XG4gICAgfVxuICAgIC8vIGdldCBzcG9pbGVycyB3aXRoIG1lZGlhIHF1ZXJpZXNcbiAgICBsZXQgbWRRdWVyaWVzQXJyYXkgPSBkYXRhTWVkaWFRdWVyaWVzKHNwb2lsZXJzQXJyYXksICdzcG9pbGVycycpO1xuICAgIGlmIChtZFF1ZXJpZXNBcnJheSAmJiBtZFF1ZXJpZXNBcnJheS5sZW5ndGgpIHtcbiAgICAgIG1kUXVlcmllc0FycmF5LmZvckVhY2gobWRRdWVyaWVzSXRlbSA9PiB7XG4gICAgICAgIC8vIGV2ZW50XG4gICAgICAgIG1kUXVlcmllc0l0ZW0ubWF0Y2hNZWRpYS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaW5pdFNwb2lsZXJzKG1kUXVlcmllc0l0ZW0uaXRlbXNBcnJheSwgbWRRdWVyaWVzSXRlbS5tYXRjaE1lZGlhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGluaXRTcG9pbGVycyhtZFF1ZXJpZXNJdGVtLml0ZW1zQXJyYXksIG1kUXVlcmllc0l0ZW0ubWF0Y2hNZWRpYSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gaW5pdGlhbGl6YXRpb25cbiAgICBmdW5jdGlvbiBpbml0U3BvaWxlcnMoc3BvaWxlcnNBcnJheSwgbWF0Y2hNZWRpYSA9IGZhbHNlKSB7XG4gICAgICBzcG9pbGVyc0FycmF5LmZvckVhY2goc3BvaWxlcnNCbG9jayA9PiB7XG4gICAgICAgIHNwb2lsZXJzQmxvY2sgPSBtYXRjaE1lZGlhID8gc3BvaWxlcnNCbG9jay5pdGVtIDogc3BvaWxlcnNCbG9jaztcbiAgICAgICAgaWYgKG1hdGNoTWVkaWEubWF0Y2hlcyB8fCAhbWF0Y2hNZWRpYSkge1xuICAgICAgICAgIHNwb2lsZXJzQmxvY2suY2xhc3NMaXN0LmFkZCgnX3Nwb2lsZXItaW5pdCcpO1xuICAgICAgICAgIGluaXRTcG9pbGVyQm9keShzcG9pbGVyc0Jsb2NrKTtcbiAgICAgICAgICBzcG9pbGVyc0Jsb2NrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0U3BvaWxlckFjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BvaWxlcnNCbG9jay5jbGFzc0xpc3QucmVtb3ZlKCdfc3BvaWxlci1pbml0Jyk7XG4gICAgICAgICAgaW5pdFNwb2lsZXJCb2R5KHNwb2lsZXJzQmxvY2ssIGZhbHNlKTtcbiAgICAgICAgICBzcG9pbGVyc0Jsb2NrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0U3BvaWxlckFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBjb250ZW50XG4gICAgZnVuY3Rpb24gaW5pdFNwb2lsZXJCb2R5KHNwb2lsZXJzQmxvY2ssIGhpZGVTcG9pbGVyQm9keSA9IHRydWUpIHtcbiAgICAgIGxldCBzcG9pbGVyVGl0bGVzID0gc3BvaWxlcnNCbG9jay5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zcG9pbGVyXScpO1xuICAgICAgaWYgKHNwb2lsZXJUaXRsZXMubGVuZ3RoKSB7XG4gICAgICAgIHNwb2lsZXJUaXRsZXMgPSBBcnJheS5mcm9tKHNwb2lsZXJUaXRsZXMpLmZpbHRlcihcbiAgICAgICAgICBpdGVtID0+IGl0ZW0uY2xvc2VzdCgnW2RhdGEtc3BvaWxlcnNdJykgPT09IHNwb2lsZXJzQmxvY2tcbiAgICAgICAgKTtcbiAgICAgICAgc3BvaWxlclRpdGxlcy5mb3JFYWNoKHNwb2lsZXJUaXRsZSA9PiB7XG4gICAgICAgICAgaWYgKGhpZGVTcG9pbGVyQm9keSkge1xuICAgICAgICAgICAgc3BvaWxlclRpdGxlLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgIGlmICghc3BvaWxlclRpdGxlLmNsYXNzTGlzdC5jb250YWlucygnX3Nwb2lsZXItYWN0aXZlJykpIHtcbiAgICAgICAgICAgICAgc3BvaWxlclRpdGxlLm5leHRFbGVtZW50U2libGluZy5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcG9pbGVyVGl0bGUuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgc3BvaWxlclRpdGxlLm5leHRFbGVtZW50U2libGluZy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRTcG9pbGVyQWN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQ7XG4gICAgICBpZiAoZWwuY2xvc2VzdCgnW2RhdGEtc3BvaWxlcl0nKSkge1xuICAgICAgICBjb25zdCBzcG9pbGVyVGl0bGUgPSBlbC5jbG9zZXN0KCdbZGF0YS1zcG9pbGVyXScpO1xuICAgICAgICBjb25zdCBzcG9pbGVyc0Jsb2NrID0gc3BvaWxlclRpdGxlLmNsb3Nlc3QoJ1tkYXRhLXNwb2lsZXJzXScpO1xuICAgICAgICBjb25zdCBvbmVTcG9pbGVyID0gc3BvaWxlcnNCbG9jay5oYXNBdHRyaWJ1dGUoJ2RhdGEtb25lLXNwb2lsZXInKTtcbiAgICAgICAgY29uc3Qgc3BvaWxlclNwZWVkID0gc3BvaWxlcnNCbG9jay5kYXRhc2V0LnNwb2lsZXJzU3BlZWRcbiAgICAgICAgICA/IHBhcnNlSW50KHNwb2lsZXJzQmxvY2suZGF0YXNldC5zcG9pbGVyc1NwZWVkKVxuICAgICAgICAgIDogNTAwO1xuICAgICAgICBpZiAoIXNwb2lsZXJzQmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLl9zbGlkZScpLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG9uZVNwb2lsZXIgJiZcbiAgICAgICAgICAgICFzcG9pbGVyVGl0bGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc3BvaWxlci1hY3RpdmUnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaGlkZVNwb2lsZXJzQm9keShzcG9pbGVyc0Jsb2NrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BvaWxlclRpdGxlLmNsYXNzTGlzdC50b2dnbGUoJ19zcG9pbGVyLWFjdGl2ZScpO1xuICAgICAgICAgIF9zbGlkZVRvZ2dsZShzcG9pbGVyVGl0bGUubmV4dEVsZW1lbnRTaWJsaW5nLCBzcG9pbGVyU3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGlkZVNwb2lsZXJzQm9keShzcG9pbGVyc0Jsb2NrKSB7XG4gICAgICBjb25zdCBzcG9pbGVyQWN0aXZlVGl0bGUgPSBzcG9pbGVyc0Jsb2NrLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICdbZGF0YS1zcG9pbGVyXS5fc3BvaWxlci1hY3RpdmUnXG4gICAgICApO1xuICAgICAgY29uc3Qgc3BvaWxlclNwZWVkID0gc3BvaWxlcnNCbG9jay5kYXRhc2V0LnNwb2lsZXJzU3BlZWRcbiAgICAgICAgPyBwYXJzZUludChzcG9pbGVyc0Jsb2NrLmRhdGFzZXQuc3BvaWxlcnNTcGVlZClcbiAgICAgICAgOiA1MDA7XG4gICAgICBpZiAoXG4gICAgICAgIHNwb2lsZXJBY3RpdmVUaXRsZSAmJlxuICAgICAgICAhc3BvaWxlcnNCbG9jay5xdWVyeVNlbGVjdG9yQWxsKCcuX3NsaWRlJykubGVuZ3RoXG4gICAgICApIHtcbiAgICAgICAgc3BvaWxlckFjdGl2ZVRpdGxlLmNsYXNzTGlzdC5yZW1vdmUoJ19zcG9pbGVyLWFjdGl2ZScpO1xuICAgICAgICBfc2xpZGVVcChzcG9pbGVyQWN0aXZlVGl0bGUubmV4dEVsZW1lbnRTaWJsaW5nLCBzcG9pbGVyU3BlZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBjbG9zaW5nIG9uIGNsaWNrIG91dHNpZGUgdGhlIHNwb2lsZXJcbiAgICBjb25zdCBzcG9pbGVyc0Nsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3BvaWxlci1jbG9zZV0nKTtcbiAgICBpZiAoc3BvaWxlcnNDbG9zZS5sZW5ndGgpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldDtcbiAgICAgICAgaWYgKCFlbC5jbG9zZXN0KCdbZGF0YS1zcG9pbGVyc10nKSkge1xuICAgICAgICAgIHNwb2lsZXJzQ2xvc2UuZm9yRWFjaChzcG9pbGVyQ2xvc2UgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BvaWxlcnNCbG9jayA9IHNwb2lsZXJDbG9zZS5jbG9zZXN0KCdbZGF0YS1zcG9pbGVyc10nKTtcbiAgICAgICAgICAgIGNvbnN0IHNwb2lsZXJTcGVlZCA9IHNwb2xsZXJzQmxvY2suZGF0YXNldC5zcG9pbGVyc1NwZWVkXG4gICAgICAgICAgICAgID8gcGFyc2VJbnQoc3BvaWxlcnNCbG9jay5kYXRhc2V0LnNwb2lsZXJzU3BlZWQpXG4gICAgICAgICAgICAgIDogNTAwO1xuICAgICAgICAgICAgc3BvaWxlckNsb3NlLmNsYXNzTGlzdC5yZW1vdmUoJ19zcG9pbGVyLWFjdGl2ZScpO1xuICAgICAgICAgICAgX3NsaWRlVXAoc3BvaWxlckNsb3NlLm5leHRFbGVtZW50U2libGluZywgc3BvaWxlclNwZWVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCIvLyBpbml0IGZvcm0gZmllbGRzXG5leHBvcnQgZnVuY3Rpb24gZm9ybUZpZWxkc0luaXQob3B0aW9ucyA9IHsgdmlld1Bhc3M6IGZhbHNlIH0pIHtcbiAgY29uc3QgZm9ybUZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJ2lucHV0W3BsYWNlaG9sZGVyXSx0ZXh0YXJlYVtwbGFjZWhvbGRlcl0nXG4gICk7XG4gIGlmIChmb3JtRmllbGRzLmxlbmd0aCkge1xuICAgIGZvcm1GaWVsZHMuZm9yRWFjaChmb3JtRmllbGQgPT4ge1xuICAgICAgaWYgKCFmb3JtRmllbGQuaGFzQXR0cmlidXRlKCdkYXRhLXBsYWNlaG9sZGVyLW5vaGlkZScpKSB7XG4gICAgICAgIGZvcm1GaWVsZC5kYXRhc2V0LnBsYWNlaG9sZGVyID0gZm9ybUZpZWxkLnBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChcbiAgICAgIHRhcmdldEVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnXG4gICAgKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5kYXRhc2V0LnBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGxhY2Vob2xkZXIgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICghdGFyZ2V0RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbm8tZm9jdXMtY2xhc3NlcycpKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgdGFyZ2V0RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ19mb3JtLWZvY3VzJyk7XG4gICAgICB9XG4gICAgICBmb3JtVmFsaWRhdGUucmVtb3ZlRXJyb3IodGFyZ2V0RWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChcbiAgICAgIHRhcmdldEVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnXG4gICAgKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5kYXRhc2V0LnBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGxhY2Vob2xkZXIgPSB0YXJnZXRFbGVtZW50LmRhdGFzZXQucGxhY2Vob2xkZXI7XG4gICAgICB9XG4gICAgICBpZiAoIXRhcmdldEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLW5vLWZvY3VzLWNsYXNzZXMnKSkge1xuICAgICAgICB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWZvY3VzJyk7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdfZm9ybS1mb2N1cycpO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXZhbGlkYXRlJykpIHtcbiAgICAgICAgZm9ybVZhbGlkYXRlLnZhbGlkYXRlSW5wdXQodGFyZ2V0RWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAob3B0aW9ucy52aWV3UGFzcykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGxldCB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5jbG9zZXN0KCdbY2xhc3MqPVwiX192aWV3cGFzc1wiXScpKSB7XG4gICAgICAgIGxldCBpbnB1dFR5cGUgPSB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnX3ZpZXdwYXNzLWFjdGl2ZScpXG4gICAgICAgICAgPyAncGFzc3dvcmQnXG4gICAgICAgICAgOiAndGV4dCc7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXG4gICAgICAgICAgLnNldEF0dHJpYnV0ZSgndHlwZScsIGlucHV0VHlwZSk7XG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnX3ZpZXdwYXNzLWFjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8vIHZhbGlkYXRpb25cbmV4cG9ydCBsZXQgZm9ybVZhbGlkYXRlID0ge1xuICBnZXRFcnJvcnMoZm9ybSkge1xuICAgIGxldCBlcnJvciA9IDA7XG4gICAgbGV0IGZvcm1SZXF1aXJlZEl0ZW1zID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcqW2RhdGEtcmVxdWlyZWRdJyk7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW1zLmxlbmd0aCkge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbXMuZm9yRWFjaChmb3JtUmVxdWlyZWRJdGVtID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChmb3JtUmVxdWlyZWRJdGVtLm9mZnNldFBhcmVudCAhPT0gbnVsbCB8fFxuICAgICAgICAgICAgZm9ybVJlcXVpcmVkSXRlbS50YWdOYW1lID09PSAnU0VMRUNUJykgJiZcbiAgICAgICAgICAhZm9ybVJlcXVpcmVkSXRlbS5kaXNhYmxlZFxuICAgICAgICApIHtcbiAgICAgICAgICBlcnJvciArPSB0aGlzLnZhbGlkYXRlSW5wdXQoZm9ybVJlcXVpcmVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG4gIH0sXG4gIHZhbGlkYXRlSW5wdXQoZm9ybVJlcXVpcmVkSXRlbSkge1xuICAgIGxldCBlcnJvciA9IDA7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW0uZGF0YXNldC5yZXF1aXJlZCA9PT0gJ2VtYWlsJykge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbS52YWx1ZSA9IGZvcm1SZXF1aXJlZEl0ZW0udmFsdWUucmVwbGFjZSgnICcsICcnKTtcbiAgICAgIGlmICh0aGlzLmVtYWlsVGVzdChmb3JtUmVxdWlyZWRJdGVtKSkge1xuICAgICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgICBlcnJvcisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFcnJvcihmb3JtUmVxdWlyZWRJdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZm9ybVJlcXVpcmVkSXRlbS50eXBlID09PSAnY2hlY2tib3gnICYmXG4gICAgICAhZm9ybVJlcXVpcmVkSXRlbS5jaGVja2VkXG4gICAgKSB7XG4gICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgZXJyb3IrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFmb3JtUmVxdWlyZWRJdGVtLnZhbHVlLnRyaW0oKSkge1xuICAgICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgICBlcnJvcisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFcnJvcihmb3JtUmVxdWlyZWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xuICB9LFxuICBhZGRFcnJvcihmb3JtUmVxdWlyZWRJdGVtKSB7XG4gICAgZm9ybVJlcXVpcmVkSXRlbS5jbGFzc0xpc3QuYWRkKCdfZm9ybS1lcnJvcicpO1xuICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdfZm9ybS1lcnJvcicpO1xuICAgIGxldCBpbnB1dEVycm9yID1cbiAgICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZXJyb3InKTtcbiAgICBpZiAoaW5wdXRFcnJvcikgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RXJyb3IpO1xuICAgIGlmIChmb3JtUmVxdWlyZWRJdGVtLmRhdGFzZXQuZXJyb3IpIHtcbiAgICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVlbmQnLFxuICAgICAgICBgPGRpdiBjbGFzcz1cImZvcm1fX2Vycm9yXCI+JHtmb3JtUmVxdWlyZWRJdGVtLmRhdGFzZXQuZXJyb3J9PC9kaXY+YFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pIHtcbiAgICBmb3JtUmVxdWlyZWRJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWVycm9yJyk7XG4gICAgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWVycm9yJyk7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZXJyb3InKSkge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKFxuICAgICAgICBmb3JtUmVxdWlyZWRJdGVtLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2Vycm9yJylcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBmb3JtQ2xlYW4oZm9ybSkge1xuICAgIGZvcm0ucmVzZXQoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxldCBpbnB1dHMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHRleHRhcmVhJyk7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW5wdXRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBlbCA9IGlucHV0c1tpbmRleF07XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgZm9ybVZhbGlkYXRlLnJlbW92ZUVycm9yKGVsKTtcbiAgICAgIH1cbiAgICAgIGxldCBjaGVja2JveGVzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tib3hfX2lucHV0Jyk7XG4gICAgICBpZiAoY2hlY2tib3hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGVja2JveGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gY2hlY2tib3hlc1tpbmRleF07XG4gICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH0sXG4gIGVtYWlsVGVzdChmb3JtUmVxdWlyZWRJdGVtKSB7XG4gICAgcmV0dXJuICEvXlxcdysoW1xcLi1dP1xcdyspKkBcXHcrKFtcXC4tXT9cXHcrKSooXFwuXFx3ezIsOH0pKyQvLnRlc3QoXG4gICAgICBmb3JtUmVxdWlyZWRJdGVtLnZhbHVlXG4gICAgKTtcbiAgfSxcbn07XG5cbi8vIGZvcm0gc3VibWl0aW9uXG5leHBvcnQgZnVuY3Rpb24gZm9ybVN1Ym1pdChvcHRpb25zID0geyB2YWxpZGF0ZTogdHJ1ZSB9KSB7XG4gIGNvbnN0IGZvcm1zID0gZG9jdW1lbnQuZm9ybXM7XG4gIGlmIChmb3Jtcy5sZW5ndGgpIHtcbiAgICBmb3IgKGNvbnN0IGZvcm0gb2YgZm9ybXMpIHtcbiAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuICAgICAgICBmb3JtU3VibWl0QWN0aW9uKGZvcm0sIGUpO1xuICAgICAgfSk7XG4gICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuICAgICAgICBmb3JtVmFsaWRhdGUuZm9ybUNsZWFuKGZvcm0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGZvcm1TdWJtaXRBY3Rpb24oZm9ybSwgZSkge1xuICAgIGNvbnN0IGVycm9yID0gIWZvcm0uaGFzQXR0cmlidXRlKCdkYXRhLW5vLXZhbGlkYXRlJylcbiAgICAgID8gZm9ybVZhbGlkYXRlLmdldEVycm9ycyhmb3JtKVxuICAgICAgOiAwO1xuICAgIGlmIChlcnJvciA9PT0gMCkge1xuICAgICAgY29uc3QgYWpheCA9IGZvcm0uaGFzQXR0cmlidXRlKCdkYXRhLWFqYXgnKTtcbiAgICAgIGlmIChhamF4KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZm9ybUFjdGlvbiA9IGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKVxuICAgICAgICAgID8gZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpLnRyaW0oKVxuICAgICAgICAgIDogJyMnO1xuICAgICAgICBjb25zdCBmb3JtTWV0aG9kID0gZm9ybS5nZXRBdHRyaWJ1dGUoJ21ldGhvZCcpXG4gICAgICAgICAgPyBmb3JtLmdldEF0dHJpYnV0ZSgnbWV0aG9kJykudHJpbSgpXG4gICAgICAgICAgOiAnR0VUJztcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG5cbiAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdfc2VuZGluZycpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZvcm1BY3Rpb24sIHtcbiAgICAgICAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2VSZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdfc2VuZGluZycpO1xuICAgICAgICAgIGZvcm1TZW50KGZvcm0sIHJlc3BvbnNlUmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGVydCgnZXJyb3InKTtcbiAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ19zZW5kaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZm9ybS5oYXNBdHRyaWJ1dGUoJ2RhdGEtZGV2JykpIHtcbiAgICAgICAgLy8gaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGZvcm1TZW50KGZvcm0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBmb3JtRXJyb3IgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybS1lcnJvcicpO1xuICAgICAgaWYgKGZvcm1FcnJvciAmJiBmb3JtLmhhc0F0dHJpYnV0ZSgnZGF0YS1nb3RvLWVycm9yJykpIHtcbiAgICAgICAgZ290b0Jsb2NrKGZvcm1FcnJvciwgdHJ1ZSwgMTAwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFjdGlvbnMgYWZ0ZXIgc3VibWl0dGluZyB0aGUgZm9ybVxuICBmdW5jdGlvbiBmb3JtU2VudChmb3JtLCByZXNwb25zZVJlc3VsdCA9IGBgKSB7XG4gICAgLy8gZm9ybSBzdWJtaXQgZXZlbnRcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KCdmb3JtU2VudCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgZm9ybTogZm9ybSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICAvLyBjbGVhbiBmb3JtXG4gICAgZm9ybVZhbGlkYXRlLmZvcm1DbGVhbihmb3JtKTtcbiAgfVxufVxuXG4vLyBxdWFudGl0eVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1RdWFudGl0eSgpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5X19idXR0b24nKSkge1xuICAgICAgbGV0IHZhbHVlID0gcGFyc2VJbnQoXG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5JykucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZVxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncXVhbnRpdHlfX2J1dHRvbl9wbHVzJykpIHtcbiAgICAgICAgdmFsdWUrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC0tdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA8IDEpIHZhbHVlID0gMTtcbiAgICAgIH1cbiAgICAgIHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5JykucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIHJhdGluZ1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1SYXRpbmcoKSB7XG4gIGNvbnN0IHJhdGluZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmF0aW5nJyk7XG4gIGlmIChyYXRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICBpbml0UmF0aW5ncygpO1xuICB9XG4gIC8vIG1haW4gZnVuY3Rpb25cbiAgZnVuY3Rpb24gaW5pdFJhdGluZ3MoKSB7XG4gICAgbGV0IHJhdGluZ0FjdGl2ZSwgcmF0aW5nVmFsdWU7XG4gICAgLy8gXCJydW5cIiB0aHJvdWdoIGFsbCB0aGUgcmF0aW5ncyBvbiB0aGUgcGFnZVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByYXRpbmdzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcmF0aW5nID0gcmF0aW5nc1tpbmRleF07XG4gICAgICBpbml0UmF0aW5nKHJhdGluZyk7XG4gICAgfVxuICAgIC8vIGluaXRpYWxpemUgYSBzcGVjaWZpYyByYXRpbmdcbiAgICBmdW5jdGlvbiBpbml0UmF0aW5nKHJhdGluZykge1xuICAgICAgaW5pdFJhdGluZ1ZhcnMocmF0aW5nKTtcblxuICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcblxuICAgICAgaWYgKHJhdGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ3JhdGluZ19zZXQnKSkge1xuICAgICAgICBzZXRSYXRpbmcocmF0aW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG4gICAgZnVuY3Rpb24gaW5pdFJhdGluZ1ZhcnMocmF0aW5nKSB7XG4gICAgICByYXRpbmdBY3RpdmUgPSByYXRpbmcucXVlcnlTZWxlY3RvcignLnJhdGluZ19fYWN0aXZlJyk7XG4gICAgICByYXRpbmdWYWx1ZSA9IHJhdGluZy5xdWVyeVNlbGVjdG9yKCcucmF0aW5nX192YWx1ZScpO1xuICAgIH1cbiAgICAvLyBjaGFuZ2UgdGhlIHdpZHRoIG9mIGFjdGl2ZSBzdGFyc1xuICAgIGZ1bmN0aW9uIHNldFJhdGluZ0FjdGl2ZVdpZHRoKGluZGV4ID0gcmF0aW5nVmFsdWUuaW5uZXJIVE1MKSB7XG4gICAgICBjb25zdCByYXRpbmdBY3RpdmVXaWR0aCA9IGluZGV4IC8gMC4wNTtcbiAgICAgIHJhdGluZ0FjdGl2ZS5zdHlsZS53aWR0aCA9IGAke3JhdGluZ0FjdGl2ZVdpZHRofSVgO1xuICAgIH1cbiAgICAvLyBpbmRpY2F0ZSB0aGUgZ3JhZGVcbiAgICBmdW5jdGlvbiBzZXRSYXRpbmcocmF0aW5nKSB7XG4gICAgICBjb25zdCByYXRpbmdJdGVtcyA9IHJhdGluZy5xdWVyeVNlbGVjdG9yQWxsKCcucmF0aW5nX19pdGVtJyk7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmF0aW5nSXRlbXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHJhdGluZ0l0ZW0gPSByYXRpbmdJdGVtc1tpbmRleF07XG4gICAgICAgIHJhdGluZ0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgLy8gdXBkYXRlIHZhcmlhYmxlc1xuICAgICAgICAgIGluaXRSYXRpbmdWYXJzKHJhdGluZyk7XG4gICAgICAgICAgLy8gdXBkYXRlIGFjdGl2ZSBzdGFyc1xuICAgICAgICAgIHNldFJhdGluZ0FjdGl2ZVdpZHRoKHJhdGluZ0l0ZW0udmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmF0aW5nSXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyB1cGRhdGUgYWN0aXZlIHN0YXJzXG4gICAgICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJhdGluZ0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIC8vIHVwZGF0ZSB2YXJpYWJsZXNcbiAgICAgICAgICBpbml0UmF0aW5nVmFycyhyYXRpbmcpO1xuXG4gICAgICAgICAgaWYgKHJhdGluZy5kYXRhc2V0LmFqYXgpIHtcbiAgICAgICAgICAgIC8vIFwic2VuZFwiIHRvIHNlcnZlclxuICAgICAgICAgICAgc2V0UmF0aW5nVmFsdWUocmF0aW5nSXRlbS52YWx1ZSwgcmF0aW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2hvdyBzcGVjaWZpZWQgZ3JhZGVcbiAgICAgICAgICAgIHJhdGluZ1ZhbHVlLmlubmVySFRNTCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIHNldFJhdGluZ0FjdGl2ZVdpZHRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0UmF0aW5nVmFsdWUodmFsdWUsIHJhdGluZykge1xuICAgICAgaWYgKCFyYXRpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYXRpbmdfc2VuZGluZycpKSB7XG4gICAgICAgIHJhdGluZy5jbGFzc0xpc3QuYWRkKCdyYXRpbmdfc2VuZGluZycpO1xuXG4gICAgICAgIC8vIHNlbmRpbmcgZGF0YSAodmFsdWUpIHRvIHNlcnZlclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgncmF0aW5nLmpzb24nLCB7XG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcblxuICAgICAgICAgIC8vYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIC8vXHR1c2VyUmF0aW5nOiB2YWx1ZVxuICAgICAgICAgIC8vfSksXG4gICAgICAgICAgLy9oZWFkZXJzOiB7XG4gICAgICAgICAgLy9cdCdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAvL31cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICAgIC8vIGdldCBuZXcgcmF0aW5nXG4gICAgICAgICAgY29uc3QgbmV3UmF0aW5nID0gcmVzdWx0Lm5ld1JhdGluZztcblxuICAgICAgICAgIC8vIG5ldyBhdmVyYWdlIHJlc3VsdCBvdXRwdXRcbiAgICAgICAgICByYXRpbmdWYWx1ZS5pbm5lckhUTUwgPSBuZXdSYXRpbmc7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgYWN0aXZlIHN0YXJzXG4gICAgICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcblxuICAgICAgICAgIHJhdGluZy5jbGFzc0xpc3QucmVtb3ZlKCdyYXRpbmdfc2VuZGluZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsZXJ0KCdlcnJvcicpO1xuXG4gICAgICAgICAgcmF0aW5nLmNsYXNzTGlzdC5yZW1vdmUoJ3JhdGluZ19zZW5kaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogU1NSIFdpbmRvdyA0LjAuMlxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xuICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSB7fTtcbiAgfVxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICB9XG4gIH0pO1xufVxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJydcbiAgfSxcbiAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG4gIGdldEVsZW1lbnRCeUlkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50KCkge31cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZSgpIHt9LFxuICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICBpbXBvcnROb2RlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gIHJldHVybiBkb2M7XG59XG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJ1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgcmVwbGFjZVN0YXRlKCkge30sXG4gICAgcHVzaFN0YXRlKCkge30sXG4gICAgZ28oKSB7fSxcbiAgICBiYWNrKCkge31cbiAgfSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIEltYWdlKCkge30sXG4gIERhdGUoKSB7fSxcbiAgc2NyZWVuOiB7fSxcbiAgc2V0VGltZW91dCgpIHt9LFxuICBjbGVhclRpbWVvdXQoKSB7fSxcbiAgbWF0Y2hNZWRpYSgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9LFxuICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZ2V0V2luZG93IGFzIGEsIGdldERvY3VtZW50IGFzIGcgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZWxlbWVudEluZGV4IGFzIGcsIGNsYXNzZXNUb1Rva2VucyBhcyBoLCBnZXRUcmFuc2xhdGUgYXMgaSwgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgaiwgaXNPYmplY3QgYXMgaywgZ2V0U2xpZGVUcmFuc2Zvcm1FbCBhcyBsLCBlbGVtZW50U3R5bGUgYXMgbSwgbmV4dFRpY2sgYXMgbiwgZWxlbWVudE5leHRBbGwgYXMgbywgZWxlbWVudFByZXZBbGwgYXMgcCwgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgcSwgc2hvd1dhcm5pbmcgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcywgZXh0ZW5kIGFzIHQsIGRlbGV0ZVByb3BzIGFzIHUgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYSBhcyBlbGVtZW50UGFyZW50cywgbSBhcyBlbGVtZW50U3R5bGUsIGUgYXMgZWxlbWVudENoaWxkcmVuLCBzIGFzIHNldENTU1Byb3BlcnR5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIG8gYXMgZWxlbWVudE5leHRBbGwsIHAgYXMgZWxlbWVudFByZXZBbGwsIGkgYXMgZ2V0VHJhbnNsYXRlLCBxIGFzIGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBuIGFzIG5leHRUaWNrLCByIGFzIHNob3dXYXJuaW5nLCBjIGFzIGNyZWF0ZUVsZW1lbnQsIGQgYXMgbm93LCB0IGFzIGV4dGVuZCwgZyBhcyBlbGVtZW50SW5kZXgsIHUgYXMgZGVsZXRlUHJvcHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmxldCBzdXBwb3J0O1xuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgc21vb3RoU2Nyb2xsOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmICdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5sZXQgZGV2aWNlQ2FjaGVkO1xuZnVuY3Rpb24gY2FsY0RldmljZShfdGVtcCkge1xuICBsZXQge1xuICAgIHVzZXJBZ2VudFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gIC8vIGlQYWRPcyAxMyBmaXhcbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcbiAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihgJHtzY3JlZW5XaWR0aH14JHtzY3JlZW5IZWlnaHR9YCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cbiAgcmV0dXJuIGRldmljZUNhY2hlZDtcbn1cblxubGV0IGJyb3dzZXI7XG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaSgpLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuXG5mdW5jdGlvbiBSZXNpemUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICAgIGNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIE9ic2VydmVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgYXR0YWNoID0gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKG11dGF0aW9ucyA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXykgcmV0dXJuO1xuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IGVsZW1lbnRQYXJlbnRzKHN3aXBlci5ob3N0RWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmhvc3RFbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxudmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlcyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51bnNldFNsaWRlcygpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cbiAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChzcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZU9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzRnVsbHlWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8PSBzd2lwZXIuc2l6ZSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzW2ldLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGlzRnVsbHlWaXNpYmxlKSB7XG4gICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcyk7XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kLFxuICAgIHByb2dyZXNzTG9vcFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICBjb25zdCBpc0VuZFJvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIDwgMTtcbiAgICBpc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nUm91bmRlZCB8fCBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgaWYgKGlzQmVnaW5uaW5nUm91bmRlZCkgcHJvZ3Jlc3MgPSAwO1xuICAgIGlmIChpc0VuZFJvdW5kZWQpIHByb2dyZXNzID0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YSgwKTtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggKyAxKVswXTtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICAvLyBBY3RpdmUgY2xhc3Nlc1xuICAgIGFjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgaWYgKG5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZTbGlkZSkge1xuICAgICAgICBwcmV2U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG4gICAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgICBpZiAocHJldlNsaWRlKSB7XG4gICAgICAgIHByZXZTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0aXZlU2xpZGVJbmRleCkpIHtcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzLmluZGV4T2YoZmlyc3RTbGlkZUluQ29sdW1uKSwgMCk7XG4gICAgfVxuICAgIHJlYWxJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlU2xpZGVJbmRleCAvIHBhcmFtcy5ncmlkLnJvd3MpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZW50ZXJlZFNsaWRlc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbmVlZExvb3BGaXggPSBjb2xzIC0gdGFyZ2V0U2xpZGVJbmRleCA8IHNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTG9vcEZpeCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gdGFyZ2V0U2xpZGVJbmRleCArIDEgOiB0YXJnZXRTbGlkZUluZGV4IC0gY29scyArIDEsXG4gICAgICAgICAgc2xpZGVSZWFsSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gc3dpcGVyLnJlYWxJbmRleCA6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSk7XG4gIHJldHVybiBzd2lwZXI7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWQsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAncHJldidcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2U25hcCA9IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICB9XG4gIH1cbiAgbGV0IHByZXZJbmRleCA9IDA7XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdwcmV2aW91cycsIHRydWUpICsgMTtcbiAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhsYXN0SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlKHNsaWRlUmVhbEluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gIGNvbnN0IHNob3VsZEZpbGxHcm91cCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXAgIT09IDA7XG4gIGNvbnN0IHNob3VsZEZpbGxHcmlkID0gZ3JpZEVuYWJsZWQgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzICE9PSAwO1xuICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mU2xpZGVzOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuaXNFbGVtZW50ID8gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJywgW3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKSA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIFtwYXJhbXMuc2xpZGVDbGFzcywgcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pO1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBzbGlkZXNQZXJHcm91cCAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBzbGlkZXNQZXJHcm91cCwgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChzaG91bGRGaWxsR3JpZCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBncmlkLnJvd3MsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgaW5pdFNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5sb29wRml4KHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBkaXJlY3Rpb246IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHVuZGVmaW5lZCA6ICduZXh0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9vcEZpeChfdGVtcCkge1xuICBsZXQge1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIHNsaWRlVG8gPSB0cnVlLFxuICAgIGRpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICBieUNvbnRyb2xsZXIsXG4gICAgYnlNb3VzZXdoZWVsXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbGlkZXNFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIGNlbnRlcmVkU2xpZGVzXG4gIH0gPSBwYXJhbXM7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvID8gc2xpZGVzUGVyVmlldyA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICBpZiAobG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gc2xpZGVzUGVyR3JvdXAgLSBsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cDtcbiAgfVxuICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA8IHNsaWRlc1BlclZpZXcgKyBsb29wZWRTbGlkZXMpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnMnKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YCcpO1xuICB9XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgaWYgKGRhdGEucG9pbnRlcklkICE9PSBudWxsICYmIGRhdGEucG9pbnRlcklkICE9PSBlLnBvaW50ZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLnBvaW50ZXJJZCA9IGUucG9pbnRlcklkO1xuICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICBkYXRhLnRvdWNoSWQgPSBlLnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcbiAgfVxuICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAvLyBkb24ndCBwcm9jZWVkIHRvdWNoIGV2ZW50XG4gICAgcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGUuY29tcG9zZWRQYXRoID8gZS5jb21wb3NlZFBhdGgoKSA6IGUucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGlmICghcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIHN0YXJ0WCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaFN0YXJ0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJtb3ZlJykge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgIGlmIChpZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgfVxuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdG91Y2hlcy5wcmV2aW91c1kgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuICBsZXQgbG9vcEZpeGVkO1xuICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VHJhbnNsYXRlOiBkYXRhLmN1cnJlbnRUcmFuc2xhdGVcbiAgICB9KTtcbiAgICBkYXRhLmxvb3BTd2FwUmVzZXQgPSB0cnVlO1xuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBkYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkYXRhLnBvaW50ZXJJZCA9IG51bGw7XG4gIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0LCBwYXRoVHJlZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gcGFyYW1zLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCkgcmV0dXJuO1xuICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgc3dpcGVyLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuICB9XG59XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuICB9XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICBjaGVja092ZXJmbG93XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBldmVudHNQcmVmaXg6ICdzd2lwZXInLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZEJsYW5rU2xpZGVzOiB0cnVlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTbGlkZUluZGV4KHRoaXMuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gaW5kZXgpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG4gIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG4gIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKHZpZXcsIGV4YWN0KSB7XG4gICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgdmlldyA9ICdjdXJyZW50JztcbiAgICB9XG4gICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ251bWJlcicpIHJldHVybiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplIDogMDtcbiAgICAgIGxldCBicmVha0xvb3A7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSAnU1dJUEVSLUNPTlRBSU5FUicpIHtcbiAgICAgIHN3aXBlci5pc0VsZW1lbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgfTtcbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgIGlmICghd3JhcHBlckVsICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHdyYXBwZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKTtcbiAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgZWxlbWVudENoaWxkcmVuKGVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzRWw6IHN3aXBlci5pc0VsZW1lbnQgJiYgIWVsLnBhcmVudE5vZGUuaG9zdC5zbGlkZVNsb3RzID8gZWwucGFyZW50Tm9kZS5ob3N0IDogd3JhcHBlckVsLFxuICAgICAgaG9zdEVsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwucGFyZW50Tm9kZS5ob3N0IDogZWwsXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6IGVsZW1lbnRTdHlsZSh3cmFwcGVyRWwsICdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbml0KGVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuICAgIGNvbnN0IGxhenlFbGVtZW50cyA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBsYXp5RWxlbWVudHMucHVzaCguLi5zd2lwZXIuaG9zdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpKTtcbiAgICB9XG4gICAgbGF6eUVsZW1lbnRzLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gRW1pdFxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2xlYW5TdHlsZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgLy8gRGVzdHJveSBsb29wXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci5lbC5zd2lwZXIgPSBudWxsO1xuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3RhdGljIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187XG4gICAgaWYgKHR5cGVvZiBtb2QgPT09ICdmdW5jdGlvbicgJiYgbW9kdWxlcy5pbmRleE9mKG1vZCkgPCAwKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfVxufVxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcblxuZXhwb3J0IHsgU3dpcGVyIGFzIFMsIGRlZmF1bHRzIGFzIGQgfTtcbiIsImltcG9ydCB7IGUgYXMgZWxlbWVudENoaWxkcmVuLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuZWwsIGAuJHtjaGVja1Byb3BzW2tleV19YClbMF07XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2tQcm9wc1trZXldO1xuICAgICAgICAgIHN3aXBlci5lbC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgICBvcmlnaW5hbFBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGFzIGMgfTtcbiIsImltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuXG5mdW5jdGlvbiBOYXZpZ2F0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRDbGFzczogJ3N3aXBlci1idXR0b24tZGlzYWJsZWQnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWxvY2snLFxuICAgICAgbmF2aWdhdGlvbkRpc2FibGVkQ2xhc3M6ICdzd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCdcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubmF2aWdhdGlvbiA9IHtcbiAgICBuZXh0RWw6IG51bGwsXG4gICAgcHJldkVsOiBudWxsXG4gIH07XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xuICBmdW5jdGlvbiBnZXRFbChlbCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgaWYgKHJlcykgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmVzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgcmVzLmxlbmd0aCA+IDEgJiYgc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbCAmJiAhcmVzKSByZXR1cm4gZWw7XG4gICAgLy8gaWYgKEFycmF5LmlzQXJyYXkocmVzKSAmJiByZXMubGVuZ3RoID09PSAxKSByZXMgPSByZXNbMF07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVFbChlbCwgZGlzYWJsZWQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAoc3ViRWwpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W2Rpc2FibGVkID8gJ2FkZCcgOiAncmVtb3ZlJ10oLi4ucGFyYW1zLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgIGlmIChzdWJFbC50YWdOYW1lID09PSAnQlVUVE9OJykgc3ViRWwuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHRvZ2dsZUVsKHByZXZFbCwgZmFsc2UpO1xuICAgICAgdG9nZ2xlRWwobmV4dEVsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvZ2dsZUVsKHByZXZFbCwgc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gICAgdG9nZ2xlRWwobmV4dEVsLCBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgfVxuICBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvblByZXYnKTtcbiAgfVxuICBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICB9KTtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgbGV0IG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgIGxldCBwcmV2RWwgPSBnZXRFbChwYXJhbXMucHJldkVsKTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9KTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgaW5pdEJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCAmJiBlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5sb2NrQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGRlc3Ryb3lCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKSk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgIXByZXZFbC5pbmNsdWRlcyh0YXJnZXRFbCkgJiYgIW5leHRFbC5pbmNsdWRlcyh0YXJnZXRFbCkpIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcbiAgICAgIGlmIChuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gbmV4dEVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gcHJldkVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIGNsYXNzZXNUb1NlbGVjdG9yKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gYC4ke2NsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXFwuOiErXFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xufVxuXG5leHBvcnQgeyBjbGFzc2VzVG9TZWxlY3RvciBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNsYXNzZXNUb1NlbGVjdG9yIH0gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBnIGFzIGVsZW1lbnRJbmRleCwgYSBhcyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHBmeCA9ICdzd2lwZXItcGFnaW5hdGlvbic7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGJ1bGxldENsYXNzOiBgJHtwZnh9LWJ1bGxldGAsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogYCR7cGZ4fS1idWxsZXQtYWN0aXZlYCxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6IGAke3BmeH0tYCxcbiAgICAgIGN1cnJlbnRDbGFzczogYCR7cGZ4fS1jdXJyZW50YCxcbiAgICAgIHRvdGFsQ2xhc3M6IGAke3BmeH0tdG90YWxgLFxuICAgICAgaGlkZGVuQ2xhc3M6IGAke3BmeH0taGlkZGVuYCxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLW9wcG9zaXRlYCxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiBgJHtwZnh9LWNsaWNrYWJsZWAsXG4gICAgICBsb2NrQ2xhc3M6IGAke3BmeH0tbG9ja2AsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGAke3BmeH0taG9yaXpvbnRhbGAsXG4gICAgICB2ZXJ0aWNhbENsYXNzOiBgJHtwZnh9LXZlcnRpY2FsYCxcbiAgICAgIHBhZ2luYXRpb25EaXNhYmxlZENsYXNzOiBgJHtwZnh9LWRpc2FibGVkYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5wYWdpbmF0aW9uID0ge1xuICAgIGVsOiBudWxsLFxuICAgIGJ1bGxldHM6IFtdXG4gIH07XG4gIGxldCBidWxsZXRTaXplO1xuICBsZXQgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgY29uc3QgbWFrZUVsZW1lbnRzQXJyYXkgPSBlbCA9PiAoQXJyYXkuaXNBcnJheShlbCkgPyBlbCA6IFtlbF0pLmZpbHRlcihlID0+ICEhZSk7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmlsdGVyKHN1YkVsID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA9PT0gMSkgZWwgPSBlbFswXTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICBlbFxuICAgIH0pO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICBzdWJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKSk7XG4gIH1cbiAgb24oJ2NoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYWdpbmF0aW9uIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBlbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBsIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGVmZmVjdFRhcmdldChlZmZlY3RQYXJhbXMsIHNsaWRlRWwpIHtcbiAgY29uc3QgdHJhbnNmb3JtRWwgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBpZiAodHJhbnNmb3JtRWwgIT09IHNsaWRlRWwpIHtcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZS5iYWNrZmFjZVZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZVsnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5J10gPSAnaGlkZGVuJztcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtRWw7XG59XG5cbmV4cG9ydCB7IGVmZmVjdFRhcmdldCBhcyBlIH07XG4iLCJpbXBvcnQgeyBqIGFzIGVsZW1lbnRUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGR1cmF0aW9uLFxuICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgIGFsbFNsaWRlc1xuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGdldFNsaWRlID0gZWwgPT4ge1xuICAgIGlmICghZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5zaGFkb3dSb290ICYmIHNsaWRlRWwuc2hhZG93Um9vdCA9PT0gZWwucGFyZW50Tm9kZSlbMF07XG4gICAgICByZXR1cm4gc2xpZGU7XG4gICAgfVxuICAgIHJldHVybiBlbC5wYXJlbnRFbGVtZW50O1xuICB9O1xuICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgbGV0IHRyYW5zaXRpb25FbmRUYXJnZXQ7XG4gICAgaWYgKGFsbFNsaWRlcykge1xuICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHMuZmlsdGVyKHRyYW5zZm9ybUVsID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSB0cmFuc2Zvcm1FbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSA/IGdldFNsaWRlKHRyYW5zZm9ybUVsKSA6IHRyYW5zZm9ybUVsO1xuICAgICAgICByZXR1cm4gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWwpID09PSBhY3RpdmVJbmRleDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0LmZvckVhY2goZWwgPT4ge1xuICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsICgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGFzIGUgfTtcbiIsImltcG9ydCB7IGUgYXMgZWZmZWN0SW5pdCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RUYXJnZXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMnO1xuaW1wb3J0IHsgbCBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEVmZmVjdEZhZGUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoc2xpZGVFbC5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IHNsaWRlT3BhY2l0eTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHMsXG4gICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnZmFkZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEVmZmVjdEZhZGUgYXMgZGVmYXVsdCB9O1xuIiwiZnVuY3Rpb24gZWZmZWN0SW5pdChwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIGVmZmVjdCxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgb3ZlcndyaXRlUGFyYW1zLFxuICAgIHBlcnNwZWN0aXZlLFxuICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICBnZXRFZmZlY3RQYXJhbXNcbiAgfSA9IHBhcmFtcztcbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2VmZmVjdH1gKTtcbiAgICBpZiAocGVyc3BlY3RpdmUgJiYgcGVyc3BlY3RpdmUoKSkge1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICB9XG4gICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zUmVzdWx0ID0gb3ZlcndyaXRlUGFyYW1zID8gb3ZlcndyaXRlUGFyYW1zKCkgOiB7fTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbiAgb24oJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBpZiAocmVjcmVhdGVTaGFkb3dzKSB7XG4gICAgICBpZiAoIWdldEVmZmVjdFBhcmFtcyB8fCAhZ2V0RWZmZWN0UGFyYW1zKCkuc2xpZGVTaGFkb3dzKSByZXR1cm47XG4gICAgICAvLyByZW1vdmUgc2hhZG93c1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4gc2hhZG93RWwucmVtb3ZlKCkpO1xuICAgICAgfSk7XG4gICAgICAvLyBjcmVhdGUgbmV3IG9uZVxuICAgICAgcmVjcmVhdGVTaGFkb3dzKCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IHJlcXVpcmVVcGRhdGVPblZpcnR1YWw7XG4gIG9uKCd2aXJ0dWFsVXBkYXRlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKCFzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IHRydWU7XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAocmVxdWlyZVVwZGF0ZU9uVmlydHVhbCAmJiBzd2lwZXIuc2xpZGVzICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICByZXF1aXJlVXBkYXRlT25WaXJ0dWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBlZmZlY3RJbml0IGFzIGUgfTtcbiIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJztcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24sIEVmZmVjdEZhZGUsIENvbnRyb2xsZXIgfSBmcm9tICdzd2lwZXIvbW9kdWxlcyc7XG5pbXBvcnQgJ3N3aXBlci9jc3MnO1xuXG5pbXBvcnQgeyByZW1vdmVDbGFzc2VzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyByZW0gfSBmcm9tICcuL3V0aWxzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubGV0IGNhdGVnb3JpZXNTbGlkZXIgPSBudWxsO1xuXG5jb25zdCBjaGFuZ2VTbGlkZU51bSA9IChzd2lwZXIsIHBhZ2luYXRpb24sIHRhcmdldCkgPT4ge1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGlmIChzbGlkZXMubGVuZ3RoICYmIHBhZ2luYXRpb24pIHtcbiAgICBzbGlkZXMuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICBzbGlkZS5xdWVyeVNlbGVjdG9yKHRhcmdldCkuaW5uZXJIVE1MID0gYCR7XG4gICAgICAgIHBhZ2luYXRpb24ucXVlcnlTZWxlY3RvcignLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnKS5pbm5lckhUTUxcbiAgICAgIH1gO1xuICAgIH0pO1xuICB9XG59O1xuY29uc3QgY2hhbmdlQWN0aXZlTnVtID0gKHBhZ2luYXRpb24sIHRhcmdldCkgPT4ge1xuICBpZiAodGFyZ2V0ICYmIHBhZ2luYXRpb24uZWwpIHtcbiAgICB0YXJnZXQuaW5uZXJIVE1MID0gYCR7XG4gICAgICBwYWdpbmF0aW9uLmVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJykuaW5uZXJIVE1MXG4gICAgfWA7XG4gIH1cbn07XG5jb25zdCBpbml0RHluYW1pY1BhZ2luYXRpb24gPSBzd2lwZXIgPT4ge1xuICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPj0gNCkge1xuICAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgY29uc3QgY3VySW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuXG4gICAgaWYgKGJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICByZW1vdmVDbGFzc2VzKGJ1bGxldHMsICdfcmV2ZWFsZWQnKTtcblxuICAgICAgd2luZG93LmlubmVyV2lkdGggPD0gNzY4XG4gICAgICAgID8gYnVsbGV0c1tjdXJJbmRleF0uY2xhc3NMaXN0LmFkZCgnX3JldmVhbGVkJylcbiAgICAgICAgOiBudWxsO1xuICAgICAgYnVsbGV0c1tjdXJJbmRleCArIDFdXG4gICAgICAgID8gYnVsbGV0c1tjdXJJbmRleCArIDFdLmNsYXNzTGlzdC5hZGQoJ19yZXZlYWxlZCcpXG4gICAgICAgIDogbnVsbDtcbiAgICAgIGJ1bGxldHNbY3VySW5kZXggKyAyXVxuICAgICAgICA/IGJ1bGxldHNbY3VySW5kZXggKyAyXS5jbGFzc0xpc3QuYWRkKCdfcmV2ZWFsZWQnKVxuICAgICAgICA6IG51bGw7XG5cbiAgICAgIHdpbmRvdy5pbm5lcldpZHRoID4gNzY4ICYmIGJ1bGxldHNbY3VySW5kZXggKyAzXVxuICAgICAgICA/IGJ1bGxldHNbY3VySW5kZXggKyAzXS5jbGFzc0xpc3QuYWRkKCdfcmV2ZWFsZWQnKVxuICAgICAgICA6IG51bGw7XG5cbiAgICAgIGlmIChcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggPD0gNzY4ICYmXG4gICAgICAgIChjdXJJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDIgfHwgY3VySW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKVxuICAgICAgKSB7XG4gICAgICAgIGJ1bGxldHNbc2xpZGVzLmxlbmd0aCAtIDNdLmNsYXNzTGlzdC5hZGQoJ19yZXZlYWxlZCcpO1xuICAgICAgICBidWxsZXRzW3NsaWRlcy5sZW5ndGggLSAyXS5jbGFzc0xpc3QuYWRkKCdfcmV2ZWFsZWQnKTtcbiAgICAgICAgYnVsbGV0c1tzbGlkZXMubGVuZ3RoIC0gMV0uY2xhc3NMaXN0LmFkZCgnX3JldmVhbGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPiA3NjggJiYgY3VySW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGJ1bGxldHNbMF0uY2xhc3NMaXN0LmFkZCgnX3JldmVhbGVkJyk7XG4gICAgICAgIGJ1bGxldHNbMV0uY2xhc3NMaXN0LmFkZCgnX3JldmVhbGVkJyk7XG4gICAgICAgIGJ1bGxldHNbMl0uY2xhc3NMaXN0LmFkZCgnX3JldmVhbGVkJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xuICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgIGlmICghYnVsbGV0LmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScpKSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoJ19yZXZlYWxlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCByZXZlYWxTbGlkZXMgPSBzd2lwZXIgPT4ge1xuICBjb25zdCBzbGlkZXMgPSBBcnJheS5mcm9tKHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlJykpO1xuXG4gIHJlbW92ZUNsYXNzZXMoc2xpZGVzLCAnX3JldmVhbGVkJyk7XG5cbiAgc2xpZGVzLmZvckVhY2goKHNsaWRlLCBpbmRleCkgPT4ge1xuICAgIGlmIChzbGlkZS5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS1hY3RpdmUnKSkge1xuICAgICAgc2xpZGVzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdfcmV2ZWFsZWQnKTtcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xuICAgICAgICBzbGlkZXNbaW5kZXggKyAxXSA/IHNsaWRlc1tpbmRleCArIDFdLmNsYXNzTGlzdC5hZGQoJ19yZXZlYWxlZCcpIDogbnVsbDtcbiAgICAgICAgc2xpZGVzW2luZGV4ICsgMl0gPyBzbGlkZXNbaW5kZXggKyAyXS5jbGFzc0xpc3QuYWRkKCdfcmV2ZWFsZWQnKSA6IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IGluaXRTbGlkZXJzID0gKCkgPT4ge1xuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1ib3hfX3NsaWRlcicpKSB7XG4gICAgbmV3IFN3aXBlcignLnNlYXJjaC1ib3hfX3NsaWRlcicsIHtcbiAgICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBFZmZlY3RGYWRlXSxcbiAgICAgIG9ic2VydmVyOiB0cnVlLFxuICAgICAgb2JzZXJ2ZVBhcmVudHM6IHRydWUsXG4gICAgICBvYnNlcnZlU2xpZGVDaGlsZHJlbjogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzcGVlZDogNzAwLFxuICAgICAgbG9vcDogdHJ1ZSxcblxuICAgICAgLy8gZWZmZWN0c1xuICAgICAgZWZmZWN0OiAnZmFkZScsXG5cbiAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgcHJldkVsOiAnLnNlYXJjaC1ib3hfX3NsaWRlci1uYXYgLnNlYXJjaC1ib3hfX3NsaWRlci1hcnJfcHJldicsXG4gICAgICAgIG5leHRFbDogJy5zZWFyY2gtYm94X19zbGlkZXItbmF2IC5zZWFyY2gtYm94X19zbGlkZXItYXJyX25leHQnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVyb19fc2xpZGVyJykpIHtcbiAgICBuZXcgU3dpcGVyKCcuaGVyb19fc2xpZGVyJywge1xuICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuICAgICAgb2JzZXJ2ZXI6IHRydWUsXG4gICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgIGF1dG9IZWlnaHQ6IHRydWUsXG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgIGxvb3A6IHRydWUsXG5cbiAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgcHJldkVsOiAnLmhlcm8gLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy5oZXJvIC5zbC1uYXZfX2Fycm93X25leHQnLFxuICAgICAgfSxcblxuICAgICAgLy8gcGFnaW5hdGlvblxuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogJy5oZXJvX19zbC1jb250cm9sIC5zbC1wYWdpbmF0aW9uJyxcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICcwJyArIChpbmRleCArIDEpICsgJzwvc3Bhbj4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIGJyZWFrcG9pbnRzXG4gICAgICBicmVha3BvaW50czoge1xuICAgICAgICA3Njg6IHtcbiAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBvbjoge1xuICAgICAgICBpbml0OiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGNvbnN0IHRvdGFsR2FwID0gc3dpcGVyLnBhc3NlZFBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgICAgICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gc3dpcGVyLnNsaWRlc1swXS5jbGllbnRIZWlnaHQgKyB0b3RhbEdhcDtcbiAgICAgICAgICBzd2lwZXIuZWwuc3R5bGUuaGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICAgIGNoYW5nZVNsaWRlTnVtKHN3aXBlciwgc3dpcGVyLnBhZ2luYXRpb24uZWwsICcuc2xpZGUtaGVyb19fbnVtYmVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGNoYW5nZVNsaWRlTnVtKHN3aXBlciwgc3dpcGVyLnBhZ2luYXRpb24uZWwsICcuc2xpZGUtaGVyb19fbnVtYmVyJyk7XG4gICAgICAgICAgaW5pdER5bmFtaWNQYWdpbmF0aW9uKHN3aXBlcik7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG4gIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjb21tZW5kYXRpb25zX19zbGlkZXInKSkge1xuICAgIG5ldyBTd2lwZXIoJy5yZWNvbW1lbmRhdGlvbnNfX3NsaWRlcicsIHtcbiAgICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSxcbiAgICAgIG9ic2VydmVyOiB0cnVlLFxuICAgICAgb2JzZXJ2ZVBhcmVudHM6IHRydWUsXG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLjQsXG4gICAgICBzcGFjZUJldHdlZW46IDY1LFxuICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgIGxvb3A6IHRydWUsXG4gICAgICBsb25nU3dpcGVzOiBmYWxzZSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG5cbiAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgcHJldkVsOiAnLnJlY29tbWVuZGF0aW9ucyAuc2wtbmF2X19hcnJvd19wcmV2JyxcbiAgICAgICAgbmV4dEVsOiAnLnJlY29tbWVuZGF0aW9ucyAuc2wtbmF2X19hcnJvd19uZXh0JyxcbiAgICAgIH0sXG5cbiAgICAgIC8vIHBhZ2luYXRpb25cbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6ICcucmVjb21tZW5kYXRpb25zIC5zbC1wYWdpbmF0aW9uJyxcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICcwJyArIChpbmRleCArIDEpICsgJzwvc3Bhbj4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIGJyZWFrcG9pbnRzXG4gICAgICBicmVha3BvaW50czoge1xuICAgICAgICA3Njg6IHtcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxuICAgICAgICAgIHNwYWNlQmV0d2VlbjogMTM3LFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBvbjoge1xuICAgICAgICBhZnRlckluaXQ6IHN3aXBlciA9PiB7XG4gICAgICAgICAgY2hhbmdlQWN0aXZlTnVtKFxuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24sXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjb21tZW5kYXRpb25zX19udW1iZXInKVxuICAgICAgICAgICk7XG4gICAgICAgICAgaW5pdER5bmFtaWNQYWdpbmF0aW9uKHN3aXBlcik7XG4gICAgICAgICAgcmV2ZWFsU2xpZGVzKHN3aXBlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWxJbmRleENoYW5nZTogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VBY3RpdmVOdW0oXG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZWNvbW1lbmRhdGlvbnNfX251bWJlcicpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGluaXREeW5hbWljUGFnaW5hdGlvbihzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZVRyYW5zaXRpb25TdGFydDogc3dpcGVyID0+IHtcbiAgICAgICAgICByZXZlYWxTbGlkZXMoc3dpcGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG91Y2hNb3ZlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIHJldmVhbFNsaWRlcyhzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlc3RzX19zbGlkZXInKSkge1xuICAgIG5ldyBTd2lwZXIoJy50ZXN0c19fc2xpZGVyJywge1xuICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuICAgICAgb2JzZXJ2ZXI6IHRydWUsXG4gICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzcGFjZUJldHdlZW46IDMwLFxuICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICBsb29wOiB0cnVlLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogdHJ1ZSxcblxuICAgICAgLy8gbmF2aWdhdGlvblxuICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBwcmV2RWw6ICcudGVzdHMgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy50ZXN0cyAuc2wtbmF2X19hcnJvd19uZXh0JyxcbiAgICAgIH0sXG5cbiAgICAgIC8vIHBhZ2luYXRpb25cbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6ICcudGVzdHMgLnNsLXBhZ2luYXRpb24nLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgJzAnICsgKGluZGV4ICsgMSkgKyAnPC9zcGFuPidcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gYnJlYWtwb2ludHNcbiAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgIDc2ODoge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEuMDEsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICAvLyBldmVudHNcbiAgICAgIG9uOiB7XG4gICAgICAgIGFmdGVySW5pdDogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VBY3RpdmVOdW0oXG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXN0c19fYWN0aXZlLW51bWJlcicpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGluaXREeW5hbWljUGFnaW5hdGlvbihzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZTogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VBY3RpdmVOdW0oXG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXN0c19fYWN0aXZlLW51bWJlcicpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhbEluZGV4Q2hhbmdlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGluaXREeW5hbWljUGFnaW5hdGlvbihzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25zX19zbGlkZXInKSkge1xuICAgIG5ldyBTd2lwZXIoJy5jb2xsZWN0aW9uc19fc2xpZGVyJywge1xuICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuICAgICAgb2JzZXJ2ZXI6IHRydWUsXG4gICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgIHNwZWVkOiAxMDAwLFxuICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEuNixcbiAgICAgIHNwYWNlQmV0d2VlbjogNjQsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgcmVzaXN0YW5jZTogZmFsc2UsXG5cbiAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgcHJldkVsOiAnLmNvbGxlY3Rpb25zIC5zbC1uYXZfX2Fycm93X3ByZXYnLFxuICAgICAgICBuZXh0RWw6ICcuY29sbGVjdGlvbnMgLnNsLW5hdl9fYXJyb3dfbmV4dCcsXG4gICAgICB9LFxuXG4gICAgICAvLyBwYWdpbmF0aW9uXG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGVsOiAnLmNvbGxlY3Rpb25zIC5zbC1wYWdpbmF0aW9uJyxcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICcwJyArIChpbmRleCArIDEpICsgJzwvc3Bhbj4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIGJyZWFrcG9pbnRzXG4gICAgICBicmVha3BvaW50czoge1xuICAgICAgICA3Njg6IHtcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiA0MjAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICAvLyBldmVudHNcbiAgICAgIG9uOiB7XG4gICAgICAgIGFmdGVySW5pdDogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VBY3RpdmVOdW0oXG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xsZWN0aW9uc19fYWN0aXZlLW51bWJlcicpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2xpZGVDaGFuZ2U6IHN3aXBlciA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc2xpZGUnKSkge1xuICAgICAgICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoJ19zbGlkZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGFuZ2VBY3RpdmVOdW0oXG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbixcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb2xsZWN0aW9uc19fYWN0aXZlLW51bWJlcicpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpbml0RHluYW1pY1BhZ2luYXRpb24oc3dpcGVyKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbiAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXRlZ29yaWVzX19zbGlkZXInKSkge1xuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA3NjggJiYgIWNhdGVnb3JpZXNTbGlkZXIpIHtcbiAgICAgIGNhdGVnb3JpZXNTbGlkZXIgPSBuZXcgU3dpcGVyKCcuY2F0ZWdvcmllc19fc2xpZGVyJywge1xuICAgICAgICBtb2R1bGVzOiBbTmF2aWdhdGlvbiwgUGFnaW5hdGlvbl0sXG4gICAgICAgIG9ic2VydmVyOiB0cnVlLFxuICAgICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMixcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMC44KSxcbiAgICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICAgIGxvb3A6IHRydWUsXG5cbiAgICAgICAgLy8gbmF2aWdhdGlvblxuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgcHJldkVsOiAnLmNhdGVnb3JpZXMgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgICAgbmV4dEVsOiAnLmNhdGVnb3JpZXMgLnNsLW5hdl9fYXJyb3dfbmV4dCcsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcGFnaW5hdGlvblxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgZWw6ICcuY2F0ZWdvcmllcyAuc2wtcGFnaW5hdGlvbicsXG4gICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgK1xuICAgICAgICAgICAgICBjbGFzc05hbWUgK1xuICAgICAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgICAgIGAke2luZGV4ICsgMSA8IDEwID8gJzAnIDogJyd9YCArXG4gICAgICAgICAgICAgIChpbmRleCArIDEpICtcbiAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gZXZlbnRzXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgYWZ0ZXJJbml0OiBzd2lwZXIgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGluaXREeW5hbWljUGFnaW5hdGlvbihzd2lwZXIpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzbGlkZUNoYW5nZVRyYW5zaXRpb25TdGFydDogc3dpcGVyID0+IHtcbiAgICAgICAgICAgIGluaXREeW5hbWljUGFnaW5hdGlvbihzd2lwZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gNzY4ICYmIGNhdGVnb3JpZXNTbGlkZXIpIHtcbiAgICAgIGNhdGVnb3JpZXNTbGlkZXIuZGVzdHJveSgpO1xuICAgICAgY2F0ZWdvcmllc1NsaWRlciA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKGUpIHtcbiAgaW5pdFNsaWRlcnMoKTtcbn0pO1xuIiwiaW1wb3J0IHsgX3NsaWRlVXAsIF9zbGlkZURvd24sIF9zbGlkZVRvZ2dsZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgU2VsZWN0IHtcbiAgLy8gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBjdXN0b20gc2VsZWN0IGNsYXNzZXNcbiAgICB0aGlzLmNsYXNzZXMgPSB7XG4gICAgICAvLyBodG1sIGJ1aWxkIGNsYXNzZXNcbiAgICAgIHNlbDogJ3NlbGVjdCcsXG4gICAgICBib2R5OiAnc2VsZWN0X19ib2R5JyxcbiAgICAgIGxhYmVsOiAnc2VsZWN0X19sYWJlbCcsXG4gICAgICB0aXRsZTogJ3NlbGVjdF9fdGl0bGUnLFxuICAgICAgdmFsOiAnc2VsZWN0X192YWx1ZScsXG4gICAgICBjb250ZW50OiAnc2VsZWN0X19jb250ZW50JyxcbiAgICAgIG9wdGlvbnM6ICdzZWxlY3RfX29wdGlvbnMnLFxuICAgICAgb3B0aW9uOiAnc2VsZWN0X19vcHRpb24nLFxuICAgICAgc2Nyb2xsOiAnc2VsZWN0X19zY3JvbGwnLFxuICAgICAgZ3JvdXA6ICdzZWxlY3RfX2dyb3VwJyxcbiAgICAgIGlucDogJ3NlbGVjdF9faW5wdXQnLFxuICAgICAgYXNzZXQ6ICdzZWxlY3RfX2Fzc2V0JyxcbiAgICAgIHR4dDogJ3NlbGVjdF9fdGV4dCcsXG4gICAgICBoaW50OiAnc2VsZWN0X19oaW50JyxcblxuICAgICAgLy8gc3RhdGUgY2xhc3Nlc1xuICAgICAgYWN0aXZlOiAnX3NlbGVjdC1hY3RpdmUnLFxuICAgICAgZm9jdXNlZDogJ19zZWxlY3QtZm9jdXNlZCcsXG4gICAgICBvcGVuZWQ6ICdfc2VsZWN0LW9wZW5lZCcsXG4gICAgICBmaWxsZWQ6ICdfc2VsZWN0LWZpbGxlZCcsXG4gICAgICBzZWxlY3RlZDogJ19zZWxlY3Qtc2VsZWN0ZWQnLFxuICAgICAgZGlzYWJsZWQ6ICdfc2VsZWN0LWRpc2FibGVkJyxcblxuICAgICAgLy8gYWRkaXRpb25hbCBjbGFzc2VzXG4gICAgICBsaXN0OiAnX3NlbGVjdC1saXN0JyxcbiAgICAgIGVycm9yOiAnX3NlbGVjdC1lcnJvcicsXG4gICAgICBtdWx0aXBsZTogJ19zZWxlY3QtbXVsdGlwbGUnLFxuICAgICAgY2hlY2tib3g6ICdfc2VsZWN0LWNoZWNrYm94JyxcbiAgICAgIGxhYmVsOiAnX3NlbGVjdC1sYWJlbCcsXG4gICAgfTtcblxuICAgIC8vIGFsbCBzZWxlY3QgaXRlbXNcbiAgICBjb25zdCBzZWxlY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0Jyk7XG4gICAgaWYgKHNlbGVjdExpc3QubGVuZ3RoKSB7XG4gICAgICB0aGlzLmluaXQoc2VsZWN0TGlzdCk7XG4gICAgfVxuICB9XG5cbiAgLy8gc2VsZWN0IGluaXRpYWxpemF0aW9uICYgYnVpbGQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gaW5pdGlhbGl6YXRpb25cbiAgaW5pdChzZWxlY3RMaXN0KSB7XG4gICAgLy8gaW5pdFxuICAgIHNlbGVjdExpc3QuZm9yRWFjaCgoc2VsZWN0LCBpbmRleCkgPT4ge1xuICAgICAgdGhpcy5pbml0U2VsSXRlbShzZWxlY3QsIGluZGV4ICsgMSk7XG4gICAgfSk7XG5cbiAgICAvLyBldmVudHNcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuc2V0QWN0aW9ucyhlKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgICk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdrZXlkb3duJyxcbiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuc2V0QWN0aW9ucyhlKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgICk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdmb2N1c2luJyxcbiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuc2V0QWN0aW9ucyhlKTtcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgICk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdmb2N1c291dCcsXG4gICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLnNldEFjdGlvbnMoZSk7XG4gICAgICB9LmJpbmQodGhpcylcbiAgICApO1xuICB9XG4gIC8vIHNpbmdsZSBzZWxlY3QgaXRlbSBpbml0aWFsaXphdGlvblxuICBpbml0U2VsSXRlbShyZWxhdGl2ZVNlbCwgaW5kZXgpIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBzZWxlY3QuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuc2VsKTtcbiAgICByZWxhdGl2ZVNlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxlY3QsIHJlbGF0aXZlU2VsKTtcbiAgICBzZWxlY3QuYXBwZW5kQ2hpbGQocmVsYXRpdmVTZWwpO1xuICAgIHJlbGF0aXZlU2VsLmhpZGRlbiA9IHRydWU7XG4gICAgaW5kZXggPyAocmVsYXRpdmVTZWwuZGF0YXNldC5zZWxJZCA9IGluZGV4KSA6IG51bGw7XG5cbiAgICBpZiAodGhpcy5nZXRQbGFjZWhvbGRlcihyZWxhdGl2ZVNlbCkpIHtcbiAgICAgIHJlbGF0aXZlU2VsLmRhdGFzZXQub3B0UGxhY2Vob2xkZXIgPVxuICAgICAgICB0aGlzLmdldFBsYWNlaG9sZGVyKHJlbGF0aXZlU2VsKS52YWx1ZTtcbiAgICAgIGlmICh0aGlzLmdldFBsYWNlaG9sZGVyKHJlbGF0aXZlU2VsKS5sYWJlbC5zaG93KSB7XG4gICAgICAgIGNvbnN0IHNlbFRpdGxlID0gdGhpcy5nZXRTZWxlY3Qoc2VsZWN0LCB0aGlzLmNsYXNzZXMudGl0bGUpLnR3aW5TZWw7XG4gICAgICAgIHNlbFRpdGxlLmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgICAnYWZ0ZXJiZWdpbicsXG4gICAgICAgICAgYDxzcGFuIGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMubGFiZWx9XCI+JHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UGxhY2Vob2xkZXIocmVsYXRpdmVTZWwpLmxhYmVsLnRleHRcbiAgICAgICAgICAgICAgPyB0aGlzLmdldFBsYWNlaG9sZGVyKHJlbGF0aXZlU2VsKS5sYWJlbC50ZXh0XG4gICAgICAgICAgICAgIDogdGhpcy5nZXRQbGFjZWhvbGRlcihyZWxhdGl2ZVNlbCkudmFsdWVcbiAgICAgICAgICB9PC9zcGFuPmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0Lmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICdiZWZvcmVlbmQnLFxuICAgICAgYDxkaXYgY2xhc3M9XCIke3RoaXMuY2xhc3Nlcy5ib2R5fVwiPjxkaXYgaGlkZGVuIGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMub3B0aW9uc31cIj48L2Rpdj48L2Rpdj5gXG4gICAgKTtcbiAgICB0aGlzLmJ1aWxkKHJlbGF0aXZlU2VsKTtcblxuICAgIHJlbGF0aXZlU2VsLmRhdGFzZXQuc3BlZWQgPSByZWxhdGl2ZVNlbC5kYXRhc2V0LnNwZWVkXG4gICAgICA/IHJlbGF0aXZlU2VsLmRhdGFzZXQuc3BlZWRcbiAgICAgIDogJzE1MCc7XG4gICAgcmVsYXRpdmVTZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmluaXRTZWxlY3Rpb25zKGUpO1xuICAgIH0pO1xuICB9XG4gIC8vIHNlbGVjdCBidWlsZFxuICBidWlsZChyZWxhdGl2ZVNlbCkge1xuICAgIGNvbnN0IHNlbGVjdCA9IHJlbGF0aXZlU2VsLnBhcmVudEVsZW1lbnQ7XG5cbiAgICAvLyBzZXQgaWRcbiAgICBzZWxlY3QuZGF0YXNldC5zZWxJZCA9IHJlbGF0aXZlU2VsLmRhdGFzZXQuc2VsSWQ7XG4gICAgLy8gc2V0IHZhbHVlXG4gICAgdGhpcy5zZXRWYWx1ZShzZWxlY3QsIHJlbGF0aXZlU2VsKTtcbiAgICAvLyBzZXQgb3B0aW9uc1xuICAgIHRoaXMuc2V0T3B0aW9ucyhzZWxlY3QsIHJlbGF0aXZlU2VsKTtcbiAgICAvLyBzZXQgY3NzIG1vZGlmaWNhdG9yXG4gICAgcmVsYXRpdmVTZWwuZGF0YXNldC5zZWxBZGRvbkNsYXNzXG4gICAgICA/IHNlbGVjdC5jbGFzc0xpc3QuYWRkKGBzZWxlY3RfJHtyZWxhdGl2ZVNlbC5kYXRhc2V0LnNlbEFkZG9uQ2xhc3N9YClcbiAgICAgIDogbnVsbDtcbiAgICAvLyBzZXQgY2xhc3MgaWYgc2VsZWN0IGlzIG11bHRpcGxlXG4gICAgcmVsYXRpdmVTZWwubXVsdGlwbGVcbiAgICAgID8gc2VsZWN0LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLm11bHRpcGxlKVxuICAgICAgOiBzZWxlY3QuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMubXVsdGlwbGUpO1xuICAgIC8vIHNldCBjbGFzcyBpZiBzZWxlY3QgY2hlY2tib3hlcyBhcmUgc2V0XG4gICAgcmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNlbC1jaGVja2JveGVzJykgJiYgcmVsYXRpdmVTZWwubXVsdGlwbGVcbiAgICAgID8gc2VsZWN0LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmNoZWNrYm94KVxuICAgICAgOiBzZWxlY3QuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMuY2hlY2tib3gpO1xuICAgIC8vIGRpc2FibGUgc2VsZWN0XG4gICAgdGhpcy5kaXNhYmxlU2VsZWN0KHNlbGVjdCwgcmVsYXRpdmVTZWwpO1xuICAgIC8vIHNldCBzZWFyY2ggYWN0aW9ucyBpZiBkYXRhLXNlbC1zZWFyY2ggaXMgc2V0XG4gICAgcmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNlbC1zZWFyY2gnKVxuICAgICAgPyB0aGlzLnNldFNlYXJjaEFjdGlvbnMoc2VsZWN0KVxuICAgICAgOiBudWxsO1xuICAgIC8vIHNldCBzZWxlY3QgYWN0aW9ucyBpZiBpdCdzIGluaXRpYWxseSBvcGVuZWRcbiAgICByZWxhdGl2ZVNlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtc2VsLW9wZW5lZCcpID8gdGhpcy5zZXRBY3Rpb24oc2VsZWN0KSA6IG51bGw7XG5cbiAgICAvLyBzZXQgc2VsZWN0IGhpbnRcbiAgICBpZiAocmVsYXRpdmVTZWwuZGF0YXNldC5zZWxIaW50KSB7XG4gICAgICByZWxhdGl2ZVNlbC5wYXJlbnRFbGVtZW50Lmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgJ2JlZm9yZWVuZCcsXG4gICAgICAgIGA8ZGl2IGNsYXNzPVwic2VsZWN0X19oaW50XCI+JHtyZWxhdGl2ZVNlbC5kYXRhc2V0LnNlbEhpbnR9PC9kaXY+YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzaG93IC8gaGlkZSBzZWxlY3Rpb24gZnJvbSBzZWxlY3QgdGl0bGVcbiAgICBpZiAocmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNob3ctdmFsJykpIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QuYWRkKCdfc2VsZWN0LXNob3ctdmFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKCdfc2VsZWN0LXNob3ctdmFsJyk7XG4gICAgfVxuICB9XG4gIC8vIHNldCB0d2luIHNlbGVjdCB0aXRsZSB2YWx1ZVxuICBzZXRWYWx1ZShzZWxlY3QsIHJlbGF0aXZlU2VsKSB7XG4gICAgY29uc3Qgc2VsQm9keSA9IHRoaXMuZ2V0U2VsZWN0KHNlbGVjdCwgdGhpcy5jbGFzc2VzLmJvZHkpLnR3aW5TZWw7XG4gICAgY29uc3Qgc2VsVGl0bGUgPSB0aGlzLmdldFNlbGVjdChzZWxlY3QsIHRoaXMuY2xhc3Nlcy50aXRsZSkudHdpblNlbDtcblxuICAgIGlmIChzZWxUaXRsZSkgc2VsVGl0bGUucmVtb3ZlKCk7XG4gICAgc2VsQm9keS5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAnYWZ0ZXJiZWdpbicsXG4gICAgICB0aGlzLmdldFZhbHVlKHNlbGVjdCwgcmVsYXRpdmVTZWwpXG4gICAgKTtcbiAgfVxuICAvLyBzZXQgdHdpbiBzZWxlY3Qgb3B0aW9uc1xuICBzZXRPcHRpb25zKHNlbGVjdCwgcmVsYXRpdmVTZWwpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRTZWxlY3Qoc2VsZWN0LCB0aGlzLmNsYXNzZXMub3B0aW9ucykudHdpblNlbDtcblxuICAgIG9wdGlvbnMuaW5uZXJIVE1MID0gdGhpcy5nZXRPcHRpb25zKHJlbGF0aXZlU2VsKTtcbiAgICBvcHRpb25zXG4gICAgICAucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5jbGFzc2VzLm9wdGlvbn1gKVxuICAgICAgLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnNlbGVjdGVkKTtcbiAgfVxuICAvLyBkaXNhYmxlIHNlbGVjdFxuICBkaXNhYmxlU2VsZWN0KHNlbGVjdCwgcmVsYXRpdmVTZWwpIHtcbiAgICBpZiAocmVsYXRpdmVTZWwuZGlzYWJsZWQpIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG4gICAgICB0aGlzLmdldFNlbGVjdChzZWxlY3QsIHRoaXMuY2xhc3Nlcy50aXRsZSkudHdpblNlbC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5kaXNhYmxlZCk7XG4gICAgICB0aGlzLmdldFNlbGVjdChzZWxlY3QsIHRoaXMuY2xhc3Nlcy50aXRsZSkudHdpblNlbC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIG1haW4gYWN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIHNldCBtYWluIGFjdGlvbnNcbiAgc2V0QWN0aW9ucyhlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgY29uc3QgdHlwZSA9IGUudHlwZTtcblxuICAgIGlmIChcbiAgICAgIHRhcmdldC5jbG9zZXN0KHRoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLnNlbCkpIHx8XG4gICAgICB0YXJnZXQuY2xvc2VzdCh0aGlzLmdldENsYXNzKHRoaXMuY2xhc3Nlcy5saXN0KSlcbiAgICApIHtcbiAgICAgIGNvbnN0IHNlbGVjdCA9IHRhcmdldC5jbG9zZXN0KCcuc2VsZWN0JylcbiAgICAgICAgPyB0YXJnZXQuY2xvc2VzdCgnLnNlbGVjdCcpXG4gICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGAuJHt0aGlzLmNsYXNzZXMuc2VsfVtkYXRhLXNlbC1pZD1cIiR7XG4gICAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KHRoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLmxpc3QpKS5kYXRhc2V0LnNlbGVjdElkXG4gICAgICAgICAgICB9XCJdYFxuICAgICAgICAgICk7XG4gICAgICBjb25zdCByZWxhdGl2ZVNlbCA9IHRoaXMuZ2V0U2VsZWN0KHNlbGVjdCkucmVsYXRpdmVTZWw7XG4gICAgICBpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICBpZiAoIXJlbGF0aXZlU2VsLmRpc2FibGVkKSB7XG4gICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KHRoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLmxpc3QpKSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsTGlzdCA9IHRhcmdldC5jbG9zZXN0KHRoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLmxpc3QpKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbE9wdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgIGAuJHt0aGlzLmNsYXNzZXMuc2VsfVtkYXRhLXNlbC1pZD1cIiR7c2VsTGlzdC5kYXRhc2V0LnNlbElkfVwiXSAuc2VsZWN0X19vcHRpb25bZGF0YS1vcHQtdmFsPVwiJHtzZWxMaXN0LmRhdGFzZXQub3B0VmFsfVwiXWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnNldE9wdGlvbkFjdGlvbihzZWxlY3QsIHJlbGF0aXZlU2VsLCBzZWxPcHRpb24pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmNsb3Nlc3QodGhpcy5nZXRDbGFzcyh0aGlzLmNsYXNzZXMudGl0bGUpKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3Rpb24oc2VsZWN0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jbG9zZXN0KHRoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLm9wdGlvbikpKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxPcHRpb24gPSB0YXJnZXQuY2xvc2VzdChcbiAgICAgICAgICAgICAgdGhpcy5nZXRDbGFzcyh0aGlzLmNsYXNzZXMub3B0aW9uKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uQWN0aW9uKHNlbGVjdCwgcmVsYXRpdmVTZWwsIHNlbE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmb2N1c2luJyB8fCB0eXBlID09PSAnZm9jdXNvdXQnKSB7XG4gICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCh0aGlzLmdldENsYXNzKHRoaXMuY2xhc3Nlcy5zZWwpKSkge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnZm9jdXNpbicpIHtcbiAgICAgICAgICAgIHNlbGVjdC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5mb2N1c2VkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc2VzLmZvY3VzZWQpO1xuICAgICAgICAgICAgaWYgKHJlbGF0aXZlU2VsLmhhc0F0dHJpYnV0ZSgnZGF0YS12YWxpZGF0ZScpKSB7XG4gICAgICAgICAgICAgIGlmICghc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzZXMuZmlsbGVkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXJyKHJlbGF0aXZlU2VsLCBzZWxlY3QpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXJyKHJlbGF0aXZlU2VsLCBzZWxlY3QpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdrZXlkb3duJyAmJiBlLmNvZGUgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgIHRoaXMuY2xvc2VHcm91cCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsb3NlR3JvdXAoKTtcbiAgICB9XG4gIH1cbiAgLy8gc2V0IHNpbmdsZSBzZWxlY3QgYWN0aW9uXG4gIHNldEFjdGlvbihzZWxlY3QpIHtcbiAgICBjb25zdCByZWxhdGl2ZVNlbCA9IHRoaXMuZ2V0U2VsZWN0KHNlbGVjdCkucmVsYXRpdmVTZWw7XG4gICAgY29uc3Qgc2VsT3B0aW9ucyA9IHRoaXMuZ2V0U2VsZWN0KHNlbGVjdCwgdGhpcy5jbGFzc2VzLm9wdGlvbnMpLnR3aW5TZWw7XG5cbiAgICBpZiAocmVsYXRpdmVTZWwuY2xvc2VzdCgnW2RhdGEtb25lLXNlbGVjdF0nKSkge1xuICAgICAgY29uc3Qgc2VsZWN0T25lR3JvdXAgPSByZWxhdGl2ZVNlbC5jbG9zZXN0KCdbZGF0YS1vbmUtc2VsZWN0XScpO1xuICAgICAgdGhpcy5jbG9zZUdyb3VwKHNlbGVjdE9uZUdyb3VwKTtcbiAgICB9XG5cbiAgICBpZiAoIXNlbE9wdGlvbnMuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc2xpZGUnKSkge1xuICAgICAgc2VsZWN0LmNsYXNzTGlzdC50b2dnbGUodGhpcy5jbGFzc2VzLm9wZW5lZCk7XG4gICAgICBfc2xpZGVUb2dnbGUoc2VsT3B0aW9ucywgcmVsYXRpdmVTZWwuZGF0YXNldC5zcGVlZCk7XG4gICAgICBpZiAoXG4gICAgICAgIHNlbGVjdC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc2VzLm9wZW5lZCkgJiZcbiAgICAgICAgcmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXZhbGlkYXRlJykgJiZcbiAgICAgICAgc2VsZWN0LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzZXMuZXJyb3IpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFcnIocmVsYXRpdmVTZWwsIHNlbGVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNsb3NlIHNpbmdsZSBzZWxlY3QgZ3JvdXBcbiAgY2xvc2VHcm91cChncm91cCkge1xuICAgIGNvbnN0IHNlbEdyb3VwID0gZ3JvdXAgPyBncm91cCA6IGRvY3VtZW50O1xuICAgIGNvbnN0IHNlbGVjdGlvbnMgPSBzZWxHcm91cC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgYCR7dGhpcy5nZXRDbGFzcyh0aGlzLmNsYXNzZXMuc2VsKX0ke3RoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLm9wZW5lZCl9YFxuICAgICk7XG4gICAgaWYgKHNlbGVjdGlvbnMubGVuZ3RoKSB7XG4gICAgICBzZWxlY3Rpb25zLmZvckVhY2goc2VsZWN0aW9uID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZUl0ZW0oc2VsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvLyBjbG9zZSBzaW5nbGUgc2VsZWN0IGl0ZW1cbiAgY2xvc2VJdGVtKHNlbGVjdCkge1xuICAgIGNvbnN0IHJlbGF0aXZlU2VsID0gdGhpcy5nZXRTZWxlY3Qoc2VsZWN0KS5yZWxhdGl2ZVNlbDtcbiAgICBjb25zdCBzZWxPcHRpb25zID0gdGhpcy5nZXRTZWxlY3Qoc2VsZWN0LCB0aGlzLmNsYXNzZXMub3B0aW9ucykudHdpblNlbDtcblxuICAgIGlmICghc2VsT3B0aW9ucy5jbGFzc0xpc3QuY29udGFpbnMoJ19zbGlkZScpKSB7XG4gICAgICBzZWxlY3QuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMub3BlbmVkKTtcbiAgICAgIF9zbGlkZVVwKHNlbE9wdGlvbnMsIHJlbGF0aXZlU2VsLmRhdGFzZXQuc3BlZWQpO1xuICAgIH1cbiAgfVxuICAvLyBzZXQgc2luZ2xlIG9wdGlvbiBhY3Rpb25zXG4gIHNldE9wdGlvbkFjdGlvbihzZWxlY3QsIHJlbGF0aXZlU2VsLCBvcHRpb24pIHtcbiAgICBpZiAocmVsYXRpdmVTZWwubXVsdGlwbGUpIHtcbiAgICAgIG9wdGlvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZCk7XG4gICAgICBjb25zdCByZWxhdGl2ZVNlbGVjdGlvbnMgPSB0aGlzLmdldERhdGEocmVsYXRpdmVTZWwpLmVsZW1lbnRzO1xuXG4gICAgICByZWxhdGl2ZVNlbGVjdGlvbnMuZm9yRWFjaChyZWxhdGl2ZVNlbGVjdGlvbiA9PiB7XG4gICAgICAgIHJlbGF0aXZlU2VsZWN0aW9uLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0d2luU2VsZWN0aW9ucyA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICB0aGlzLmdldENsYXNzKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZClcbiAgICAgICk7XG4gICAgICB0d2luU2VsZWN0aW9ucy5mb3JFYWNoKHR3aW5TZWxlY3Rpb24gPT4ge1xuICAgICAgICByZWxhdGl2ZVNlbFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9XCIke3R3aW5TZWxlY3Rpb24uZGF0YXNldC5vcHRWYWx9XCJdYClcbiAgICAgICAgICAuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIW9wdGlvbi5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc2VzLnNlbGVjdGVkKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICByZWxhdGl2ZVNlbC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9XCIke29wdGlvbi5kYXRhc2V0Lm9wdFZhbH1cIl1gKVxuICAgICAgICApO1xuICAgICAgICByZWxhdGl2ZVNlbFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9XCIke29wdGlvbi5kYXRhc2V0Lm9wdFZhbH1cIl1gKVxuICAgICAgICAgIC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnNlbGVjdF9fb3B0aW9uJylcbiAgICAgICAgLmZvckVhY2gob3B0ID0+IG9wdC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5zZWxlY3RlZCkpO1xuICAgICAgb3B0aW9uLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLnNlbGVjdGVkKTtcbiAgICAgIGlmICghcmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNob3ctc2VsZWN0aW9uJykpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNlbGVjdC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLm9wdGlvbil9W2hpZGRlbl1gKVxuICAgICAgICApIHtcbiAgICAgICAgICBzZWxlY3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGAke3RoaXMuZ2V0Q2xhc3ModGhpcy5jbGFzc2VzLm9wdGlvbil9W2hpZGRlbl1gXG4gICAgICAgICAgKS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb24uaGlkZGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlU2VsLnZhbHVlID0gb3B0aW9uLmhhc0F0dHJpYnV0ZSgnZGF0YS1vcHQtdmFsJylcbiAgICAgICAgPyBvcHRpb24uZGF0YXNldC5vcHRWYWxcbiAgICAgICAgOiBvcHRpb24udGV4dENvbnRlbnQ7XG4gICAgICB0aGlzLnNldEFjdGlvbihzZWxlY3QpO1xuICAgIH1cbiAgICB0aGlzLnNldFZhbHVlKHNlbGVjdCwgcmVsYXRpdmVTZWwpO1xuICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhyZWxhdGl2ZVNlbCk7XG4gIH1cbiAgLy8gc2V0IHNlYXJjaCBhY3Rpb25zXG4gIHNldFNlYXJjaEFjdGlvbnMoc2VsZWN0KSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IHNlbElucHV0ID0gdGhpcy5nZXRTZWxlY3Qoc2VsZWN0LCB0aGlzLmNsYXNzZXMuaW5wKS50d2luU2VsO1xuICAgIGNvbnN0IHNlbE9wdGlvbnMgPSB0aGlzLmdldFNlbGVjdChcbiAgICAgIHNlbGVjdCxcbiAgICAgIHRoaXMuY2xhc3Nlcy5vcHRpb25zXG4gICAgKS50d2luU2VsLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3RoaXMuY2xhc3Nlcy5vcHRpb259YCk7XG5cbiAgICBzZWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbE9wdGlvbnMuZm9yRWFjaChzZWxPcHRpb24gPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2VsT3B0aW9uLnRleHRDb250ZW50XG4gICAgICAgICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgLmluZGV4T2Yoc2VsSW5wdXQudmFsdWUudG9VcHBlckNhc2UoKSkgPj0gMFxuICAgICAgICApIHtcbiAgICAgICAgICBzZWxPcHRpb24uaGlkZGVuID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsT3B0aW9uLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2VsT3B0aW9ucy5oaWRkZW4gPT09IHRydWUgPyBfdGhpcy5zZXRBY3Rpb24oc2VsZWN0KSA6IG51bGw7XG4gICAgfSk7XG4gIH1cbiAgLy8gc2V0IHNlbGVjdCBzdWJ0aXRsZVxuICBzZXRTdWJ0aXRsZShyZWxhdGl2ZVNlbCkge31cblxuICAvLyB2YWxpZGF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBhZGQgYW4gZXJyb3IgdG8gYSBzZWxlY3RcbiAgYWRkRXJyKHJlbGF0aXZlU2VsLCBzZWxlY3QpIHtcbiAgICBzZWxlY3QuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuZXJyb3IpO1xuXG4gICAgaWYgKHJlbGF0aXZlU2VsLmRhdGFzZXQuc2VsRXJyb3IgJiYgIXJlbGF0aXZlU2VsLmRhdGFzZXQuc2VsSGludCkge1xuICAgICAgcmVsYXRpdmVTZWwucGFyZW50RWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVlbmQnLFxuICAgICAgICBgPGRpdiBjbGFzcz1cInNlbGVjdF9faGludFwiPiR7cmVsYXRpdmVTZWwuZGF0YXNldC5zZWxFcnJvcn08L2Rpdj5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyByZW1vdmUgYW4gZXJyb3IgZnJvbSBhIHNlbGVjdFxuICByZW1vdmVFcnIocmVsYXRpdmVTZWwsIHNlbGVjdCkge1xuICAgIGlmIChzZWxlY3QuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY2xhc3Nlcy5lcnJvcikpIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5lcnJvcik7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHJlbGF0aXZlU2VsLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdF9faGludCcpICYmXG4gICAgICAhcmVsYXRpdmVTZWwuZGF0YXNldC5zZWxIaW50XG4gICAgKSB7XG4gICAgICByZWxhdGl2ZVNlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKFxuICAgICAgICByZWxhdGl2ZVNlbC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RfX2hpbnQnKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyB1dGlscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBnZXQgY3VzdG9tIGNsYXNzXG4gIGdldENsYXNzKGNzc0NsYXNzKSB7XG4gICAgcmV0dXJuIGAuJHtjc3NDbGFzc31gO1xuICB9XG4gIC8vIGdldCBzaW5nbGUgc2VsZWN0IGl0ZW1cbiAgZ2V0U2VsZWN0KHNlbGVjdCwgY3NzQ2xhc3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVsYXRpdmVTZWw6IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKSxcbiAgICAgIHR3aW5TZWw6IHNlbGVjdC5xdWVyeVNlbGVjdG9yKHRoaXMuZ2V0Q2xhc3MoY3NzQ2xhc3MpKSxcbiAgICB9O1xuICB9XG4gIC8vIGdldCBzZWxlY3RlZCBpdGVtIHZhbHVlXG4gIGdldFZhbHVlKHNlbGVjdCwgcmVsYXRpdmVTZWwpIHtcbiAgICBsZXQgYXR0cixcbiAgICAgIGF0dHJDbGFzcyxcbiAgICAgIHRpdGxlVmFsID0gdGhpcy5nZXREYXRhKHJlbGF0aXZlU2VsLCAyKS5odG1sO1xuXG4gICAgLy8gc2V0IHRpdGxlIHZhbHVlXG4gICAgdGl0bGVWYWwgPSB0aXRsZVZhbC5sZW5ndGhcbiAgICAgID8gdGl0bGVWYWxcbiAgICAgIDogcmVsYXRpdmVTZWwuZGF0YXNldC5zZWxMYWJlbFxuICAgICAgPyByZWxhdGl2ZVNlbC5kYXRhc2V0LnNlbExhYmVsXG4gICAgICA6ICcnO1xuXG4gICAgLy8gc2V0IGFjdGl2ZSBjbGFzcyB0byBzZWxlY3QgaWYgaXQgY29udGFpbnMgYW55IHZhbHVlc1xuICAgIGlmICh0aGlzLmdldERhdGEocmVsYXRpdmVTZWwpLnZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5hY3RpdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3QuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMuYWN0aXZlKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgc2VsZWN0IGxhYmVsXG4gICAgaWYgKHJlbGF0aXZlU2VsLmhhc0F0dHJpYnV0ZSgnZGF0YS1zZWwtbGFiZWwnKSkge1xuICAgICAgYXR0ciA9IHJlbGF0aXZlU2VsLmRhdGFzZXQuc2VsTGFiZWxcbiAgICAgICAgPyBgIGRhdGEtc2VsLWxhYmVsPVwiJHtyZWxhdGl2ZVNlbC5kYXRhc2V0LnNlbExhYmVsfVwiYFxuICAgICAgICA6IGAgZGF0YS1zZWwtbGFiZWw9XCLQktGL0LHQvtGAXCJgO1xuICAgICAgYXR0ckNsYXNzID0gYCAke3RoaXMuY2xhc3Nlcy5sYWJlbH1gO1xuICAgIH1cblxuICAgIC8vIHB1c2ggc2VsZWN0aW9ucyB0byB0aGUgbGlzdCBpbnNpZGUgb2Ygc2VsZWN0IHRpdGxlXG4gICAgaWYgKHJlbGF0aXZlU2VsLm11bHRpcGxlICYmIHJlbGF0aXZlU2VsLmhhc0F0dHJpYnV0ZSgnZGF0YS1zZWwtbGlzdCcpKSB7XG4gICAgICB0aXRsZVZhbCA9IHRoaXMuZ2V0RGF0YShyZWxhdGl2ZVNlbClcbiAgICAgICAgLmVsZW1lbnRzLm1hcChcbiAgICAgICAgICBvcHRpb24gPT5cbiAgICAgICAgICAgIGA8c3BhbiBkYXRhLW9wdC1pZD1cIiR7c2VsZWN0LmRhdGFzZXQuc2VsSWR9XCIgZGF0YS1vcHQtdmFsPVwiJHtcbiAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlXG4gICAgICAgICAgICB9XCIgY2xhc3M9XCJfbGlzdC1pdGVtXCI+JHt0aGlzLmdldENvbnRlbnQob3B0aW9uKX08L3NwYW4+YFxuICAgICAgICApXG4gICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgaWYgKFxuICAgICAgICByZWxhdGl2ZVNlbC5kYXRhc2V0Lmxpc3QgJiZcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyZWxhdGl2ZVNlbC5kYXRhc2V0Lmxpc3QpXG4gICAgICApIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyZWxhdGl2ZVNlbC5kYXRhc2V0Lmxpc3QpLmlubmVySFRNTCA9IHRpdGxlVmFsO1xuICAgICAgICBpZiAocmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNlbC1zZWFyY2gnKSkgdGl0bGVWYWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbml0IHNlbGVjdCBzZWFyY2hcbiAgICBpZiAocmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNlbC1zZWFyY2gnKSkge1xuICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMudGl0bGV9XCI+PHNwYW4gJHthdHRyfSBjbGFzcz1cIiR7dGhpcy5jbGFzc2VzLnZhbH1cIj48aW5wdXQgYXV0b2NvbXBsZXRlPVwib2ZmXCIgdHlwZT1cInNlYXJjaFwiIHBsYWNlaG9sZGVyPVwiJHt0aXRsZVZhbH1cIiBkYXRhLXBsYWNlaG9sZGVyPVwiJHt0aXRsZVZhbH1cIiBjbGFzcz1cIiR7dGhpcy5jbGFzc2VzLmlucH1cIj48L3NwYW4+PC9kaXY+YDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VzdG9tQ2xhc3MgPVxuICAgICAgICB0aGlzLmdldERhdGEocmVsYXRpdmVTZWwpLmVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICB0aGlzLmdldERhdGEocmVsYXRpdmVTZWwpLmVsZW1lbnRzWzBdLmRhdGFzZXQub3B0Q2xhc3NcbiAgICAgICAgICA/IGAgJHt0aGlzLmdldERhdGEocmVsYXRpdmVTZWwpLmVsZW1lbnRzWzBdLmRhdGFzZXQub3B0Q2xhc3N9YFxuICAgICAgICAgIDogJyc7XG4gICAgICByZXR1cm4gYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMudGl0bGV9XCI+PHNwYW4gJHtcbiAgICAgICAgYXR0ciA/IGF0dHIgOiAnJ1xuICAgICAgfSBjbGFzcz1cIiR7dGhpcy5jbGFzc2VzLnZhbH0gJHtcbiAgICAgICAgYXR0ckNsYXNzID8gYXR0ckNsYXNzIDogJydcbiAgICAgIH1cIj48c3BhbiBjbGFzcz1cIiR7XG4gICAgICAgIHRoaXMuY2xhc3Nlcy5jb250ZW50XG4gICAgICB9JHtjdXN0b21DbGFzc31cIj4ke3RpdGxlVmFsfTwvc3Bhbj48L3NwYW4+PC9idXR0b24+YDtcbiAgICB9XG4gIH1cbiAgLy8gZ2V0IG9wdGlvbnNcbiAgZ2V0T3B0aW9ucyhyZWxhdGl2ZVNlbCkge1xuICAgIGNvbnN0IHNlbFNjcm9sbCA9IHJlbGF0aXZlU2VsLmhhc0F0dHJpYnV0ZSgnZGF0YS1zZWwtc2Nyb2xsJylcbiAgICAgID8gYGRhdGEtc2ltcGxlYmFyYFxuICAgICAgOiAnJztcbiAgICBsZXQgc2VsU2Nyb2xsSGVpZ2h0ID0gcmVsYXRpdmVTZWwuZGF0YXNldC5zZWxTY3JvbGxcbiAgICAgID8gYHN0eWxlPVwibWF4LWhlaWdodDoke3JlbGF0aXZlU2VsLmRhdGFzZXQuc2VsU2Nyb2xsfXB4XCJgXG4gICAgICA6ICcnO1xuICAgIGxldCBzZWxPcHRpb25zID0gQXJyYXkuZnJvbShyZWxhdGl2ZVNlbC5vcHRpb25zKTtcblxuICAgIGlmIChzZWxPcHRpb25zLmxlbmd0aCkge1xuICAgICAgbGV0IHNlbE9wdGlvbnNIVE1MID0gYGA7XG5cbiAgICAgIGlmIChcbiAgICAgICAgKHRoaXMuZ2V0UGxhY2Vob2xkZXIocmVsYXRpdmVTZWwpICYmXG4gICAgICAgICAgIXRoaXMuZ2V0UGxhY2Vob2xkZXIocmVsYXRpdmVTZWwpLnNob3cpIHx8XG4gICAgICAgIHJlbGF0aXZlU2VsLm11bHRpcGxlXG4gICAgICApIHtcbiAgICAgICAgc2VsT3B0aW9ucyA9IHNlbE9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24udmFsdWUpO1xuICAgICAgfVxuICAgICAgc2VsT3B0aW9uc0hUTUwgKz0gc2VsU2Nyb2xsXG4gICAgICAgID8gYDxkaXYgJHtzZWxTY3JvbGx9ICR7c2VsU2Nyb2xsSGVpZ2h0fSBjbGFzcz1cIiR7dGhpcy5jbGFzc2VzLnNjcm9sbH1cIj5gXG4gICAgICAgIDogJyc7XG4gICAgICBzZWxPcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgc2VsT3B0aW9uc0hUTUwgKz0gdGhpcy5nZXRPcHRpb24ob3B0aW9uLCByZWxhdGl2ZVNlbCk7XG4gICAgICB9KTtcbiAgICAgIHNlbE9wdGlvbnNIVE1MICs9IHNlbFNjcm9sbCA/IGA8L2Rpdj5gIDogJyc7XG4gICAgICByZXR1cm4gc2VsT3B0aW9uc0hUTUw7XG4gICAgfVxuICB9XG4gIC8vIGdldCBvcHRpb25cbiAgZ2V0T3B0aW9uKG9wdGlvbiwgcmVsYXRpdmVTZWwpIHtcbiAgICBjb25zdCBzZWxlY3Rpb25zID1cbiAgICAgIG9wdGlvbi5zZWxlY3RlZCAmJiByZWxhdGl2ZVNlbC5tdWx0aXBsZVxuICAgICAgICA/IGAgJHt0aGlzLmNsYXNzZXMuc2VsZWN0ZWR9YFxuICAgICAgICA6ICcnO1xuICAgIGNvbnN0IHNob3dTZWxlY3Rpb24gPVxuICAgICAgb3B0aW9uLnNlbGVjdGVkICYmXG4gICAgICAhcmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXNob3ctc2VsZWN0aW9uJykgJiZcbiAgICAgICFyZWxhdGl2ZVNlbC5tdWx0aXBsZVxuICAgICAgICA/IGBoaWRkZW5gXG4gICAgICAgIDogYGA7XG4gICAgY29uc3Qgb3B0aW9uQ2xhc3MgPSBvcHRpb24uZGF0YXNldC5vcHRDbGFzc1xuICAgICAgPyBgICR7b3B0aW9uLmRhdGFzZXQub3B0Q2xhc3N9YFxuICAgICAgOiAnJztcbiAgICBjb25zdCBvcHRpb25MaW5rID0gb3B0aW9uLmRhdGFzZXQub3B0aW9uTGlua1xuICAgICAgPyBvcHRpb24uZGF0YXNldC5vcHRpb25MaW5rXG4gICAgICA6IGZhbHNlO1xuICAgIGNvbnN0IG9wdGlvbkxpbmtUYXJnZXQgPSBvcHRpb24uaGFzQXR0cmlidXRlKCdkYXRhLW9wdGlvbi1saW5rLXRhcmdldCcpXG4gICAgICA/IGB0YXJnZXQ9XCJfYmxhbmtcImBcbiAgICAgIDogJyc7XG4gICAgbGV0IG9wdGlvbkhUTUwgPSBgYDtcblxuICAgIG9wdGlvbkhUTUwgKz0gb3B0aW9uTGlua1xuICAgICAgPyBgPGEgJHtvcHRpb25MaW5rVGFyZ2V0fSAke3Nob3dTZWxlY3Rpb259IGhyZWY9XCIke29wdGlvbkxpbmt9XCIgZGF0YS1vcHQtdmFsPVwiJHtvcHRpb24udmFsdWV9XCIgY2xhc3M9XCIke3RoaXMuY2xhc3Nlcy5vcHRpb259JHtvcHRpb25DbGFzc30ke3NlbGVjdGlvbnN9XCI+YFxuICAgICAgOiBgPGJ1dHRvbiAke3Nob3dTZWxlY3Rpb259IGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMub3B0aW9ufSR7b3B0aW9uQ2xhc3N9JHtzZWxlY3Rpb25zfVwiIGRhdGEtb3B0LXZhbD1cIiR7b3B0aW9uLnZhbHVlfVwiIHR5cGU9XCJidXR0b25cIj5gO1xuICAgIG9wdGlvbkhUTUwgKz0gdGhpcy5nZXRDb250ZW50KG9wdGlvbik7XG4gICAgb3B0aW9uSFRNTCArPSBvcHRpb25MaW5rID8gYDwvYT5gIDogYDwvYnV0dG9uPmA7XG4gICAgcmV0dXJuIG9wdGlvbkhUTUw7XG4gIH1cbiAgLy8gZ2V0IHNlbGVjdCBjb250ZW50XG4gIGdldENvbnRlbnQob3B0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9uRGF0YSA9IG9wdGlvbi5kYXRhc2V0Lm9wdEFzc2V0XG4gICAgICA/IGAke29wdGlvbi5kYXRhc2V0Lm9wdEFzc2V0fWBcbiAgICAgIDogJyc7XG4gICAgY29uc3Qgb3B0aW9uRGF0YUhUTUwgPVxuICAgICAgb3B0aW9uRGF0YS5pbmRleE9mKCdpbWcnKSA+PSAwXG4gICAgICAgID8gYDxpbWcgc3JjPVwiJHtvcHRpb25EYXRhfVwiIGFsdD1cIlwiPmBcbiAgICAgICAgOiBvcHRpb25EYXRhO1xuICAgIGxldCBvcHRpb25Db250ZW50SFRNTCA9IGBgO1xuXG4gICAgb3B0aW9uQ29udGVudEhUTUwgKz0gb3B0aW9uRGF0YVxuICAgICAgPyBgPHNwYW4gY2xhc3M9XCIke3RoaXMuY2xhc3Nlcy5ncm91cH1cIj5gXG4gICAgICA6ICcnO1xuICAgIG9wdGlvbkNvbnRlbnRIVE1MICs9IG9wdGlvbkRhdGFcbiAgICAgID8gYDxzcGFuIGNsYXNzPVwiJHt0aGlzLmNsYXNzZXMuYXNzZXR9XCI+YFxuICAgICAgOiAnJztcbiAgICBvcHRpb25Db250ZW50SFRNTCArPSBvcHRpb25EYXRhID8gb3B0aW9uRGF0YUhUTUwgOiAnJztcbiAgICBvcHRpb25Db250ZW50SFRNTCArPSBvcHRpb25EYXRhID8gYDwvc3Bhbj5gIDogJyc7XG4gICAgb3B0aW9uQ29udGVudEhUTUwgKz0gb3B0aW9uRGF0YSA/IGA8c3BhbiBjbGFzcz1cIiR7dGhpcy5jbGFzc2VzLnR4dH1cIj5gIDogJyc7XG4gICAgb3B0aW9uQ29udGVudEhUTUwgKz0gb3B0aW9uLnRleHRDb250ZW50O1xuICAgIG9wdGlvbkNvbnRlbnRIVE1MICs9IG9wdGlvbkRhdGEgPyBgPC9zcGFuPmAgOiAnJztcbiAgICBvcHRpb25Db250ZW50SFRNTCArPSBvcHRpb25EYXRhID8gYDwvc3Bhbj5gIDogJyc7XG4gICAgcmV0dXJuIG9wdGlvbkNvbnRlbnRIVE1MO1xuICB9XG4gIC8vIGdldCBzZWxlY3QgcGxhY2Vob2xkZXJcbiAgZ2V0UGxhY2Vob2xkZXIocmVsYXRpdmVTZWwpIHtcbiAgICBjb25zdCBwbGFjZWhvbGRlciA9IEFycmF5LmZyb20ocmVsYXRpdmVTZWwub3B0aW9ucykuZmluZChcbiAgICAgIG9wdGlvbiA9PiAhb3B0aW9uLnZhbHVlXG4gICAgKTtcblxuICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzZXMuc3VidGl0bGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHBsYWNlaG9sZGVyLnRleHRDb250ZW50LFxuICAgICAgICBzaG93OiBwbGFjZWhvbGRlci5oYXNBdHRyaWJ1dGUoJ2RhdGEtc2VsLXBoLXNob3cnKSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICBzaG93OiBwbGFjZWhvbGRlci5oYXNBdHRyaWJ1dGUoJ2RhdGEtc2VsLXBoJyksXG4gICAgICAgICAgdGV4dDogcGxhY2Vob2xkZXIuZGF0YXNldC5vcHRQbGFjZWhvbGRlcixcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIC8vIGdldCBzZWxlY3RlZCBvcHRpb25zIGRhdGFcbiAgZ2V0RGF0YShyZWxhdGl2ZVNlbCkge1xuICAgIGxldCBzZWxlY3Rpb25zID0gW107XG5cbiAgICBpZiAocmVsYXRpdmVTZWwubXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGlvbnMgPSBBcnJheS5mcm9tKHJlbGF0aXZlU2VsLm9wdGlvbnMpXG4gICAgICAgIC5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi52YWx1ZSlcbiAgICAgICAgLmZpbHRlcihvcHRpb24gPT4gb3B0aW9uLnNlbGVjdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9ucy5wdXNoKHJlbGF0aXZlU2VsLm9wdGlvbnNbcmVsYXRpdmVTZWwuc2VsZWN0ZWRJbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZWxlbWVudHM6IHNlbGVjdGlvbnMubWFwKG9wdGlvbiA9PiBvcHRpb24pLFxuICAgICAgdmFsdWVzOiBzZWxlY3Rpb25zXG4gICAgICAgIC5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi52YWx1ZSlcbiAgICAgICAgLm1hcChvcHRpb24gPT4gb3B0aW9uLnZhbHVlKSxcbiAgICAgIGh0bWw6IHNlbGVjdGlvbnMubWFwKG9wdGlvbiA9PiB0aGlzLmdldENvbnRlbnQob3B0aW9uKSksXG4gICAgfTtcbiAgfVxuXG4gIC8vIHNlbGVjdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGluaXQgc2VsZWN0aW9uc1xuICBpbml0U2VsZWN0aW9ucyhlKSB7XG4gICAgY29uc3QgcmVsYXRpdmVTZWwgPSBlLnRhcmdldDtcblxuICAgIHRoaXMuYnVpbGQocmVsYXRpdmVTZWwpO1xuICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhyZWxhdGl2ZVNlbCk7XG4gIH1cbiAgLy8gc2V0IHNlbGVjdGlvbnNcbiAgc2V0U2VsZWN0aW9ucyhyZWxhdGl2ZVNlbCkge1xuICAgIGNvbnN0IHNlbGVjdCA9IHJlbGF0aXZlU2VsLnBhcmVudEVsZW1lbnQ7XG5cbiAgICBpZiAocmVsYXRpdmVTZWwuaGFzQXR0cmlidXRlKCdkYXRhLXN1Ym1pdCcpICYmIHJlbGF0aXZlU2VsLnZhbHVlKSB7XG4gICAgICBsZXQgdGVtcEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgdGVtcEJ1dHRvbi50eXBlID0gJ3N1Ym1pdCc7XG4gICAgICByZWxhdGl2ZVNlbC5jbG9zZXN0KCdmb3JtJykuYXBwZW5kKHRlbXBCdXR0b24pO1xuICAgICAgdGVtcEJ1dHRvbi5jbGljaygpO1xuICAgICAgdGVtcEJ1dHRvbi5yZW1vdmUoKTtcbiAgICB9XG4gICAgcmVsYXRpdmVTZWwucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5maWxsZWQpO1xuICAgIHRoaXMuc2VsZWN0aW9uKHNlbGVjdCwgcmVsYXRpdmVTZWwpO1xuICB9XG4gIC8vIGN1c3RvbSBzZWxlY3QgZXZlbnQgKGxpc3RlbiB0byBhbnkgc2VsZWN0aW9ucyAvIG11dGF0aW9ucylcbiAgc2VsZWN0aW9uKHNlbGVjdCwgcmVsYXRpdmVTZWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KCdzZWxlY3Rpb24nLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIHNlbGVjdDogcmVsYXRpdmVTZWwsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbm5ldyBTZWxlY3Qoe30pO1xuIiwiaW1wb3J0IHsgcmVtb3ZlQ2xhc3NlcyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgLy8gaGVhZGVyIHNlYXJjaFxuICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX3NlYXJjaC1pbnB1dCcpO1xuICBpZiAoc2VhcmNoSW5wdXQpIHtcbiAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgZnVuY3Rpb24gKCkge1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ19zZWFyY2gtYm94LW9wZW5lZCcpO1xuICAgIH0pO1xuICAgIHNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlYXJjaElucHV0LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGlmICghc2VhcmNoSW5wdXQuY2xvc2VzdCgnZm9ybScpLmNsYXNzTGlzdC5jb250YWlucygnX2ZpbGxlZCcpKSB7XG4gICAgICAgICAgc2VhcmNoSW5wdXQuY2xvc2VzdCgnZm9ybScpLmNsYXNzTGlzdC5hZGQoJ19maWxsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNlYXJjaElucHV0LmNsb3Nlc3QoJ2Zvcm0nKS5jbGFzc0xpc3QuY29udGFpbnMoJ19maWxsZWQnKSkge1xuICAgICAgICAgIHNlYXJjaElucHV0LmNsb3Nlc3QoJ2Zvcm0nKS5jbGFzc0xpc3QucmVtb3ZlKCdfZmlsbGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZWFyY2hJbnB1dC5jbG9zZXN0KCdmb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ19zZWFyY2gtYm94LW9wZW5lZCcpKSB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdfc2VhcmNoLWJveC1vcGVuZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWFyY2hJbnB1dC5jbG9zZXN0KCdmb3JtJykuY2xhc3NMaXN0LmNvbnRhaW5zKCdfZmlsbGVkJykpIHtcbiAgICAgICAgc2VhcmNoSW5wdXQuY2xvc2VzdCgnZm9ybScpLmNsYXNzTGlzdC5yZW1vdmUoJ19maWxsZWQnKTtcbiAgICAgIH1cbiAgICAgIHNlYXJjaElucHV0LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuYmx1cigpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gaGFuZGxlciBmdW5jdGlvbnNcbiAgY29uc3Qgb25DbGlja0hhbmRsZXIgPSBlID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgIC8vIGNvbnNvbGUubG9nKHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5oZWFydC1idG5fX2ljb24nKSkge1xuICAgICAgdGFyZ2V0LmNsb3Nlc3QoJy5oZWFydC1idG5fX2ljb24nKS5jbGFzc0xpc3QudG9nZ2xlKCdfYWN0aXZlJyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ19zZWFyY2gtYm94LW9wZW5lZCcpICYmXG4gICAgICAhdGFyZ2V0LmNsb3Nlc3QoJy5oZWFkZXJfX3NlYXJjaCcpXG4gICAgKSB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnX3NlYXJjaC1ib3gtb3BlbmVkJyk7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLnNlYXJjaC1ib3hfX2RlbGV0ZS1idG4nKSkge1xuICAgICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5zZWFyY2gtYm94X19ncm91cCcpO1xuICAgICAgY29uc3QgaXRlbSA9IHRhcmdldC5jbG9zZXN0KCcuc2VhcmNoLWJveF9faXRlbScpO1xuICAgICAgaXRlbS5yZW1vdmUoKTtcblxuICAgICAgaWYgKCFwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaC1ib3hfX2l0ZW0nKS5sZW5ndGgpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5tZW51LWJhcl9faXRlbScpKSB7XG4gICAgICByZW1vdmVDbGFzc2VzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWJhcl9faXRlbScpLCAnX2FjdGl2ZScpO1xuICAgICAgdGFyZ2V0LmNsb3Nlc3QoJy5tZW51LWJhcl9faXRlbScpLmNsYXNzTGlzdC5hZGQoJ19hY3RpdmUnKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZG9jdW1lbnQgZXZlbnRzXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja0hhbmRsZXIpO1xufSk7XG4iLCJpbXBvcnQgJy4uL3Njc3Mvc3R5bGUuc2Nzcyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdXRpbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xuXG4vLyBtZW51XG51dGlscy5tZW51SW5pdCgpO1xuXG4vLyBzcG9pbGVyc1xudXRpbHMuc3BvaWxlcnMoKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBmb3JtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0ICogYXMgZm9ybXMgZnJvbSAnLi91dGlscy9mb3JtL2Zvcm0uanMnO1xuXG4vLyBmb3JtIGZpZWxkc1xuZm9ybXMuZm9ybUZpZWxkc0luaXQoeyB2aWV3UGFzczogZmFsc2UgfSk7XG5cbi8vIGZvcm0gc3VibWl0XG5mb3Jtcy5mb3JtU3VibWl0KCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzd2lwZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCAnLi91dGlscy9zbGlkZXJzLmpzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWFwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0ICcuL3V0aWxzL21hcC5qcyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBsaWJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIHNlbGVjdFxuaW1wb3J0ICcuL2xpYnMvc2VsZWN0LmpzJztcblxuLy8gZHluYW1pYyBkb21cbmltcG9ydCAnLi9saWJzL2RhLmpzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gc2NyaXB0c1xuaW1wb3J0ICcuL3V0aWxzL3NjcmlwdCc7XG4iXSwibmFtZXMiOlsiRHluYW1pY0FkYXB0IiwidHlwZSIsInRoaXMiLCJwcm90b3R5cGUiLCJpbml0IiwiX3RoaXMiLCLQvmJqZWN0cyIsImRhQ2xhc3NuYW1lIiwibm9kZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwibm9kZSIsImRhdGFBcnJheSIsImRhdGFzZXQiLCJkYSIsInRyaW0iLCJzcGxpdCIsItC+YmplY3QiLCJlbGVtZW50IiwicGFyZW50IiwicGFyZW50Tm9kZSIsImRlc3RpbmF0aW9uIiwicXVlcnlTZWxlY3RvciIsImJyZWFrcG9pbnQiLCJwbGFjZSIsImluZGV4IiwiaW5kZXhJblBhcmVudCIsInB1c2giLCJhcnJheVNvcnQiLCJtZWRpYVF1ZXJpZXMiLCJBcnJheSIsIm1hcCIsImNhbGwiLCJpdGVtIiwiZmlsdGVyIiwic2VsZiIsImluZGV4T2YiLCJtZWRpYSIsIm1lZGlhU3BsaXQiLCJTdHJpbmciLCJtYXRjaE1lZGlhIiwid2luZG93IiwibWVkaWFCcmVha3BvaW50Iiwi0L5iamVjdHNGaWx0ZXIiLCJhZGRMaXN0ZW5lciIsIm1lZGlhSGFuZGxlciIsIm1hdGNoZXMiLCJtb3ZlVG8iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm1vdmVCYWNrIiwiYWRkIiwiY2hpbGRyZW4iLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJyZW1vdmUiLCJ1bmRlZmluZWQiLCJhcnJheSIsInNsaWNlIiwiYXJyIiwic29ydCIsImEiLCJiIiwiZ2V0RWxlbWVudEJ5SWQiLCJhc3luYyIsInltYXBzMyIsInJlYWR5IiwiTE9DQVRJT04iLCJjZW50ZXIiLCJpbm5lcldpZHRoIiwiem9vbSIsIlBJTl9MT0NBVElPTiIsIllNYXAiLCJZTWFwRGVmYXVsdFNjaGVtZUxheWVyIiwiWU1hcERlZmF1bHRGZWF0dXJlc0xheWVyIiwiWU1hcE1hcmtlciIsImxvY2F0aW9uIiwiYWRkQ2hpbGQiLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzcmMiLCJvbmNsaWNrIiwidXBkYXRlIiwiZHVyYXRpb24iLCJjb29yZGluYXRlcyIsImluaXRNYXAiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImJvZHlMb2NrU3RhdHVzIiwiYm9keVVubG9jayIsImRlbGF5IiwiYXJndW1lbnRzIiwic2V0VGltZW91dCIsImRvY3VtZW50RWxlbWVudCIsImJvZHlMb2NrIiwibWVudU9wZW4iLCJtZW51Q2xvc2UiLCJyZW1vdmVDbGFzc2VzIiwicmVtIiwiX3NsaWRlVXAiLCJ0YXJnZXQiLCJzaG93bW9yZSIsInN0eWxlIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwib3ZlcmZsb3ciLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImhpZGRlbiIsInJlbW92ZVByb3BlcnR5IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiX3NsaWRlVG9nZ2xlIiwiX3NsaWRlRG93biIsImZvcm1WYWxpZGF0ZSIsImdldEVycm9ycyIsImZvcm0iLCJlcnJvciIsImZvcm1SZXF1aXJlZEl0ZW1zIiwiZm9yRWFjaCIsImZvcm1SZXF1aXJlZEl0ZW0iLCJvZmZzZXRQYXJlbnQiLCJ0YWdOYW1lIiwiZGlzYWJsZWQiLCJ2YWxpZGF0ZUlucHV0IiwicmVxdWlyZWQiLCJ2YWx1ZSIsInJlcGxhY2UiLCJlbWFpbFRlc3QiLCJhZGRFcnJvciIsInJlbW92ZUVycm9yIiwiY2hlY2tlZCIsInBhcmVudEVsZW1lbnQiLCJpbnB1dEVycm9yIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJmb3JtQ2xlYW4iLCJyZXNldCIsImlucHV0cyIsImNoZWNrYm94ZXMiLCJ0ZXN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJrZXlzIiwia2V5Iiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjaGlsZE5vZGVzIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwiaGFzaCIsImhvc3QiLCJob3N0bmFtZSIsImhyZWYiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZG9jIiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiSW1hZ2UiLCJEYXRlIiwic2NyZWVuIiwiY2xlYXJUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwid2luIiwibm93IiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiY3VycmVudFN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidG9TdHJpbmciLCJtNDEiLCJwYXJzZUZsb2F0IiwibTQyIiwibyIsInRvIiwibm9FeHRlbmQiLCJuZXh0U291cmNlIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsImtleXNBcnJheSIsIm5leHRJbmRleCIsImxlbiIsIm5leHRLZXkiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl9fc3dpcGVyX18iLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJzZXRQcm9wZXJ0eSIsImFuaW1hdGVDU1NNb2RlU2Nyb2xsIiwiX3JlZiIsInN3aXBlciIsInRhcmdldFBvc2l0aW9uIiwic2lkZSIsInN0YXJ0UG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJ0aW1lIiwic3RhcnRUaW1lIiwicGFyYW1zIiwic3BlZWQiLCJ3cmFwcGVyRWwiLCJzY3JvbGxTbmFwVHlwZSIsImNzc01vZGVGcmFtZUlEIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWF4IiwibWluIiwiZWFzZVByb2dyZXNzIiwiY29zIiwiUEkiLCJjdXJyZW50UG9zaXRpb24iLCJzY3JvbGxUbyIsInNsaWRlRWwiLCJzaGFkb3dSb290Iiwic2VsZWN0b3IiLCJzaG93V2FybmluZyIsInRleHQiLCJjb25zb2xlIiwid2FybiIsImVyciIsInRhZyIsImNsYXNzZXMiLCJpc0FycmF5IiwiYyIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsInBhcmVudHMiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwiY2FsY0Jyb3dzZXIiLCJldmVudHNFbWl0dGVyIiwib24iLCJldmVudHMiLCJoYW5kbGVyIiwicHJpb3JpdHkiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXN0cm95ZWQiLCJtZXRob2QiLCJldmVudCIsIm9uY2UiLCJvbmNlSGFuZGxlciIsIm9mZiIsIl9fZW1pdHRlclByb3h5IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiYXBwbHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsInNwbGljZSIsImV2ZW50SGFuZGxlciIsImVtaXQiLCJkYXRhIiwiY29udGV4dCIsIl9sZW4yIiwiX2tleTIiLCJ1bnNoaWZ0IiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwiY2xvc2VzdCIsImlzRWxlbWVudCIsInNsaWRlQ2xhc3MiLCJsYXp5RWwiLCJsYXp5UHJlbG9hZGVyQ2xhc3MiLCJ1bmxhenkiLCJzbGlkZXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmVsb2FkIiwiYW1vdW50IiwibGF6eVByZWxvYWRQcmV2TmV4dCIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImNlaWwiLCJhY3RpdmVJbmRleCIsImdyaWQiLCJyb3dzIiwiYWN0aXZlQ29sdW1uIiwicHJlbG9hZENvbHVtbnMiLCJmcm9tIiwiXyIsImNvbHVtbiIsInNsaWRlSW5kZXhMYXN0SW5WaWV3IiwicmV3aW5kIiwibG9vcCIsInJlYWxJbmRleCIsInVwZGF0ZVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsImlzTmFOIiwiYXNzaWduIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsImxhYmVsIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJydGwiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJjZW50ZXJlZFNsaWRlcyIsImNzc01vZGUiLCJncmlkRW5hYmxlZCIsInNsaWRlU2l6ZSIsImluaXRTbGlkZXMiLCJ1bnNldFNsaWRlcyIsInNob3VsZFJlc2V0U2xpZGVTaXplIiwiYnJlYWtwb2ludHMiLCJzbGlkZSIsInVwZGF0ZVNsaWRlIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwiZmxvb3IiLCJzd2lwZXJTbGlkZVNpemUiLCJhYnMiLCJzbGlkZXNQZXJHcm91cCIsInNsaWRlc1Blckdyb3VwU2tpcCIsImVmZmVjdCIsInNldFdyYXBwZXJTaXplIiwidXBkYXRlV3JhcHBlclNpemUiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJncm91cHMiLCJzbGlkZXNCZWZvcmUiLCJzbGlkZXNBZnRlciIsImdyb3VwU2l6ZSIsInNsaWRlSW5kZXgiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsInYiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwibWludXNPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwic2xpZGVGdWxseVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNGdWxseVZpc2libGUiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsIm5leHRFbHMiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0IiwiZWxlbWVudE5leHRBbGwiLCJwcmV2RWxzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXYiLCJlbGVtZW50UHJldkFsbCIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwic2tpcCIsImZpcnN0U2xpZGVJbkNvbHVtbiIsImFjdGl2ZVNsaWRlSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJpbml0aWFsaXplZCIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInBhdGgiLCJwYXRoRWwiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsImdldFRyYW5zbGF0ZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwibmV3UHJvZ3Jlc3MiLCJ4IiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiZSIsInRyYW5zaXRpb25FbWl0IiwiZGlyZWN0aW9uIiwic3RlcCIsInNsaWRlVG8iLCJpbml0aWFsIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJ0IiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwidGFyZ2V0U2xpZGVJbmRleCIsImNvbHMiLCJuZWVkTG9vcEZpeCIsImxvb3BGaXgiLCJzbGlkZVJlYWxJbmRleCIsInNsaWRlTmV4dCIsInBlckdyb3VwIiwic2xpZGVzUGVyR3JvdXBBdXRvIiwiaW5jcmVtZW50IiwibG9vcFByZXZlbnRzU2xpZGluZyIsIl9jbGllbnRMZWZ0IiwiY2xpZW50TGVmdCIsInNsaWRlUHJldiIsIm5vcm1hbGl6ZSIsInZhbCIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwicHJldlNuYXBJbmRleCIsInByZXZJbmRleCIsImxhc3RJbmRleCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsInRocmVzaG9sZCIsImN1cnJlbnRTbmFwIiwic2xpZGVUb0luZGV4Iiwic2xpZGVTZWxlY3RvciIsImxvb3BlZFNsaWRlcyIsImdldFNsaWRlSW5kZXgiLCJsb29wQ3JlYXRlIiwic2hvdWxkRmlsbEdyb3VwIiwic2hvdWxkRmlsbEdyaWQiLCJhZGRCbGFua1NsaWRlcyIsImFtb3VudE9mU2xpZGVzIiwic2xpZGVCbGFua0NsYXNzIiwiYXBwZW5kIiwibG9vcEFkZEJsYW5rU2xpZGVzIiwicmVjYWxjU2xpZGVzIiwiYnlNb3VzZXdoZWVsIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJmaWxsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwiX19wcmV2ZW50T2JzZXJ2ZXJfXyIsInN3aXBlckxvb3BNb3ZlRE9NIiwicHJlcGVuZCIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJ0b3VjaEV2ZW50c0RhdGEiLCJzdGFydFRyYW5zbGF0ZSIsInNoaWZ0IiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwicHJldmVudERlZmF1bHQiLCJvblRvdWNoU3RhcnQiLCJvcmlnaW5hbEV2ZW50IiwicG9pbnRlcklkIiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoSWQiLCJpZGVudGlmaWVyIiwicGFnZVgiLCJ0b3VjaGVzIiwic2ltdWxhdGVUb3VjaCIsInBvaW50ZXJUeXBlIiwidGFyZ2V0RWwiLCJ0b3VjaEV2ZW50c1RhcmdldCIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsInN3aXBpbmdDbGFzc0hhc1ZhbHVlIiwibm9Td2lwaW5nQ2xhc3MiLCJldmVudFBhdGgiLCJjb21wb3NlZFBhdGgiLCJub1N3aXBpbmdTZWxlY3RvciIsImlzVGFyZ2V0U2hhZG93Iiwibm9Td2lwaW5nIiwiYmFzZSIsIl9fY2xvc2VzdEZyb20iLCJhc3NpZ25lZFNsb3QiLCJmb3VuZCIsImdldFJvb3ROb2RlIiwiY2xvc2VzdEVsZW1lbnQiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInBhZ2VZIiwic3RhcnRZIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJ0b3VjaFN0YXJ0VGltZSIsInN3aXBlRGlyZWN0aW9uIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZyZWVNb2RlIiwib25Ub3VjaE1vdmUiLCJ0YXJnZXRUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwicHJldmlvdXNYIiwicHJldmlvdXNZIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJ0b3VjaEFuZ2xlIiwiYXRhbjIiLCJjYW5jZWxhYmxlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwidG91Y2hlc0RpZmYiLCJvbmVXYXlNb3ZlbWVudCIsInRvdWNoUmF0aW8iLCJwcmV2VG91Y2hlc0RpcmVjdGlvbiIsInRvdWNoZXNEaXJlY3Rpb24iLCJpc0xvb3AiLCJhbGxvd0xvb3BGaXgiLCJldnQiLCJidWJibGVzIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImdyYWJDdXJzb3IiLCJzZXRHcmFiQ3Vyc29yIiwibG9vcFN3YXBSZXNldCIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwicGF0aFRyZWUiLCJsYXN0Q2xpY2tUaW1lIiwiY3VycmVudFBvcyIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicmVzaXplVGltZW91dCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Mb2FkIiwib25Eb2N1bWVudFRvdWNoU3RhcnQiLCJkb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCIsInRvdWNoQWN0aW9uIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlzR3JpZEVuYWJsZWQiLCJkZWZhdWx0cyIsInJlc2l6ZU9ic2VydmVyIiwiY3JlYXRlRWxlbWVudHMiLCJldmVudHNQcmVmaXgiLCJ1cmwiLCJicmVha3BvaW50c0Jhc2UiLCJ1bmlxdWVOYXZFbGVtZW50cyIsInBhc3NpdmVMaXN0ZW5lcnMiLCJ3cmFwcGVyQ2xhc3MiLCJfZW1pdENsYXNzZXMiLCJtb2R1bGVFeHRlbmRQYXJhbXMiLCJhbGxNb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwibW9kdWxlUGFyYW1zIiwiYXV0byIsInByb3RvdHlwZXMiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwibW92aW5nIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJhdHRhY2hFdmVudHMiLCJiaW5kIiwiZGV0YWNoRXZlbnRzIiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwiYnJlYWtwb2ludFBhcmFtcyIsIm9yaWdpbmFsUGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzRW5hYmxlZCIsImVtaXRDb250YWluZXJDbGFzc2VzIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaXNFbmFibGVkIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsIndhc0xvY2tlZCIsImxhc3RTbGlkZVJpZ2h0RWRnZSIsImFkZENsYXNzZXMiLCJjbGFzc05hbWVzIiwic3VmZml4ZXMiLCJlbnRyaWVzIiwicHJlZml4IiwicmVzdWx0Q2xhc3NlcyIsInByZXBhcmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJtb2R1bGVzIiwiX19tb2R1bGVzX18iLCJtb2QiLCJleHRlbmRQYXJhbXMiLCJzd2lwZXJQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJldmVudE5hbWUiLCJ2ZWxvY2l0eSIsInRydW5jIiwiY2xpY2tUaW1lb3V0IiwidmVsb2NpdGllcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInByb3BlcnR5Iiwic2V0UHJvZ3Jlc3MiLCJjbHMiLCJnZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVzIiwidmlldyIsImV4YWN0Iiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwiY29tcGxldGUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwiZ2V0V3JhcHBlciIsInNsaWRlU2xvdHMiLCJob3N0RWwiLCJsYXp5RWxlbWVudHMiLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm9iamVjdCIsImRlbGV0ZVByb3BzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJtIiwiY2hlY2tQcm9wcyIsIk5hdmlnYXRpb24iLCJoaWRlT25DbGljayIsImRpc2FibGVkQ2xhc3MiLCJoaWRkZW5DbGFzcyIsImxvY2tDbGFzcyIsIm5hdmlnYXRpb25EaXNhYmxlZENsYXNzIiwibWFrZUVsZW1lbnRzQXJyYXkiLCJnZXRFbCIsInJlcyIsInRvZ2dsZUVsIiwic3ViRWwiLCJvblByZXZDbGljayIsIm9uTmV4dENsaWNrIiwiaW5pdEJ1dHRvbiIsImRlc3Ryb3lCdXR0b24iLCJfcyIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsInRvZ2dsZSIsIlBhZ2luYXRpb24iLCJwZngiLCJidWxsZXRTaXplIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckJ1bGxldCIsInJlbmRlclByb2dyZXNzYmFyIiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJDdXN0b20iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJudW1iZXIiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJ0b3RhbENsYXNzIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJjbGlja2FibGVDbGFzcyIsImhvcml6b250YWxDbGFzcyIsInZlcnRpY2FsQ2xhc3MiLCJwYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyIsImJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJpc1BhZ2luYXRpb25EaXNhYmxlZCIsInNldFNpZGVCdWxsZXRzIiwiYnVsbGV0RWwiLCJwb3NpdGlvbiIsIm9uQnVsbGV0Q2xpY2siLCJ0b3RhbCIsImZpcnN0SW5kZXgiLCJtaWRJbmRleCIsImNsYXNzZXNUb1JlbW92ZSIsInN1ZmZpeCIsInMiLCJmbGF0IiwiYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCJmaXJzdERpc3BsYXllZEJ1bGxldCIsImxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJvZmZzZXRQcm9wIiwic3ViRWxJbmRleCIsImZyYWN0aW9uRWwiLCJ0ZXh0Q29udGVudCIsInRvdGFsRWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NFbCIsImlubmVySFRNTCIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiZWZmZWN0UGFyYW1zIiwidHJhbnNmb3JtRWwiLCJiYWNrZmFjZVZpc2liaWxpdHkiLCJ0cmFuc2Zvcm1FbGVtZW50cyIsImFsbFNsaWRlcyIsInRyYW5zaXRpb25FbmRUYXJnZXQiLCJldmVudFRyaWdnZXJlZCIsImdldFNsaWRlIiwiZmlyZUNhbGxCYWNrIiwiRWZmZWN0RmFkZSIsImZhZGVFZmZlY3QiLCJjcm9zc0ZhZGUiLCJvdmVyd3JpdGVQYXJhbXMiLCJwZXJzcGVjdGl2ZSIsInJlY3JlYXRlU2hhZG93cyIsImdldEVmZmVjdFBhcmFtcyIsInJlcXVpcmVVcGRhdGVPblZpcnR1YWwiLCJvdmVyd3JpdGVQYXJhbXNSZXN1bHQiLCJzbGlkZVNoYWRvd3MiLCJzaGFkb3dFbCIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJvcGFjaXR5IiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJuZXdXaWR0aCIsIl9yZWYyIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsImlubGluZVNpemUiLCJibG9ja1NpemUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwib3B0aW9ucyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJjb250YWluZXJQYXJlbnRzIiwiZGlzY29ubmVjdCIsImNhdGVnb3JpZXNTbGlkZXIiLCJjaGFuZ2VTbGlkZU51bSIsImNoYW5nZUFjdGl2ZU51bSIsImluaXREeW5hbWljUGFnaW5hdGlvbiIsImN1ckluZGV4IiwicmV2ZWFsU2xpZGVzIiwidG90YWxHYXAiLCJjb250YWluZXJIZWlnaHQiLCJzbGlkZUNoYW5nZSIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsImFmdGVySW5pdCIsInJlYWxJbmRleENoYW5nZSIsInNsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0IiwidG91Y2hNb3ZlIiwic2VsIiwidGl0bGUiLCJjb250ZW50Iiwib3B0aW9uIiwic2Nyb2xsIiwiZ3JvdXAiLCJpbnAiLCJhc3NldCIsInR4dCIsImhpbnQiLCJhY3RpdmUiLCJmb2N1c2VkIiwib3BlbmVkIiwiZmlsbGVkIiwic2VsZWN0ZWQiLCJsaXN0IiwibXVsdGlwbGUiLCJjaGVja2JveCIsInNlbGVjdExpc3QiLCJzZWxlY3QiLCJpbml0U2VsSXRlbSIsInNldEFjdGlvbnMiLCJyZWxhdGl2ZVNlbCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwic2VsSWQiLCJnZXRQbGFjZWhvbGRlciIsIm9wdFBsYWNlaG9sZGVyIiwic2hvdyIsImdldFNlbGVjdCIsInR3aW5TZWwiLCJidWlsZCIsImluaXRTZWxlY3Rpb25zIiwic2V0VmFsdWUiLCJzZXRPcHRpb25zIiwic2VsQWRkb25DbGFzcyIsImhhc0F0dHJpYnV0ZSIsImRpc2FibGVTZWxlY3QiLCJzZXRTZWFyY2hBY3Rpb25zIiwic2V0QWN0aW9uIiwic2VsSGludCIsInNlbEJvZHkiLCJzZWxUaXRsZSIsImdldFZhbHVlIiwiZ2V0T3B0aW9ucyIsImdldENsYXNzIiwic2VsZWN0SWQiLCJzZWxMaXN0Iiwic2VsT3B0aW9uIiwib3B0VmFsIiwic2V0T3B0aW9uQWN0aW9uIiwicmVtb3ZlRXJyIiwiYWRkRXJyIiwiY29kZSIsImNsb3NlR3JvdXAiLCJzZWxPcHRpb25zIiwic2VsZWN0T25lR3JvdXAiLCJzZWxlY3Rpb25zIiwic2VsZWN0aW9uIiwiY2xvc2VJdGVtIiwiZ2V0RGF0YSIsImVsZW1lbnRzIiwicmVsYXRpdmVTZWxlY3Rpb24iLCJ0d2luU2VsZWN0aW9uIiwibG9nIiwib3B0Iiwic2V0U2VsZWN0aW9ucyIsInNlbElucHV0IiwidG9VcHBlckNhc2UiLCJzZXRTdWJ0aXRsZSIsInNlbEVycm9yIiwiY3NzQ2xhc3MiLCJhdHRyIiwiYXR0ckNsYXNzIiwidGl0bGVWYWwiLCJodG1sIiwic2VsTGFiZWwiLCJ2YWx1ZXMiLCJnZXRDb250ZW50IiwiY3VzdG9tQ2xhc3MiLCJvcHRDbGFzcyIsInNlbFNjcm9sbCIsInNlbFNjcm9sbEhlaWdodCIsInNlbE9wdGlvbnNIVE1MIiwiZ2V0T3B0aW9uIiwic2hvd1NlbGVjdGlvbiIsIm9wdGlvbkNsYXNzIiwib3B0aW9uTGluayIsIm9wdGlvbkxpbmtUYXJnZXQiLCJvcHRpb25IVE1MIiwib3B0aW9uRGF0YSIsIm9wdEFzc2V0Iiwib3B0aW9uRGF0YUhUTUwiLCJvcHRpb25Db250ZW50SFRNTCIsInBsYWNlaG9sZGVyIiwiZmluZCIsInN1YnRpdGxlIiwic2VsZWN0ZWRJbmRleCIsInRlbXBCdXR0b24iLCJjbGljayIsInNlYXJjaElucHV0Iiwic3BvaWxlcnNBcnJheSIsInNwb2lsZXJzUmVndWxhciIsInNwb2lsZXJzIiwiaW5pdFNwb2lsZXJzIiwibWRRdWVyaWVzQXJyYXkiLCJkYXRhU2V0VmFsdWUiLCJicmVha3BvaW50c0FycmF5IiwicGFyYW1zQXJyYXkiLCJtZFF1ZXJpZXMiLCJ1bmlxdWVBcnJheSIsIm1lZGlhVHlwZSIsIml0ZW1zQXJyYXkiLCJkYXRhTWVkaWFRdWVyaWVzIiwic3BvaWxlcnNCbG9jayIsImluaXRTcG9pbGVyQm9keSIsInNldFNwb2lsZXJBY3Rpb24iLCJoaWRlU3BvaWxlckJvZHkiLCJzcG9pbGVyVGl0bGVzIiwic3BvaWxlclRpdGxlIiwib25lU3BvaWxlciIsInNwb2lsZXJTcGVlZCIsInNwb2lsZXJzU3BlZWQiLCJoaWRlU3BvaWxlcnNCb2R5Iiwic3BvaWxlckFjdGl2ZVRpdGxlIiwibWRRdWVyaWVzSXRlbSIsInNwb2lsZXJzQ2xvc2UiLCJzcG9pbGVyQ2xvc2UiLCJzcG9sbGVyc0Jsb2NrIiwidXRpbHMiLCJ2aWV3UGFzcyIsImZvcm1GaWVsZHMiLCJmb3JtRmllbGQiLCJ0YXJnZXRFbGVtZW50IiwiaW5wdXRUeXBlIiwiZm9ybXMiLCJmb3JtU3VibWl0QWN0aW9uIiwiZm9ybUFjdGlvbiIsImZvcm1NZXRob2QiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwicmVzcG9uc2VSZXN1bHQiLCJqc29uIiwiZm9ybVNlbnQiLCJhbGVydCIsImZvcm1FcnJvciIsImdvdG9CbG9jayJdLCJzb3VyY2VSb290IjoiIn0=