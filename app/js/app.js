(()=>{var e={23:()=>{if(document.getElementById("map")){window.map=null,async function(){await ymaps3.ready;const e={center:[30.286780500000003,59.96677256415152],zoom:15},{YMap:t,YMapDefaultSchemeLayer:s,YMapDefaultFeaturesLayer:i,YMapMarker:r}=ymaps3,a=new t(document.getElementById("map"),{location:{center:[30.29070872801772,59.96487327442857],zoom:15}});a.addChild(new s),a.addChild(new i);const n=document.createElement("img");n.className="marker",n.src="../app/img/icons/pin.svg",n.onclick=()=>a.update({location:{...e,duration:400}}),a.addChild(new r({coordinates:e.center},n))}()}},209:()=>{document.addEventListener("DOMContentLoaded",(function(){document.addEventListener("click",(e=>{const t=e.target;console.log(t),t.closest(".product-card__heart-icon")&&(t.closest(".product-card__heart-icon").classList.toggle("_active"),e.preventDefault())}))}))}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={exports:{}};return e[i](a,a.exports,s),a.exports}(()=>{"use strict";let e={getErrors(e){let t=0,s=e.querySelectorAll("*[data-required]");return s.length&&s.forEach((e=>{null===e.offsetParent&&"SELECT"!==e.tagName||e.disabled||(t+=this.validateInput(e))})),t},validateInput(e){let t=0;return"email"===e.dataset.required?(e.value=e.value.replace(" ",""),this.emailTest(e)?(this.addError(e),t++):this.removeError(e)):("checkbox"!==e.type||e.checked)&&e.value.trim()?this.removeError(e):(this.addError(e),t++),t},addError(e){e.classList.add("_form-error"),e.parentElement.classList.add("_form-error");let t=e.parentElement.querySelector(".form__error");t&&e.parentElement.removeChild(t),e.dataset.error&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="form__error">${e.dataset.error}</div>`)},removeError(e){e.classList.remove("_form-error"),e.parentElement.classList.remove("_form-error"),e.parentElement.querySelector(".form__error")&&e.parentElement.removeChild(e.parentElement.querySelector(".form__error"))},formClean(t){t.reset(),setTimeout((()=>{let s=t.querySelectorAll("input,textarea");for(let t=0;t<s.length;t++){const i=s[t];i.parentElement.classList.remove("_form-focus"),i.classList.remove("_form-focus"),e.removeError(i)}let i=t.querySelectorAll(".checkbox__input");if(i.length>0)for(let e=0;e<i.length;e++){i[e].checked=!1}}),0)},emailTest:e=>!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)};function t(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e,s){void 0===e&&(e={}),void 0===s&&(s={}),Object.keys(s).forEach((r=>{void 0===e[r]?e[r]=s[r]:t(s[r])&&t(e[r])&&Object.keys(s[r]).length>0&&i(e[r],s[r])}))}const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return i(e,r),e}const n={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){const e="undefined"!=typeof window?window:{};return i(e,n),e}function o(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function d(){return Date.now()}function c(e,t){void 0===t&&(t="x");const s=l();let i,r,a;const n=function(e){const t=l();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=n.transform||n.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new s.WebKitCSSMatrix("none"===r?"":r)):(a=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function p(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function u(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],a=Object.getOwnPropertyDescriptor(r,i);void 0!==a&&a.enumerable&&(p(e[i])&&p(r[i])?r[i].__swiper__?e[i]=r[i]:u(e[i],r[i]):!p(e[i])&&p(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:u(e[i],r[i])):e[i]=r[i])}}}var s;return e}function m(e,t,s){e.style.setProperty(t,s)}function h(e){let{swiper:t,targetPosition:s,side:i}=e;const r=l(),a=-t.translate;let n,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=s>a?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{n=(new Date).getTime(),null===o&&(o=n);const e=Math.max(Math.min((n-o)/d,1),0),l=.5-Math.cos(e*Math.PI)/2;let c=a+l*(s-a);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[i]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function f(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function v(e){try{return void console.warn(e)}catch(e){}}function g(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function w(e,t){return l().getComputedStyle(e,null).getPropertyValue(t)}function b(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function S(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function T(e,t,s){const i=l();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let y,E,x;function C(){return y||(y=function(){const e=l(),t=a();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),y}function M(e){return void 0===e&&(e={}),E||(E=function(e){let{userAgent:t}=void 0===e?{}:e;const s=C(),i=l(),r=i.navigator.platform,a=t||i.navigator.userAgent,n={ios:!1,android:!1},o=i.screen.width,d=i.screen.height,c=a.match(/(Android);?[\s\/]+([\d.]+)?/);let p=a.match(/(iPad).*OS\s([\d_]+)/);const u=a.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let f="MacIntel"===r;return!p&&f&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${d}`)>=0&&(p=a.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),f=!1),c&&!h&&(n.os="android",n.android=!0),(p||m||u)&&(n.os="ios",n.ios=!0),n}(e)),E}function L(){return x||(x=function(){const e=l();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),x}var P={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,a=new Array(s),n=0;n<s;n++)a[n]=arguments[n];t.apply(i,a)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],s=a.slice(1,a.length),i=e):(t=a[0].events,s=a[0].data,i=a[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const _=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},k=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},I=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,a=[s-t];return a.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{a.includes(t.column)&&k(e,s)}))}const a=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=a+t;i+=1){const t=(i%s+s)%s;(t<r||t>a)&&k(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(a+t,s-1);i+=1)i!==r&&(i>a||i<r)&&k(e,i)};var A={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(w(i,"padding-left")||0,10)-parseInt(w(i,"padding-right")||0,10),s=s-parseInt(w(i,"padding-top")||0,10)-parseInt(w(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:r,size:a,rtlTranslate:n,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=f(r,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let u=[];const h=[],v=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(e));let b=s.slidesOffsetAfter;"function"==typeof b&&(b=s.slidesOffsetAfter.call(e));const S=e.snapGrid.length,y=e.slidesGrid.length;let E=s.spaceBetween,x=-g,C=0,M=0;if(void 0===a)return;"string"==typeof E&&E.indexOf("%")>=0?E=parseFloat(E.replace("%",""))/100*a:"string"==typeof E&&(E=parseFloat(E)),e.virtualSize=-E,c.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(m(i,"--swiper-centered-offset-before",""),m(i,"--swiper-centered-offset-after",""));const L=s.grid&&s.grid.rows>1&&e.grid;let P;L?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const _="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){let r;if(P=0,c[i]&&(r=c[i]),L&&e.grid.updateSlide(i,r,c),!c[i]||"none"!==w(r,"display")){if("auto"===s.slidesPerView){_&&(c[i].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(r),n=r.style.transform,l=r.style.webkitTransform;if(n&&(r.style.transform="none"),l&&(r.style.webkitTransform="none"),s.roundLengths)P=e.isHorizontal()?T(r,"width",!0):T(r,"height",!0);else{const e=t(a,"width"),s=t(a,"padding-left"),i=t(a,"padding-right"),n=t(a,"margin-left"),l=t(a,"margin-right"),o=a.getPropertyValue("box-sizing");if(o&&"border-box"===o)P=e+n+l;else{const{clientWidth:t,offsetWidth:a}=r;P=e+s+i+n+l+(a-t)}}n&&(r.style.transform=n),l&&(r.style.webkitTransform=l),s.roundLengths&&(P=Math.floor(P))}else P=(a-(s.slidesPerView-1)*E)/s.slidesPerView,s.roundLengths&&(P=Math.floor(P)),c[i]&&(c[i].style[e.getDirectionLabel("width")]=`${P}px`);c[i]&&(c[i].swiperSlideSize=P),v.push(P),s.centeredSlides?(x=x+P/2+C/2+E,0===C&&0!==i&&(x=x-a/2-E),0===i&&(x=x-a/2-E),Math.abs(x)<.001&&(x=0),s.roundLengths&&(x=Math.floor(x)),M%s.slidesPerGroup==0&&u.push(x),h.push(x)):(s.roundLengths&&(x=Math.floor(x)),(M-Math.min(e.params.slidesPerGroupSkip,M))%e.params.slidesPerGroup==0&&u.push(x),h.push(x),x=x+P+E),e.virtualSize+=P+E,C=P,M+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+b,n&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+E}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+E}px`),L&&e.grid.updateWrapperSize(P,u),!s.centeredSlides){const t=[];for(let i=0;i<u.length;i+=1){let r=u[i];s.roundLengths&&(r=Math.floor(r)),u[i]<=e.virtualSize-a&&t.push(r)}u=t,Math.floor(e.virtualSize-a)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-a)}if(o&&s.loop){const t=v[0]+E;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),r=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)u.push(u[u.length-1]+r)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&u.push(u[u.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==E){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${E}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;v.forEach((t=>{e+=t+(E||0)})),e-=E;const t=e-a;u=u.map((e=>e<=0?-g:e>t?t+b:e))}if(s.centerInsufficientSlides){let e=0;if(v.forEach((t=>{e+=t+(E||0)})),e-=E,e<a){const t=(a-e)/2;u.forEach(((e,s)=>{u[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:h,slidesSizesGrid:v}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){m(i,"--swiper-centered-offset-before",-u[0]+"px"),m(i,"--swiper-centered-offset-after",e.size/2-v[v.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==S&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==y&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(n(e))}else s.push(n(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:a}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;r&&(n=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-a[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(n-d),m=u+t.slidesSizesGrid[e],h=u>=0&&u<=t.size-t.slidesSizesGrid[e];(u>=0&&u<t.size-1||m>1&&m<=t.size||u<=0&&m>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),h&&i[e].classList.add(s.slideFullyVisibleClass),o.progress=r?-c:c,o.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:a,isEnd:n,progressLoop:l}=t;const o=a,d=n;if(0===i)r=0,a=!0,n=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;a=s||r<=0,n=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],a=t.slidesGrid[i],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/n:(o+n-a)/n,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:a,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!a||d&&!n)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,a=e.virtual&&s.virtual.enabled,n=e.grid&&s.grid&&s.grid.rows>1,l=e=>f(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),a)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${r}"]`);else n?(o=t.filter((e=>e.column===r))[0],c=t.filter((e=>e.column===r+1))[0],d=t.filter((e=>e.column===r-1))[0]):o=t[r];o&&(o.classList.add(s.slideActiveClass),n?(c&&c.classList.add(s.slideNextClass),d&&d.classList.add(s.slidePrevClass)):(c=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),c&&c.classList.add(s.slideNextClass),d=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]),d&&d.classList.add(s.slidePrevClass))),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:a,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===a&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=c(d);else if(p){const e=t.slides.filter((e=>e.column===d))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:a,activeIndex:d}),t.initialized&&I(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let a,n=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){n=!0,a=e;break}if(!r||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=a,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var O={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let a=c(r,e);return a+=this.cssOverflowAdjustment(),s&&(a=-a),a||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:a,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?a[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),a.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const a=this,{params:n,wrapperEl:l}=a;if(a.animating&&n.preventInteractionOnTransition)return!1;const o=a.minTranslate(),d=a.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,a.updateProgress(c),n.cssMode){const e=a.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return h({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),s&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),s&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,s&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}};function z(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:a,previousIndex:n}=t;let l=i;if(l||(l=a>n?"next":a<n?"prev":"reset"),t.emit(`transition${r}`),s&&a!==n){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var D={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:f}=a;if(a.animating&&l.preventInteractionOnTransition||!f&&!i&&!r)return!1;const v=Math.min(a.params.slidesPerGroupSkip,n);let g=v+Math.floor((n-v)/a.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const w=-o[g];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?n=e:t>=s&&t<i&&(n=e+1):t>=s&&(n=e)}if(a.initialized&&n!==p){if(!a.allowSlideNext&&(u?w>a.translate&&w>a.minTranslate():w<a.translate&&w<a.minTranslate()))return!1;if(!a.allowSlidePrev&&w>a.translate&&w>a.maxTranslate()&&(p||0)!==n)return!1}let b;if(n!==(c||0)&&s&&a.emit("beforeSlideChangeStart"),a.updateProgress(w),b=n>p?"next":n<p?"prev":"reset",u&&-w===a.translate||!u&&w===a.translate)return a.updateActiveIndex(n),l.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==l.effect&&a.setTranslate(w),"reset"!==b&&(a.transitionStart(s,b),a.transitionEnd(s,b)),!1;if(l.cssMode){const e=a.isHorizontal(),s=u?w:-w;if(0===t){const t=a.virtual&&a.params.virtual.enabled;t&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),t&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}))}else{if(!a.support.smoothScroll)return h({swiper:a,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(w),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(s,b),0===t?a.transitionEnd(s,b):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(s,b))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const r=this,a=r.grid&&r.params.grid&&r.params.grid.rows>1;let n=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)n+=r.virtual.slidesBefore;else{let e;if(a){const t=n*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(n);const t=a?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:s}=r.params;let i=r.params.slidesPerView;"auto"===i?i=r.slidesPerViewDynamic():(i=Math.ceil(parseFloat(r.params.slidesPerView,10)),s&&i%2==0&&(i+=1));let l=t-e<i;if(s&&(l=l||e<Math.ceil(i/2)),l){const i=s?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?r.realIndex:void 0})}if(a){const e=n*r.params.grid.rows;n=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else n=r.getSlideIndexByData(n)}return requestAnimationFrame((()=>{r.slideTo(n,t,s,i)})),r},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:r,params:a,animating:n}=i;if(!r)return i;let l=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<a.slidesPerGroupSkip?1:l,d=i.virtual&&a.virtual.enabled;if(a.loop){if(n&&!d&&a.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return a.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:r,snapGrid:a,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=i;if(!o)return i;const c=i.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=a.map((e=>p(e)));let h=a[m.indexOf(u)-1];if(void 0===h&&r.cssMode){let e;a.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(h=a[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=n.indexOf(h),f<0&&(f=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;let a=r.activeIndex;const n=Math.min(r.params.slidesPerGroupSkip,a),l=n+Math.floor((a-n)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(a+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,a=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-i/2||a>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),a=e.getSlideIndex(f(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),o((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-i?(e.loopFix(),a=e.getSlideIndex(f(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),o((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}};var G={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{f(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},a=t.grid&&s.grid&&s.grid.rows>1,n=s.slidesPerGroup*(a?s.grid.rows:1),l=t.slides.length%n!=0,o=a&&t.slides.length%s.grid.rows!=0,d=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?g("swiper-slide",[s.slideBlankClass]):g("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){d(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()}else v("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(o){if(s.loopAddBlankSlides){d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else v("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:a,byController:n,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:m}=o,{centeredSlides:h}=m;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&m.virtual.enabled)return s&&(m.centeredSlides||0!==o.snapIndex?m.centeredSlides&&o.snapIndex<m.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let f=m.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(m.slidesPerView,10)),h&&f%2==0&&(f+=1));const g=m.slidesPerGroupAuto?f:m.slidesPerGroup;let w=g;w%g!=0&&(w+=g-w%g),w+=m.loopAdditionalSlides,o.loopedSlides=w;const b=o.grid&&m.grid&&m.grid.rows>1;d.length<f+w?v("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===m.grid.fill&&v("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const S=[],T=[];let y=o.activeIndex;void 0===a?a=o.getSlideIndex(d.filter((e=>e.classList.contains(m.slideActiveClass)))[0]):y=a;const E="next"===i||!i,x="prev"===i||!i;let C=0,M=0;const L=b?Math.ceil(d.length/m.grid.rows):d.length,P=(b?d[a].column:a)+(h&&void 0===r?-f/2+.5:0);if(P<w){C=Math.max(w-P,g);for(let e=0;e<w-P;e+=1){const t=e-Math.floor(e/L)*L;if(b){const e=L-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&S.push(t)}else S.push(L-t-1)}}else if(P+f>L-w){M=Math.max(P-(L-2*w),g);for(let e=0;e<M;e+=1){const t=e-Math.floor(e/L)*L;b?d.forEach(((e,s)=>{e.column===t&&T.push(s)})):T.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),x&&S.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),E&&T.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===m.slidesPerView?o.updateSlides():b&&(S.length>0&&x||T.length>0&&E)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),m.watchSlidesProgress&&o.updateSlidesOffset(),s)if(S.length>0&&x){if(void 0===t){const e=o.slidesGrid[y],t=o.slidesGrid[y+C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(y+C,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(r){const e=b?S.length/m.grid.rows:S.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(T.length>0&&E)if(void 0===t){const e=o.slidesGrid[y],t=o.slidesGrid[y-M]-e;l?o.setTranslate(o.translate-t):(o.slideTo(y-M,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?T.length/m.grid.rows:T.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!n){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:a,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===m.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function $(e,t,s){const i=l(),{params:r}=e,a=r.edgeSwipeDetection,n=r.edgeSwipeThreshold;return!a||!(s<=n||s>=i.innerWidth-n)||"prevent"===a&&(t.preventDefault(),!0)}function B(e){const t=this,s=a();let i=e;i.originalEvent&&(i=i.originalEvent);const r=t.touchEventsData;if("pointerdown"===i.type){if(null!==r.pointerId&&r.pointerId!==i.pointerId)return;r.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(r.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void $(t,i,i.targetTouches[0].pageX);const{params:n,touches:o,enabled:c}=t;if(!c)return;if(!n.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let p=i.target;if("wrapper"===n.touchEventsTarget&&!t.wrapperEl.contains(p))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(r.isTouched&&r.isMoved)return;const u=!!n.noSwipingClass&&""!==n.noSwipingClass,m=i.composedPath?i.composedPath():i.path;u&&i.target&&i.target.shadowRoot&&m&&(p=m[0]);const h=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,f=!(!i.target||!i.target.shadowRoot);if(n.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===a()||s===l())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(h,p):p.closest(h)))return void(t.allowClick=!0);if(n.swipeHandler&&!p.closest(n.swipeHandler))return;o.currentX=i.pageX,o.currentY=i.pageY;const v=o.currentX,g=o.currentY;if(!$(t,i,v))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=v,o.startY=g,r.touchStartTime=d(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let w=!0;p.matches(r.focusableElements)&&(w=!1,"SELECT"===p.nodeName&&(r.isTouched=!1)),s.activeElement&&s.activeElement.matches(r.focusableElements)&&s.activeElement!==p&&s.activeElement.blur();const b=w&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!b||p.isContentEditable||i.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function V(e){const t=a(),s=this,i=s.touchEventsData,{params:r,touches:n,rtlTranslate:l,enabled:o}=s;if(!o)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let c,p=e;if(p.originalEvent&&(p=p.originalEvent),"pointermove"===p.type){if(null!==i.touchId)return;if(p.pointerId!==i.pointerId)return}if("touchmove"===p.type){if(c=[...p.changedTouches].filter((e=>e.identifier===i.touchId))[0],!c||c.identifier!==i.touchId)return}else c=p;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",p));const u=c.pageX,m=c.pageY;if(p.preventedByNestedSwiper)return n.startX=u,void(n.startY=m);if(!s.allowTouchMove)return p.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m}),i.touchStartTime=d()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(m<n.startY&&s.translate<=s.maxTranslate()||m>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(u<n.startX&&s.translate<=s.maxTranslate()||u>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&p.target===t.activeElement&&p.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",p),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=u,n.currentY=m;const h=n.currentX-n.startX,f=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(h**2+f**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",p),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!r.cssMode&&p.cancelable&&p.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&p.stopPropagation();let v=s.isHorizontal()?h:f,g=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(v=Math.abs(v)*(l?1:-1),g=Math.abs(g)*(l?1:-1)),n.diff=v,v*=r.touchRatio,l&&(v=-v,g=-g);const w=s.touchesDirection;s.swipeDirection=v>0?"prev":"next",s.touchesDirection=g>0?"prev":"next";const b=s.params.loop&&!r.cssMode,S="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(b&&S&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",p)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&w!==s.touchesDirection&&b&&S&&Math.abs(v)>=1)return Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",p),i.isMoved=!0,i.currentTranslate=v+i.startTranslate;let T=!0,y=r.resistanceRatio;if(r.touchReleaseOnEdges&&(y=0),v>0?(b&&S&&i.allowThresholdMove&&i.currentTranslate>(r.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(T=!1,r.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+v)**y))):v<0&&(b&&S&&i.allowThresholdMove&&i.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(T=!1,r.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-v)**y))),T&&(p.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(v)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function N(e){const t=this,s=t.touchEventsData;let i,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(i=[...r.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:a,touches:n,rtlTranslate:l,slidesGrid:c,enabled:p}=t;if(!p)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&a.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);a.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=d(),m=u-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),m<300&&u-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=d(),o((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===n.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let h;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,h=a.followFinger?l?t.translate:-t.translate:-s.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:h});let f=0,v=t.slidesSizesGrid[0];for(let e=0;e<c.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==c[e+t]?h>=c[e]&&h<c[e+t]&&(f=e,v=c[e+t]-c[e]):h>=c[e]&&(f=e,v=c[c.length-1]-c[c.length-2])}let g=null,w=null;a.rewind&&(t.isBeginning?w=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const b=(h-c[f])/v,S=f<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(m>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?g:f+S):t.slideTo(f)),"prev"===t.swipeDirection&&(b>1-a.longSwipesRatio?t.slideTo(f+S):null!==w&&b<0&&Math.abs(b)>a.longSwipesRatio?t.slideTo(w):t.slideTo(f))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(f+S):t.slideTo(f):("next"===t.swipeDirection&&t.slideTo(null!==g?g:f+S),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:f))}}function F(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:a}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function q(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function H(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();r=0===a?0:(e.translate-e.minTranslate())/a,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function j(e){const t=this;_(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function R(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const W=(e,t)=>{const s=a(),{params:i,el:r,wrapperEl:n,device:l}=e,o=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[d]("click",e.onClick,!0),i.cssMode&&n[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",F,!0):e[c]("observerUpdate",F,!0),r[d]("load",e.onLoad,{capture:!0})};const Y=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var X={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function U(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),u(t,s)):u(t,s)):u(t,s)}}const K={eventsEmitter:P,update:A,translate:O,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),z({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),z({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:D,loop:G,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=B.bind(e),e.onTouchMove=V.bind(e),e.onTouchEnd=N.bind(e),e.onDocumentTouchStart=R.bind(e),t.cssMode&&(e.onScroll=H.bind(e)),e.onClick=q.bind(e),e.onLoad=j.bind(e),W(e,"on")},detachEvents:function(){W(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,a=i.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const n=e.getBreakpoint(a,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in a?a[n]:void 0)||e.originalParams,o=Y(e,i),d=Y(e,l),c=i.enabled;o&&!d?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(r.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,r=l[t]&&l[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const p=l.direction&&l.direction!==i.direction,m=i.loop&&(l.slidesPerView!==i.slidesPerView||p),h=i.loop;p&&s&&e.changeDirection(),u(e.params,l);const f=e.params.enabled,v=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!f?e.disable():!c&&f&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),s&&(m?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&v?(e.loopCreate(t),e.updateSlides()):h&&!v&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=l(),a="window"===t?r.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:a,value:l}=n[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(i=a):l<=s.clientWidth&&(i=a)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:a}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},J={};class Q{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=u({},t),e&&!t.el&&(t.el=e);const n=a();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((s=>{const i=u({},t,{el:s});e.push(new Q(i))})),e}const l=this;l.__swiper__=!0,l.support=C(),l.device=M({userAgent:t.userAgent}),l.browser=L(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const o={};l.modules.forEach((e=>{e({params:t,swiper:l,extendParams:U(t,o),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})}));const d=u({},X,o);return l.params=u({},d,J,t),l.originalParams=u({},l.params),l.passedParams=u({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach((e=>{l.on(e,l.params.on[e])})),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=b(f(t,`.${s.slideClass}, swiper-slide`)[0]);return b(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=f(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:a,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?i[l].swiperSlideSize:0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?r[e]+a[e]-r[l]<n:r[e]-r[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){r[l]-r[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&_(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return f(s,i())[0]})();return!r&&t.params.createElements&&(r=g("div",t.params.wrapperClass),s.append(r),f(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===w(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===w(s,"direction")),wrongRTL:"-webkit-box"===w(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?_(t,e):e.addEventListener("load",(e=>{_(t,e.target)}))})),I(t),t.initialized=!0,I(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:a,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r.removeAttribute("style"),a.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){u(J,e)}static get extendedDefaults(){return J}static get defaults(){return X}static installModule(e){Q.prototype.__modules__||(Q.prototype.__modules__=[]);const t=Q.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Q.installModule(e))),Q):(Q.installModule(e),Q)}}function Z(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let a=f(e.el,`.${i[r]}`)[0];a||(a=g("div",i[r]),a.className=i[r],e.el.append(a)),s[r]=a,t[r]=a}})),s}function ee(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const a=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function l(e,s){const i=t.params.navigation;(e=a(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return l(s,!1),void l(e,!1);l(s,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function d(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function p(){const e=t.params.navigation;if(t.params.navigation=Z(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=a(s),i=a(i);const r=(s,i)=>{s&&s.addEventListener("click","next"===i?c:d),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}function u(){let{nextEl:e,prevEl:s}=t.navigation;e=a(e),s=a(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?c:d),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?m():(p(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{u()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=a(e),s=a(s),t.enabled?o():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=a(i),n=a(n);const l=s.target;if(t.params.navigation.hideOnClick&&!n.includes(l)&&!i.includes(l)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const m=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),p(),o()},disable:m,update:o,init:p,destroy:u})}function te(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function se(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const a="swiper-pagination";let n;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;const o=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function p(e){const s=e.target.closest(te(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=b(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function u(){const e=t.rtl,s=t.params.pagination;if(d())return;let i,a,p=t.pagination.el;p=o(p);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,m=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let o,d,u;if(s.dynamicBullets&&(n=T(r[0],t.isHorizontal()?"width":"height",!0),p.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==a&&(l+=i-(a||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),d=o+(Math.min(r.length,s.dynamicMainBullets)-1),u=(d+o)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)r.forEach((e=>{const r=b(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=o&&r<=d&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===o&&c(e,"prev"),r===d&&c(e,"next"))}));else{const e=r[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=r[o],t=r[d];for(let e=o;e<=d;e+=1)r[e]&&r[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(s.dynamicBullets){const i=Math.min(r.length,s.dynamicMainBullets+4),a=(n*i-n)/2-u*n,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${a}px`}))}}p.forEach(((e,a)=>{if("fraction"===s.type&&(e.querySelectorAll(te(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(te(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(m)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(i+1)/m;let n=1,l=1;"horizontal"===r?n=a:l=a,e.querySelectorAll(te(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,m),0===a&&r("paginationRender",e)):(0===a&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function m(){const e=t.params.pagination;if(d())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=o(i);let a="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?a+=e.renderBullet.call(t,s,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(te(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",i[0])}function h(){t.params.pagination=Z(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>S(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=o(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",p),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(d())return;let s=t.pagination.el;s&&(s=o(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",p))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=o(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?v():(h(),m(),u())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),i("snapIndexChange",(()=>{u()})),i("snapGridLengthChange",(()=>{m(),u()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{u()})),i("click",((e,s)=>{const i=s.target,a=o(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const v=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),h(),m(),u()},disable:v,render:m,update:u,init:h,destroy:f})}Object.keys(K).forEach((e=>{Object.keys(K[e]).forEach((t=>{Q.prototype[t]=K[e][t]}))})),Q.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=l();let a=null,n=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{n=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,a=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:n}=e;n&&n!==t.el||(r=i?i.width:(s[0]||s).inlineSize,a=i?i.height:(s[0]||s).blockSize)})),r===s&&a===i||o()}))})),a.observe(t.el)):(r.addEventListener("resize",o),r.addEventListener("orientationchange",d))})),s("destroy",(()=>{n&&r.cancelAnimationFrame(n),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),r.removeEventListener("resize",o),r.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const a=[],n=l(),o=function(e,s){void 0===s&&(s={});const i=new(n.MutationObserver||n.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const s=function(){r("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(s):n.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),a.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=S(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const ie=e=>window.innerWidth>768?.005208335*window.innerWidth*e:100/390*(.1*window.innerWidth)*e,re=(e,t,s)=>{const i=e.slides;i.length&&t&&i.forEach((e=>{console.log(s),e.querySelector(s).innerHTML=`${t.querySelector(".swiper-pagination-bullet-active").innerHTML}`}))},ae=(e,t)=>{t&&e.el&&(t.innerHTML=`${e.el.querySelector(".swiper-pagination-bullet-active").innerHTML}`)},ne=e=>{!function(e,t){for(var s=0;s<e.length;s++)e[s].classList.remove(t)}(e.slides,"_hidden"),e.slides[e.activeIndex+3]&&e.slides[e.activeIndex+3].classList.add("_hidden")};window.addEventListener("load",(function(e){document.querySelector(".hero__slider")&&new Q(".hero__slider",{modules:[ee,se],observer:!0,observeParents:!0,slidesPerView:"auto",autoHeight:!0,speed:800,direction:"vertical",loop:!0,navigation:{prevEl:".hero__sl-control .sl-nav__arrow_prev",nextEl:".hero__sl-control .sl-nav__arrow_next"},pagination:{el:".hero__sl-control .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},on:{init:e=>{re(e,e.pagination.el,".slide-hero__number")},slideChange:e=>{re(e,e.pagination.el,".slide-hero__number")}}}),document.querySelector(".recommendations__slider")&&new Q(".recommendations__slider",{modules:[ee,se],observer:!0,observeParents:!0,slidesPerView:4,spaceBetween:137,speed:800,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".recommendations .sl-nav__arrow_prev",nextEl:".recommendations .sl-nav__arrow_next"},pagination:{el:".recommendations .sl-pagination",clickable:!0,dynamicBullets:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},on:{afterInit:e=>{ae(e.pagination,document.querySelector(".recommendations__number")),ne(e)},slideChange:e=>{ae(e.pagination,document.querySelector(".recommendations__number")),ne(e)}}}),document.querySelector(".tests__slider")&&new Q(".tests__slider",{modules:[ee,se],observer:!0,observeParents:!0,slidesPerView:1.01,spaceBetween:30,speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".tests .sl-nav__arrow_prev",nextEl:".tests .sl-nav__arrow_next"},pagination:{el:".tests .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},on:{afterInit:e=>{ae(e.pagination,document.querySelector(".tests__active-number"))},slideChange:e=>{ae(e.pagination,document.querySelector(".tests__active-number"))}}}),document.querySelector(".collections__slider")&&new Q(".collections__slider",{modules:[ee,se],observer:!0,observeParents:!0,slidesPerView:"auto",spaceBetween:ie(42),speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,resistance:!1,navigation:{prevEl:".collections .sl-nav__arrow_prev",nextEl:".collections .sl-nav__arrow_next"},pagination:{el:".collections .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},on:{sliderFirstMove:e=>{e.el.classList.add("_slide")},afterInit:e=>{ae(e.pagination,document.querySelector(".collections__active-number"))},slideChange:e=>{ae(e.pagination,document.querySelector(".collections__active-number"))}}})}));s(23),s(209);!function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{viewPass:!1};const s=document.querySelectorAll("input[placeholder],textarea[placeholder]");s.length&&s.forEach((e=>{e.hasAttribute("data-placeholder-nohide")||(e.dataset.placeholder=e.placeholder)})),document.body.addEventListener("focusin",(function(t){const s=t.target;"INPUT"!==s.tagName&&"TEXTAREA"!==s.tagName||(s.dataset.placeholder&&(s.placeholder=""),s.hasAttribute("data-no-focus-classes")||(s.classList.add("_form-focus"),s.parentElement.classList.add("_form-focus")),e.removeError(s))})),document.body.addEventListener("focusout",(function(t){const s=t.target;"INPUT"!==s.tagName&&"TEXTAREA"!==s.tagName||(s.dataset.placeholder&&(s.placeholder=s.dataset.placeholder),s.hasAttribute("data-no-focus-classes")||(s.classList.remove("_form-focus"),s.parentElement.classList.remove("_form-focus")),s.hasAttribute("data-validate")&&e.validateInput(s))})),t.viewPass&&document.addEventListener("click",(function(e){let t=e.target;if(t.closest('[class*="__viewpass"]')){let e=t.classList.contains("_viewpass-active")?"password":"text";t.parentElement.querySelector("input").setAttribute("type",e),t.classList.toggle("_viewpass-active")}}))}({viewPass:!1}),function(){const t=document.forms;if(t.length)for(const i of t)i.addEventListener("submit",(function(e){s(e.target,e)})),i.addEventListener("reset",(function(t){const s=t.target;e.formClean(s)}));async function s(t,s){if(0===(t.hasAttribute("data-no-validate")?0:e.getErrors(t))){if(t.hasAttribute("data-ajax")){s.preventDefault();const e=t.getAttribute("action")?t.getAttribute("action").trim():"#",r=t.getAttribute("method")?t.getAttribute("method").trim():"GET",a=new FormData(t);t.classList.add("_sending");const n=await fetch(e,{method:r,body:a});if(n.ok){let e=await n.json();t.classList.remove("_sending"),i(t,e)}else alert("error"),t.classList.remove("_sending")}else t.hasAttribute("data-dev")&&(s.preventDefault(),i(t))}else{s.preventDefault();const e=t.querySelector("._form-error");e&&t.hasAttribute("data-goto-error")&&gotoBlock(e,!0,1e3)}}function i(t){document.dispatchEvent(new CustomEvent("formSent",{detail:{form:t}})),e.formClean(t)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZzVCLEVBQVM1NkIsRUFBTTA2QixFQUNqQixNQUNFRyxNQUFNLFNBQ043NkIsRUFBS2IsVUFBVXlDLE9BQU8sV0FFMUIsTUFBVzVCLEVBQUs2NUIsYUFBYSxjQUUzQi82QixFQUFFTyxpQkFDRnU3QixFQUFTNTZCLEdBRWIsS0FBTyxDQUNMbEIsRUFBRU8saUJBQ0YsTUFBTXk3QixFQUFZOTZCLEVBQUt5QixjQUFjLGdCQUNqQ3E1QixHQUFhOTZCLEVBQUs2NUIsYUFBYSxvQkFDakNrQixVQUFVRCxHQUFXLEVBQU0sSUFFL0IsQ0FDRixDQUVBLFNBQVNGLEVBQVM1NkIsR0FFaEI1QyxTQUFTeXFCLGNBQ1AsSUFBSW5qQixZQUFZLFdBQVksQ0FDMUJzMkIsT0FBUSxDQUNOaDdCLEtBQU1BLE1BS1pGLEVBQWErQixVQUFVN0IsRUFDekIsQ0FDRixDVW5OQWk2QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9tYXAuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL3V0aWxzL2Zvcm0vZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91dGlscy5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3N3aXBlci1jb3JlLm1qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzIiwid2VicGFjazovL3dlYnBhY2stc2V0dXAvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi5tanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXNldHVwLy4vc3JjL2pzL3V0aWxzL3NsaWRlcnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zZXR1cC8uL3NyYy9qcy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSkge1xuICB3aW5kb3cubWFwID0gbnVsbDtcblxuICBhc3luYyBmdW5jdGlvbiBpbml0TWFwKCkge1xuICAgIGF3YWl0IHltYXBzMy5yZWFkeTtcblxuICAgIGNvbnN0IExPQ0FUSU9OID0ge1xuICAgICAgY2VudGVyOiBbMzAuMjkwNzA4NzI4MDE3NzIsIDU5Ljk2NDg3MzI3NDQyODU3XSxcbiAgICAgIHpvb206IDE1LFxuICAgIH07XG4gICAgY29uc3QgUElOX0xPQ0FUSU9OID0ge1xuICAgICAgY2VudGVyOiBbMzAuMjg2NzgwNTAwMDAwMDAzLCA1OS45NjY3NzI1NjQxNTE1Ml0sXG4gICAgICB6b29tOiAxNSxcbiAgICB9O1xuXG4gICAgY29uc3Qge1xuICAgICAgWU1hcCxcbiAgICAgIFlNYXBEZWZhdWx0U2NoZW1lTGF5ZXIsXG4gICAgICBZTWFwRGVmYXVsdEZlYXR1cmVzTGF5ZXIsXG4gICAgICBZTWFwTWFya2VyLFxuICAgIH0gPSB5bWFwczM7XG5cbiAgICBjb25zdCBtYXAgPSBuZXcgWU1hcChcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSxcblxuICAgICAgeyBsb2NhdGlvbjogTE9DQVRJT04gfVxuICAgICk7XG5cbiAgICBtYXAuYWRkQ2hpbGQobmV3IFlNYXBEZWZhdWx0U2NoZW1lTGF5ZXIoKSk7XG4gICAgbWFwLmFkZENoaWxkKG5ldyBZTWFwRGVmYXVsdEZlYXR1cmVzTGF5ZXIoKSk7XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGVsLmNsYXNzTmFtZSA9ICdtYXJrZXInO1xuICAgIGVsLnNyYyA9ICcuLi9hcHAvaW1nL2ljb25zL3Bpbi5zdmcnO1xuICAgIGVsLm9uY2xpY2sgPSAoKSA9PlxuICAgICAgbWFwLnVwZGF0ZSh7IGxvY2F0aW9uOiB7IC4uLlBJTl9MT0NBVElPTiwgZHVyYXRpb246IDQwMCB9IH0pO1xuICAgIG1hcC5hZGRDaGlsZChuZXcgWU1hcE1hcmtlcih7IGNvb3JkaW5hdGVzOiBQSU5fTE9DQVRJT04uY2VudGVyIH0sIGVsKSk7XG4gIH1cbiAgaW5pdE1hcCgpO1xufVxuIiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgLy8gaGFuZGxlciBmdW5jdGlvbnNcbiAgY29uc3Qgb25DbGlja0hhbmRsZXIgPSBlID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBjb25zb2xlLmxvZyh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcucHJvZHVjdC1jYXJkX19oZWFydC1pY29uJykpIHtcbiAgICAgIHRhcmdldC5jbG9zZXN0KCcucHJvZHVjdC1jYXJkX19oZWFydC1pY29uJykuY2xhc3NMaXN0LnRvZ2dsZSgnX2FjdGl2ZScpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBkb2N1bWVudCBldmVudHNcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrSGFuZGxlcik7XG59KTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBpbml0IGZvcm0gZmllbGRzXG5leHBvcnQgZnVuY3Rpb24gZm9ybUZpZWxkc0luaXQob3B0aW9ucyA9IHsgdmlld1Bhc3M6IGZhbHNlIH0pIHtcbiAgY29uc3QgZm9ybUZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgJ2lucHV0W3BsYWNlaG9sZGVyXSx0ZXh0YXJlYVtwbGFjZWhvbGRlcl0nXG4gICk7XG4gIGlmIChmb3JtRmllbGRzLmxlbmd0aCkge1xuICAgIGZvcm1GaWVsZHMuZm9yRWFjaChmb3JtRmllbGQgPT4ge1xuICAgICAgaWYgKCFmb3JtRmllbGQuaGFzQXR0cmlidXRlKCdkYXRhLXBsYWNlaG9sZGVyLW5vaGlkZScpKSB7XG4gICAgICAgIGZvcm1GaWVsZC5kYXRhc2V0LnBsYWNlaG9sZGVyID0gZm9ybUZpZWxkLnBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChcbiAgICAgIHRhcmdldEVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnXG4gICAgKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5kYXRhc2V0LnBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGxhY2Vob2xkZXIgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICghdGFyZ2V0RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbm8tZm9jdXMtY2xhc3NlcycpKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgdGFyZ2V0RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ19mb3JtLWZvY3VzJyk7XG4gICAgICB9XG4gICAgICBmb3JtVmFsaWRhdGUucmVtb3ZlRXJyb3IodGFyZ2V0RWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChcbiAgICAgIHRhcmdldEVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fFxuICAgICAgdGFyZ2V0RWxlbWVudC50YWdOYW1lID09PSAnVEVYVEFSRUEnXG4gICAgKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5kYXRhc2V0LnBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGxhY2Vob2xkZXIgPSB0YXJnZXRFbGVtZW50LmRhdGFzZXQucGxhY2Vob2xkZXI7XG4gICAgICB9XG4gICAgICBpZiAoIXRhcmdldEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLW5vLWZvY3VzLWNsYXNzZXMnKSkge1xuICAgICAgICB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWZvY3VzJyk7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdfZm9ybS1mb2N1cycpO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXZhbGlkYXRlJykpIHtcbiAgICAgICAgZm9ybVZhbGlkYXRlLnZhbGlkYXRlSW5wdXQodGFyZ2V0RWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAob3B0aW9ucy52aWV3UGFzcykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGxldCB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudC5jbG9zZXN0KCdbY2xhc3MqPVwiX192aWV3cGFzc1wiXScpKSB7XG4gICAgICAgIGxldCBpbnB1dFR5cGUgPSB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnX3ZpZXdwYXNzLWFjdGl2ZScpXG4gICAgICAgICAgPyAncGFzc3dvcmQnXG4gICAgICAgICAgOiAndGV4dCc7XG4gICAgICAgIHRhcmdldEVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXG4gICAgICAgICAgLnNldEF0dHJpYnV0ZSgndHlwZScsIGlucHV0VHlwZSk7XG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnX3ZpZXdwYXNzLWFjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8vIHZhbGlkYXRpb25cbmV4cG9ydCBsZXQgZm9ybVZhbGlkYXRlID0ge1xuICBnZXRFcnJvcnMoZm9ybSkge1xuICAgIGxldCBlcnJvciA9IDA7XG4gICAgbGV0IGZvcm1SZXF1aXJlZEl0ZW1zID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcqW2RhdGEtcmVxdWlyZWRdJyk7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW1zLmxlbmd0aCkge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbXMuZm9yRWFjaChmb3JtUmVxdWlyZWRJdGVtID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChmb3JtUmVxdWlyZWRJdGVtLm9mZnNldFBhcmVudCAhPT0gbnVsbCB8fFxuICAgICAgICAgICAgZm9ybVJlcXVpcmVkSXRlbS50YWdOYW1lID09PSAnU0VMRUNUJykgJiZcbiAgICAgICAgICAhZm9ybVJlcXVpcmVkSXRlbS5kaXNhYmxlZFxuICAgICAgICApIHtcbiAgICAgICAgICBlcnJvciArPSB0aGlzLnZhbGlkYXRlSW5wdXQoZm9ybVJlcXVpcmVkSXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG4gIH0sXG4gIHZhbGlkYXRlSW5wdXQoZm9ybVJlcXVpcmVkSXRlbSkge1xuICAgIGxldCBlcnJvciA9IDA7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW0uZGF0YXNldC5yZXF1aXJlZCA9PT0gJ2VtYWlsJykge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbS52YWx1ZSA9IGZvcm1SZXF1aXJlZEl0ZW0udmFsdWUucmVwbGFjZSgnICcsICcnKTtcbiAgICAgIGlmICh0aGlzLmVtYWlsVGVzdChmb3JtUmVxdWlyZWRJdGVtKSkge1xuICAgICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgICBlcnJvcisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFcnJvcihmb3JtUmVxdWlyZWRJdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZm9ybVJlcXVpcmVkSXRlbS50eXBlID09PSAnY2hlY2tib3gnICYmXG4gICAgICAhZm9ybVJlcXVpcmVkSXRlbS5jaGVja2VkXG4gICAgKSB7XG4gICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgZXJyb3IrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFmb3JtUmVxdWlyZWRJdGVtLnZhbHVlLnRyaW0oKSkge1xuICAgICAgICB0aGlzLmFkZEVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pO1xuICAgICAgICBlcnJvcisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFcnJvcihmb3JtUmVxdWlyZWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xuICB9LFxuICBhZGRFcnJvcihmb3JtUmVxdWlyZWRJdGVtKSB7XG4gICAgZm9ybVJlcXVpcmVkSXRlbS5jbGFzc0xpc3QuYWRkKCdfZm9ybS1lcnJvcicpO1xuICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdfZm9ybS1lcnJvcicpO1xuICAgIGxldCBpbnB1dEVycm9yID1cbiAgICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZXJyb3InKTtcbiAgICBpZiAoaW5wdXRFcnJvcikgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGlucHV0RXJyb3IpO1xuICAgIGlmIChmb3JtUmVxdWlyZWRJdGVtLmRhdGFzZXQuZXJyb3IpIHtcbiAgICAgIGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICdiZWZvcmVlbmQnLFxuICAgICAgICBgPGRpdiBjbGFzcz1cImZvcm1fX2Vycm9yXCI+JHtmb3JtUmVxdWlyZWRJdGVtLmRhdGFzZXQuZXJyb3J9PC9kaXY+YFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUVycm9yKGZvcm1SZXF1aXJlZEl0ZW0pIHtcbiAgICBmb3JtUmVxdWlyZWRJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWVycm9yJyk7XG4gICAgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ19mb3JtLWVycm9yJyk7XG4gICAgaWYgKGZvcm1SZXF1aXJlZEl0ZW0ucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZXJyb3InKSkge1xuICAgICAgZm9ybVJlcXVpcmVkSXRlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKFxuICAgICAgICBmb3JtUmVxdWlyZWRJdGVtLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2Vycm9yJylcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBmb3JtQ2xlYW4oZm9ybSkge1xuICAgIGZvcm0ucmVzZXQoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxldCBpbnB1dHMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHRleHRhcmVhJyk7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW5wdXRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBlbCA9IGlucHV0c1tpbmRleF07XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnX2Zvcm0tZm9jdXMnKTtcbiAgICAgICAgZm9ybVZhbGlkYXRlLnJlbW92ZUVycm9yKGVsKTtcbiAgICAgIH1cbiAgICAgIGxldCBjaGVja2JveGVzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tib3hfX2lucHV0Jyk7XG4gICAgICBpZiAoY2hlY2tib3hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGVja2JveGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gY2hlY2tib3hlc1tpbmRleF07XG4gICAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH0sXG4gIGVtYWlsVGVzdChmb3JtUmVxdWlyZWRJdGVtKSB7XG4gICAgcmV0dXJuICEvXlxcdysoW1xcLi1dP1xcdyspKkBcXHcrKFtcXC4tXT9cXHcrKSooXFwuXFx3ezIsOH0pKyQvLnRlc3QoXG4gICAgICBmb3JtUmVxdWlyZWRJdGVtLnZhbHVlXG4gICAgKTtcbiAgfSxcbn07XG5cbi8vIGZvcm0gc3VibWl0aW9uXG5leHBvcnQgZnVuY3Rpb24gZm9ybVN1Ym1pdChvcHRpb25zID0geyB2YWxpZGF0ZTogdHJ1ZSB9KSB7XG4gIGNvbnN0IGZvcm1zID0gZG9jdW1lbnQuZm9ybXM7XG4gIGlmIChmb3Jtcy5sZW5ndGgpIHtcbiAgICBmb3IgKGNvbnN0IGZvcm0gb2YgZm9ybXMpIHtcbiAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuICAgICAgICBmb3JtU3VibWl0QWN0aW9uKGZvcm0sIGUpO1xuICAgICAgfSk7XG4gICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xuICAgICAgICBmb3JtVmFsaWRhdGUuZm9ybUNsZWFuKGZvcm0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGZvcm1TdWJtaXRBY3Rpb24oZm9ybSwgZSkge1xuICAgIGNvbnN0IGVycm9yID0gIWZvcm0uaGFzQXR0cmlidXRlKCdkYXRhLW5vLXZhbGlkYXRlJylcbiAgICAgID8gZm9ybVZhbGlkYXRlLmdldEVycm9ycyhmb3JtKVxuICAgICAgOiAwO1xuICAgIGlmIChlcnJvciA9PT0gMCkge1xuICAgICAgY29uc3QgYWpheCA9IGZvcm0uaGFzQXR0cmlidXRlKCdkYXRhLWFqYXgnKTtcbiAgICAgIGlmIChhamF4KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZm9ybUFjdGlvbiA9IGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKVxuICAgICAgICAgID8gZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpLnRyaW0oKVxuICAgICAgICAgIDogJyMnO1xuICAgICAgICBjb25zdCBmb3JtTWV0aG9kID0gZm9ybS5nZXRBdHRyaWJ1dGUoJ21ldGhvZCcpXG4gICAgICAgICAgPyBmb3JtLmdldEF0dHJpYnV0ZSgnbWV0aG9kJykudHJpbSgpXG4gICAgICAgICAgOiAnR0VUJztcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG5cbiAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCdfc2VuZGluZycpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZvcm1BY3Rpb24sIHtcbiAgICAgICAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2VSZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdfc2VuZGluZycpO1xuICAgICAgICAgIGZvcm1TZW50KGZvcm0sIHJlc3BvbnNlUmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGVydCgnZXJyb3InKTtcbiAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ19zZW5kaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZm9ybS5oYXNBdHRyaWJ1dGUoJ2RhdGEtZGV2JykpIHtcbiAgICAgICAgLy8gaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGZvcm1TZW50KGZvcm0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBmb3JtRXJyb3IgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5fZm9ybS1lcnJvcicpO1xuICAgICAgaWYgKGZvcm1FcnJvciAmJiBmb3JtLmhhc0F0dHJpYnV0ZSgnZGF0YS1nb3RvLWVycm9yJykpIHtcbiAgICAgICAgZ290b0Jsb2NrKGZvcm1FcnJvciwgdHJ1ZSwgMTAwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFjdGlvbnMgYWZ0ZXIgc3VibWl0dGluZyB0aGUgZm9ybVxuICBmdW5jdGlvbiBmb3JtU2VudChmb3JtLCByZXNwb25zZVJlc3VsdCA9IGBgKSB7XG4gICAgLy8gZm9ybSBzdWJtaXQgZXZlbnRcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KCdmb3JtU2VudCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgZm9ybTogZm9ybSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICAvLyBjbGVhbiBmb3JtXG4gICAgZm9ybVZhbGlkYXRlLmZvcm1DbGVhbihmb3JtKTtcbiAgfVxufVxuXG4vLyBxdWFudGl0eVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1RdWFudGl0eSgpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB0YXJnZXRFbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5X19idXR0b24nKSkge1xuICAgICAgbGV0IHZhbHVlID0gcGFyc2VJbnQoXG4gICAgICAgIHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5JykucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZVxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygncXVhbnRpdHlfX2J1dHRvbl9wbHVzJykpIHtcbiAgICAgICAgdmFsdWUrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC0tdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA8IDEpIHZhbHVlID0gMTtcbiAgICAgIH1cbiAgICAgIHRhcmdldEVsZW1lbnQuY2xvc2VzdCgnLnF1YW50aXR5JykucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIHJhdGluZ1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1SYXRpbmcoKSB7XG4gIGNvbnN0IHJhdGluZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmF0aW5nJyk7XG4gIGlmIChyYXRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICBpbml0UmF0aW5ncygpO1xuICB9XG4gIC8vIG1haW4gZnVuY3Rpb25cbiAgZnVuY3Rpb24gaW5pdFJhdGluZ3MoKSB7XG4gICAgbGV0IHJhdGluZ0FjdGl2ZSwgcmF0aW5nVmFsdWU7XG4gICAgLy8gXCJydW5cIiB0aHJvdWdoIGFsbCB0aGUgcmF0aW5ncyBvbiB0aGUgcGFnZVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByYXRpbmdzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcmF0aW5nID0gcmF0aW5nc1tpbmRleF07XG4gICAgICBpbml0UmF0aW5nKHJhdGluZyk7XG4gICAgfVxuICAgIC8vIGluaXRpYWxpemUgYSBzcGVjaWZpYyByYXRpbmdcbiAgICBmdW5jdGlvbiBpbml0UmF0aW5nKHJhdGluZykge1xuICAgICAgaW5pdFJhdGluZ1ZhcnMocmF0aW5nKTtcblxuICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcblxuICAgICAgaWYgKHJhdGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ3JhdGluZ19zZXQnKSkge1xuICAgICAgICBzZXRSYXRpbmcocmF0aW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG4gICAgZnVuY3Rpb24gaW5pdFJhdGluZ1ZhcnMocmF0aW5nKSB7XG4gICAgICByYXRpbmdBY3RpdmUgPSByYXRpbmcucXVlcnlTZWxlY3RvcignLnJhdGluZ19fYWN0aXZlJyk7XG4gICAgICByYXRpbmdWYWx1ZSA9IHJhdGluZy5xdWVyeVNlbGVjdG9yKCcucmF0aW5nX192YWx1ZScpO1xuICAgIH1cbiAgICAvLyBjaGFuZ2UgdGhlIHdpZHRoIG9mIGFjdGl2ZSBzdGFyc1xuICAgIGZ1bmN0aW9uIHNldFJhdGluZ0FjdGl2ZVdpZHRoKGluZGV4ID0gcmF0aW5nVmFsdWUuaW5uZXJIVE1MKSB7XG4gICAgICBjb25zdCByYXRpbmdBY3RpdmVXaWR0aCA9IGluZGV4IC8gMC4wNTtcbiAgICAgIHJhdGluZ0FjdGl2ZS5zdHlsZS53aWR0aCA9IGAke3JhdGluZ0FjdGl2ZVdpZHRofSVgO1xuICAgIH1cbiAgICAvLyBpbmRpY2F0ZSB0aGUgZ3JhZGVcbiAgICBmdW5jdGlvbiBzZXRSYXRpbmcocmF0aW5nKSB7XG4gICAgICBjb25zdCByYXRpbmdJdGVtcyA9IHJhdGluZy5xdWVyeVNlbGVjdG9yQWxsKCcucmF0aW5nX19pdGVtJyk7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmF0aW5nSXRlbXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHJhdGluZ0l0ZW0gPSByYXRpbmdJdGVtc1tpbmRleF07XG4gICAgICAgIHJhdGluZ0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgLy8gdXBkYXRlIHZhcmlhYmxlc1xuICAgICAgICAgIGluaXRSYXRpbmdWYXJzKHJhdGluZyk7XG4gICAgICAgICAgLy8gdXBkYXRlIGFjdGl2ZSBzdGFyc1xuICAgICAgICAgIHNldFJhdGluZ0FjdGl2ZVdpZHRoKHJhdGluZ0l0ZW0udmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmF0aW5nSXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyB1cGRhdGUgYWN0aXZlIHN0YXJzXG4gICAgICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJhdGluZ0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIC8vIHVwZGF0ZSB2YXJpYWJsZXNcbiAgICAgICAgICBpbml0UmF0aW5nVmFycyhyYXRpbmcpO1xuXG4gICAgICAgICAgaWYgKHJhdGluZy5kYXRhc2V0LmFqYXgpIHtcbiAgICAgICAgICAgIC8vIFwic2VuZFwiIHRvIHNlcnZlclxuICAgICAgICAgICAgc2V0UmF0aW5nVmFsdWUocmF0aW5nSXRlbS52YWx1ZSwgcmF0aW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2hvdyBzcGVjaWZpZWQgZ3JhZGVcbiAgICAgICAgICAgIHJhdGluZ1ZhbHVlLmlubmVySFRNTCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIHNldFJhdGluZ0FjdGl2ZVdpZHRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0UmF0aW5nVmFsdWUodmFsdWUsIHJhdGluZykge1xuICAgICAgaWYgKCFyYXRpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYXRpbmdfc2VuZGluZycpKSB7XG4gICAgICAgIHJhdGluZy5jbGFzc0xpc3QuYWRkKCdyYXRpbmdfc2VuZGluZycpO1xuXG4gICAgICAgIC8vIHNlbmRpbmcgZGF0YSAodmFsdWUpIHRvIHNlcnZlclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgncmF0aW5nLmpzb24nLCB7XG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcblxuICAgICAgICAgIC8vYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIC8vXHR1c2VyUmF0aW5nOiB2YWx1ZVxuICAgICAgICAgIC8vfSksXG4gICAgICAgICAgLy9oZWFkZXJzOiB7XG4gICAgICAgICAgLy9cdCdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAvL31cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICAgIC8vIGdldCBuZXcgcmF0aW5nXG4gICAgICAgICAgY29uc3QgbmV3UmF0aW5nID0gcmVzdWx0Lm5ld1JhdGluZztcblxuICAgICAgICAgIC8vIG5ldyBhdmVyYWdlIHJlc3VsdCBvdXRwdXRcbiAgICAgICAgICByYXRpbmdWYWx1ZS5pbm5lckhUTUwgPSBuZXdSYXRpbmc7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgYWN0aXZlIHN0YXJzXG4gICAgICAgICAgc2V0UmF0aW5nQWN0aXZlV2lkdGgoKTtcblxuICAgICAgICAgIHJhdGluZy5jbGFzc0xpc3QucmVtb3ZlKCdyYXRpbmdfc2VuZGluZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsZXJ0KCdlcnJvcicpO1xuXG4gICAgICAgICAgcmF0aW5nLmNsYXNzTGlzdC5yZW1vdmUoJ3JhdGluZ19zZW5kaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogU1NSIFdpbmRvdyA0LjAuMlxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xuICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSB7fTtcbiAgfVxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICB9XG4gIH0pO1xufVxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJydcbiAgfSxcbiAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG4gIGdldEVsZW1lbnRCeUlkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50KCkge31cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZSgpIHt9LFxuICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICBpbXBvcnROb2RlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gIHJldHVybiBkb2M7XG59XG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJ1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgcmVwbGFjZVN0YXRlKCkge30sXG4gICAgcHVzaFN0YXRlKCkge30sXG4gICAgZ28oKSB7fSxcbiAgICBiYWNrKCkge31cbiAgfSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIEltYWdlKCkge30sXG4gIERhdGUoKSB7fSxcbiAgc2NyZWVuOiB7fSxcbiAgc2V0VGltZW91dCgpIHt9LFxuICBjbGVhclRpbWVvdXQoKSB7fSxcbiAgbWF0Y2hNZWRpYSgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9LFxuICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZ2V0V2luZG93IGFzIGEsIGdldERvY3VtZW50IGFzIGcgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZWxlbWVudEluZGV4IGFzIGcsIGNsYXNzZXNUb1Rva2VucyBhcyBoLCBnZXRUcmFuc2xhdGUgYXMgaSwgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgaiwgaXNPYmplY3QgYXMgaywgZ2V0U2xpZGVUcmFuc2Zvcm1FbCBhcyBsLCBlbGVtZW50U3R5bGUgYXMgbSwgbmV4dFRpY2sgYXMgbiwgZWxlbWVudE5leHRBbGwgYXMgbywgZWxlbWVudFByZXZBbGwgYXMgcCwgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgcSwgc2hvd1dhcm5pbmcgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcywgZXh0ZW5kIGFzIHQsIGRlbGV0ZVByb3BzIGFzIHUgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYSBhcyBlbGVtZW50UGFyZW50cywgbSBhcyBlbGVtZW50U3R5bGUsIGUgYXMgZWxlbWVudENoaWxkcmVuLCBzIGFzIHNldENTU1Byb3BlcnR5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIG8gYXMgZWxlbWVudE5leHRBbGwsIHAgYXMgZWxlbWVudFByZXZBbGwsIGkgYXMgZ2V0VHJhbnNsYXRlLCBxIGFzIGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBuIGFzIG5leHRUaWNrLCByIGFzIHNob3dXYXJuaW5nLCBjIGFzIGNyZWF0ZUVsZW1lbnQsIGQgYXMgbm93LCB0IGFzIGV4dGVuZCwgZyBhcyBlbGVtZW50SW5kZXgsIHUgYXMgZGVsZXRlUHJvcHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmxldCBzdXBwb3J0O1xuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgc21vb3RoU2Nyb2xsOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmICdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5sZXQgZGV2aWNlQ2FjaGVkO1xuZnVuY3Rpb24gY2FsY0RldmljZShfdGVtcCkge1xuICBsZXQge1xuICAgIHVzZXJBZ2VudFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gIC8vIGlQYWRPcyAxMyBmaXhcbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcbiAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihgJHtzY3JlZW5XaWR0aH14JHtzY3JlZW5IZWlnaHR9YCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cbiAgcmV0dXJuIGRldmljZUNhY2hlZDtcbn1cblxubGV0IGJyb3dzZXI7XG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaSgpLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuXG5mdW5jdGlvbiBSZXNpemUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICAgIGNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIE9ic2VydmVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgYXR0YWNoID0gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKG11dGF0aW9ucyA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXykgcmV0dXJuO1xuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IGVsZW1lbnRQYXJlbnRzKHN3aXBlci5ob3N0RWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmhvc3RFbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxudmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlcyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51bnNldFNsaWRlcygpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cbiAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChzcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZU9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzRnVsbHlWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8PSBzd2lwZXIuc2l6ZSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzW2ldLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGlzRnVsbHlWaXNpYmxlKSB7XG4gICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcyk7XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kLFxuICAgIHByb2dyZXNzTG9vcFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICBjb25zdCBpc0VuZFJvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIDwgMTtcbiAgICBpc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nUm91bmRlZCB8fCBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgaWYgKGlzQmVnaW5uaW5nUm91bmRlZCkgcHJvZ3Jlc3MgPSAwO1xuICAgIGlmIChpc0VuZFJvdW5kZWQpIHByb2dyZXNzID0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YSgwKTtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggKyAxKVswXTtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICAvLyBBY3RpdmUgY2xhc3Nlc1xuICAgIGFjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgaWYgKG5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZTbGlkZSkge1xuICAgICAgICBwcmV2U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG4gICAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgICBpZiAocHJldlNsaWRlKSB7XG4gICAgICAgIHByZXZTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0aXZlU2xpZGVJbmRleCkpIHtcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzLmluZGV4T2YoZmlyc3RTbGlkZUluQ29sdW1uKSwgMCk7XG4gICAgfVxuICAgIHJlYWxJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlU2xpZGVJbmRleCAvIHBhcmFtcy5ncmlkLnJvd3MpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZW50ZXJlZFNsaWRlc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbmVlZExvb3BGaXggPSBjb2xzIC0gdGFyZ2V0U2xpZGVJbmRleCA8IHNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTG9vcEZpeCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gdGFyZ2V0U2xpZGVJbmRleCArIDEgOiB0YXJnZXRTbGlkZUluZGV4IC0gY29scyArIDEsXG4gICAgICAgICAgc2xpZGVSZWFsSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gc3dpcGVyLnJlYWxJbmRleCA6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSk7XG4gIHJldHVybiBzd2lwZXI7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWQsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAncHJldidcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2U25hcCA9IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICB9XG4gIH1cbiAgbGV0IHByZXZJbmRleCA9IDA7XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdwcmV2aW91cycsIHRydWUpICsgMTtcbiAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhsYXN0SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlKHNsaWRlUmVhbEluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gIGNvbnN0IHNob3VsZEZpbGxHcm91cCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXAgIT09IDA7XG4gIGNvbnN0IHNob3VsZEZpbGxHcmlkID0gZ3JpZEVuYWJsZWQgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzICE9PSAwO1xuICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mU2xpZGVzOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuaXNFbGVtZW50ID8gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJywgW3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKSA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIFtwYXJhbXMuc2xpZGVDbGFzcywgcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pO1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBzbGlkZXNQZXJHcm91cCAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBzbGlkZXNQZXJHcm91cCwgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChzaG91bGRGaWxsR3JpZCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBncmlkLnJvd3MsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgaW5pdFNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5sb29wRml4KHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBkaXJlY3Rpb246IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHVuZGVmaW5lZCA6ICduZXh0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9vcEZpeChfdGVtcCkge1xuICBsZXQge1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIHNsaWRlVG8gPSB0cnVlLFxuICAgIGRpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICBieUNvbnRyb2xsZXIsXG4gICAgYnlNb3VzZXdoZWVsXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbGlkZXNFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIGNlbnRlcmVkU2xpZGVzXG4gIH0gPSBwYXJhbXM7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvID8gc2xpZGVzUGVyVmlldyA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICBpZiAobG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gc2xpZGVzUGVyR3JvdXAgLSBsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cDtcbiAgfVxuICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA8IHNsaWRlc1BlclZpZXcgKyBsb29wZWRTbGlkZXMpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnMnKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YCcpO1xuICB9XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgaWYgKGRhdGEucG9pbnRlcklkICE9PSBudWxsICYmIGRhdGEucG9pbnRlcklkICE9PSBlLnBvaW50ZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLnBvaW50ZXJJZCA9IGUucG9pbnRlcklkO1xuICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICBkYXRhLnRvdWNoSWQgPSBlLnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcbiAgfVxuICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAvLyBkb24ndCBwcm9jZWVkIHRvdWNoIGV2ZW50XG4gICAgcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGUuY29tcG9zZWRQYXRoID8gZS5jb21wb3NlZFBhdGgoKSA6IGUucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGlmICghcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIHN0YXJ0WCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaFN0YXJ0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJtb3ZlJykge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgIGlmIChpZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgfVxuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdG91Y2hlcy5wcmV2aW91c1kgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuICBsZXQgbG9vcEZpeGVkO1xuICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VHJhbnNsYXRlOiBkYXRhLmN1cnJlbnRUcmFuc2xhdGVcbiAgICB9KTtcbiAgICBkYXRhLmxvb3BTd2FwUmVzZXQgPSB0cnVlO1xuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBkYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkYXRhLnBvaW50ZXJJZCA9IG51bGw7XG4gIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0LCBwYXRoVHJlZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gcGFyYW1zLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCkgcmV0dXJuO1xuICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgc3dpcGVyLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuICB9XG59XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuICB9XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICBjaGVja092ZXJmbG93XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBldmVudHNQcmVmaXg6ICdzd2lwZXInLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZEJsYW5rU2xpZGVzOiB0cnVlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTbGlkZUluZGV4KHRoaXMuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gaW5kZXgpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG4gIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG4gIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKHZpZXcsIGV4YWN0KSB7XG4gICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgdmlldyA9ICdjdXJyZW50JztcbiAgICB9XG4gICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ251bWJlcicpIHJldHVybiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplIDogMDtcbiAgICAgIGxldCBicmVha0xvb3A7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSAnU1dJUEVSLUNPTlRBSU5FUicpIHtcbiAgICAgIHN3aXBlci5pc0VsZW1lbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgfTtcbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgIGlmICghd3JhcHBlckVsICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHdyYXBwZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKTtcbiAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgZWxlbWVudENoaWxkcmVuKGVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzRWw6IHN3aXBlci5pc0VsZW1lbnQgJiYgIWVsLnBhcmVudE5vZGUuaG9zdC5zbGlkZVNsb3RzID8gZWwucGFyZW50Tm9kZS5ob3N0IDogd3JhcHBlckVsLFxuICAgICAgaG9zdEVsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwucGFyZW50Tm9kZS5ob3N0IDogZWwsXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6IGVsZW1lbnRTdHlsZSh3cmFwcGVyRWwsICdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbml0KGVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuICAgIGNvbnN0IGxhenlFbGVtZW50cyA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBsYXp5RWxlbWVudHMucHVzaCguLi5zd2lwZXIuaG9zdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpKTtcbiAgICB9XG4gICAgbGF6eUVsZW1lbnRzLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gRW1pdFxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2xlYW5TdHlsZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgLy8gRGVzdHJveSBsb29wXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci5lbC5zd2lwZXIgPSBudWxsO1xuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3RhdGljIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187XG4gICAgaWYgKHR5cGVvZiBtb2QgPT09ICdmdW5jdGlvbicgJiYgbW9kdWxlcy5pbmRleE9mKG1vZCkgPCAwKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfVxufVxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcblxuZXhwb3J0IHsgU3dpcGVyIGFzIFMsIGRlZmF1bHRzIGFzIGQgfTtcbiIsImltcG9ydCB7IGUgYXMgZWxlbWVudENoaWxkcmVuLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuZWwsIGAuJHtjaGVja1Byb3BzW2tleV19YClbMF07XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2tQcm9wc1trZXldO1xuICAgICAgICAgIHN3aXBlci5lbC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgICBvcmlnaW5hbFBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGFzIGMgfTtcbiIsImltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuXG5mdW5jdGlvbiBOYXZpZ2F0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRDbGFzczogJ3N3aXBlci1idXR0b24tZGlzYWJsZWQnLFxuICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWxvY2snLFxuICAgICAgbmF2aWdhdGlvbkRpc2FibGVkQ2xhc3M6ICdzd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCdcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubmF2aWdhdGlvbiA9IHtcbiAgICBuZXh0RWw6IG51bGwsXG4gICAgcHJldkVsOiBudWxsXG4gIH07XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xuICBmdW5jdGlvbiBnZXRFbChlbCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgaWYgKHJlcykgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmVzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgcmVzLmxlbmd0aCA+IDEgJiYgc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbCAmJiAhcmVzKSByZXR1cm4gZWw7XG4gICAgLy8gaWYgKEFycmF5LmlzQXJyYXkocmVzKSAmJiByZXMubGVuZ3RoID09PSAxKSByZXMgPSByZXNbMF07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVFbChlbCwgZGlzYWJsZWQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAoc3ViRWwpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W2Rpc2FibGVkID8gJ2FkZCcgOiAncmVtb3ZlJ10oLi4ucGFyYW1zLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgIGlmIChzdWJFbC50YWdOYW1lID09PSAnQlVUVE9OJykgc3ViRWwuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHRvZ2dsZUVsKHByZXZFbCwgZmFsc2UpO1xuICAgICAgdG9nZ2xlRWwobmV4dEVsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvZ2dsZUVsKHByZXZFbCwgc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gICAgdG9nZ2xlRWwobmV4dEVsLCBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgfVxuICBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvblByZXYnKTtcbiAgfVxuICBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICB9KTtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgbGV0IG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgIGxldCBwcmV2RWwgPSBnZXRFbChwYXJhbXMucHJldkVsKTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9KTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgaW5pdEJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCAmJiBlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5sb2NrQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGRlc3Ryb3lCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKSk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgIXByZXZFbC5pbmNsdWRlcyh0YXJnZXRFbCkgJiYgIW5leHRFbC5pbmNsdWRlcyh0YXJnZXRFbCkpIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcbiAgICAgIGlmIChuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gbmV4dEVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gcHJldkVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIGNsYXNzZXNUb1NlbGVjdG9yKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gYC4ke2NsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXFwuOiErXFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xufVxuXG5leHBvcnQgeyBjbGFzc2VzVG9TZWxlY3RvciBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNsYXNzZXNUb1NlbGVjdG9yIH0gZnJvbSAnLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgZiBhcyBlbGVtZW50T3V0ZXJTaXplLCBnIGFzIGVsZW1lbnRJbmRleCwgYSBhcyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHBmeCA9ICdzd2lwZXItcGFnaW5hdGlvbic7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICBjbGlja2FibGU6IGZhbHNlLFxuICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgcmVuZGVyUHJvZ3Jlc3NiYXI6IG51bGwsXG4gICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGU6IGZhbHNlLFxuICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgZHluYW1pY0J1bGxldHM6IGZhbHNlLFxuICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGJ1bGxldENsYXNzOiBgJHtwZnh9LWJ1bGxldGAsXG4gICAgICBidWxsZXRBY3RpdmVDbGFzczogYCR7cGZ4fS1idWxsZXQtYWN0aXZlYCxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6IGAke3BmeH0tYCxcbiAgICAgIGN1cnJlbnRDbGFzczogYCR7cGZ4fS1jdXJyZW50YCxcbiAgICAgIHRvdGFsQ2xhc3M6IGAke3BmeH0tdG90YWxgLFxuICAgICAgaGlkZGVuQ2xhc3M6IGAke3BmeH0taGlkZGVuYCxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLW9wcG9zaXRlYCxcbiAgICAgIGNsaWNrYWJsZUNsYXNzOiBgJHtwZnh9LWNsaWNrYWJsZWAsXG4gICAgICBsb2NrQ2xhc3M6IGAke3BmeH0tbG9ja2AsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGAke3BmeH0taG9yaXpvbnRhbGAsXG4gICAgICB2ZXJ0aWNhbENsYXNzOiBgJHtwZnh9LXZlcnRpY2FsYCxcbiAgICAgIHBhZ2luYXRpb25EaXNhYmxlZENsYXNzOiBgJHtwZnh9LWRpc2FibGVkYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5wYWdpbmF0aW9uID0ge1xuICAgIGVsOiBudWxsLFxuICAgIGJ1bGxldHM6IFtdXG4gIH07XG4gIGxldCBidWxsZXRTaXplO1xuICBsZXQgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgY29uc3QgbWFrZUVsZW1lbnRzQXJyYXkgPSBlbCA9PiAoQXJyYXkuaXNBcnJheShlbCkgPyBlbCA6IFtlbF0pLmZpbHRlcihlID0+ICEhZSk7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmlsdGVyKHN1YkVsID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA9PT0gMSkgZWwgPSBlbFswXTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICBlbFxuICAgIH0pO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICBzdWJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKSk7XG4gIH1cbiAgb24oJ2NoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYWdpbmF0aW9uIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBlbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0IH07XG4iLCIvLyByZW1vdmUgY2xhc3MgZnJvbSBhbGwgYXJyYXkgZWxlbWVudHNcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGFycmF5LCBjbGFzc05hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufVxuXG4vLyBjb252ZXJ0IHJlbVxuZXhwb3J0IGNvbnN0IHJlbSA9IHJlbSA9PiB7XG4gIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xuICAgIHJldHVybiAwLjAwNTIwODMzNSAqIHdpbmRvdy5pbm5lcldpZHRoICogcmVtO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMTAwIC8gMzkwKSAqICgwLjEgKiB3aW5kb3cuaW5uZXJXaWR0aCkgKiByZW07XG4gIH1cbn07XG4iLCJpbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uLCBFZmZlY3RDcmVhdGl2ZSB9IGZyb20gJ3N3aXBlci9tb2R1bGVzJztcbmltcG9ydCB7IHJlbW92ZUNsYXNzZXMgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi91dGlscyc7XG5cbi8vIHN0eWxlc1xuaW1wb3J0ICdzd2lwZXIvY3NzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gY29uc3QgaW5pdFBhZ2luYXRpb24gPSBzd2lwZXIgPT4ge1xuLy8gICBjb25zdCBwYWdpbmF0aW9uID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4vLyAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuXG4vLyAgIGlmIChidWxsZXRzLmxlbmd0aCkge1xuLy8gICAgIHJlbW92ZUNsYXNzZXMoYnVsbGV0cywgJ19oaWRkZW4nKTtcbi8vICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbi8vICAgICAgIGlmIChcbi8vICAgICAgICAgYnVsbGV0cy5pbmRleE9mKGJ1bGxldCkgPD1cbi8vICAgICAgICAgYnVsbGV0cy5pbmRleE9mKFxuLy8gICAgICAgICAgIHBhZ2luYXRpb24ucXVlcnlTZWxlY3RvcignLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnKVxuLy8gICAgICAgICApXG4vLyAgICAgICApIHtcbi8vICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoJ19oaWRkZW4nKTtcbi8vICAgICAgIH1cbi8vICAgICAgIGlmIChcbi8vICAgICAgICAgYnVsbGV0cy5pbmRleE9mKFxuLy8gICAgICAgICAgIHBhZ2luYXRpb24ucXVlcnlTZWxlY3RvcignLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnKVxuLy8gICAgICAgICApID09PVxuLy8gICAgICAgICBidWxsZXRzLmxlbmd0aCAtIDFcbi8vICAgICAgICkge1xuLy8gICAgICAgICByZW1vdmVDbGFzc2VzKGJ1bGxldHMsICdfaGlkZGVuJyk7XG4vLyAgICAgICB9XG4vLyAgICAgfSk7XG4vLyAgIH1cbi8vIH07XG5cbmNvbnN0IGNoYW5nZVNsaWRlTnVtID0gKHN3aXBlciwgcGFnaW5hdGlvbiwgdGFyZ2V0KSA9PiB7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgaWYgKHNsaWRlcy5sZW5ndGggJiYgcGFnaW5hdGlvbikge1xuICAgIHNsaWRlcy5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHRhcmdldCk7XG4gICAgICBzbGlkZS5xdWVyeVNlbGVjdG9yKHRhcmdldCkuaW5uZXJIVE1MID0gYCR7XG4gICAgICAgIHBhZ2luYXRpb24ucXVlcnlTZWxlY3RvcignLnN3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnKS5pbm5lckhUTUxcbiAgICAgIH1gO1xuICAgIH0pO1xuICB9XG59O1xuY29uc3QgY2hhbmdlQWN0aXZlTnVtID0gKHBhZ2luYXRpb24sIHRhcmdldCkgPT4ge1xuICBpZiAodGFyZ2V0ICYmIHBhZ2luYXRpb24uZWwpIHtcbiAgICB0YXJnZXQuaW5uZXJIVE1MID0gYCR7XG4gICAgICBwYWdpbmF0aW9uLmVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJykuaW5uZXJIVE1MXG4gICAgfWA7XG4gIH1cbn07XG5jb25zdCBoaWRlU2xpZGUgPSBzd2lwZXIgPT4ge1xuICByZW1vdmVDbGFzc2VzKHN3aXBlci5zbGlkZXMsICdfaGlkZGVuJyk7XG4gIGlmIChzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleCArIDNdKSB7XG4gICAgc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXggKyAzXS5jbGFzc0xpc3QuYWRkKCdfaGlkZGVuJyk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGluaXRTbGlkZXJzID0gKCkgPT4ge1xuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlcm9fX3NsaWRlcicpKSB7XG4gICAgbmV3IFN3aXBlcignLmhlcm9fX3NsaWRlcicsIHtcbiAgICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSxcbiAgICAgIG9ic2VydmVyOiB0cnVlLFxuICAgICAgb2JzZXJ2ZVBhcmVudHM6IHRydWUsXG4gICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gICAgICBhdXRvSGVpZ2h0OiB0cnVlLFxuICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgIGxvb3A6IHRydWUsXG5cbiAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgcHJldkVsOiAnLmhlcm9fX3NsLWNvbnRyb2wgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy5oZXJvX19zbC1jb250cm9sIC5zbC1uYXZfX2Fycm93X25leHQnLFxuICAgICAgfSxcblxuICAgICAgLy8gcGFnaW5hdGlvblxuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogJy5oZXJvX19zbC1jb250cm9sIC5zbC1wYWdpbmF0aW9uJyxcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArICcwJyArIChpbmRleCArIDEpICsgJzwvc3Bhbj4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIGV2ZW50c1xuICAgICAgb246IHtcbiAgICAgICAgaW5pdDogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VTbGlkZU51bShzd2lwZXIsIHN3aXBlci5wYWdpbmF0aW9uLmVsLCAnLnNsaWRlLWhlcm9fX251bWJlcicpO1xuICAgICAgICB9LFxuICAgICAgICBzbGlkZUNoYW5nZTogc3dpcGVyID0+IHtcbiAgICAgICAgICBjaGFuZ2VTbGlkZU51bShzd2lwZXIsIHN3aXBlci5wYWdpbmF0aW9uLmVsLCAnLnNsaWRlLWhlcm9fX251bWJlcicpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY29tbWVuZGF0aW9uc19fc2xpZGVyJykpIHtcbiAgICBuZXcgU3dpcGVyKCcucmVjb21tZW5kYXRpb25zX19zbGlkZXInLCB7XG4gICAgICBtb2R1bGVzOiBbTmF2aWdhdGlvbiwgUGFnaW5hdGlvbl0sXG4gICAgICBvYnNlcnZlcjogdHJ1ZSxcbiAgICAgIG9ic2VydmVQYXJlbnRzOiB0cnVlLFxuICAgICAgc2xpZGVzUGVyVmlldzogNCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMTM3LFxuICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgIGxvb3A6IHRydWUsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuXG4gICAgICAvLyBuYXZpZ2F0aW9uXG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIHByZXZFbDogJy5yZWNvbW1lbmRhdGlvbnMgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy5yZWNvbW1lbmRhdGlvbnMgLnNsLW5hdl9fYXJyb3dfbmV4dCcsXG4gICAgICB9LFxuXG4gICAgICAvLyBwYWdpbmF0aW9uXG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGVsOiAnLnJlY29tbWVuZGF0aW9ucyAuc2wtcGFnaW5hdGlvbicsXG4gICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgZHluYW1pY0J1bGxldHM6IHRydWUsXG4gICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgJzAnICsgKGluZGV4ICsgMSkgKyAnPC9zcGFuPidcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBvbjoge1xuICAgICAgICBhZnRlckluaXQ6IHN3aXBlciA9PiB7XG4gICAgICAgICAgY2hhbmdlQWN0aXZlTnVtKFxuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24sXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjb21tZW5kYXRpb25zX19udW1iZXInKVxuICAgICAgICAgICk7XG4gICAgICAgICAgaGlkZVNsaWRlKHN3aXBlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGNoYW5nZUFjdGl2ZU51bShcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY29tbWVuZGF0aW9uc19fbnVtYmVyJylcbiAgICAgICAgICApO1xuICAgICAgICAgIGhpZGVTbGlkZShzd2lwZXIpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlc3RzX19zbGlkZXInKSkge1xuICAgIG5ldyBTd2lwZXIoJy50ZXN0c19fc2xpZGVyJywge1xuICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuICAgICAgb2JzZXJ2ZXI6IHRydWUsXG4gICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEuMDEsXG4gICAgICBzcGFjZUJldHdlZW46IDMwLFxuICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICBsb29wOiB0cnVlLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogdHJ1ZSxcblxuICAgICAgLy8gbmF2aWdhdGlvblxuICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBwcmV2RWw6ICcudGVzdHMgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy50ZXN0cyAuc2wtbmF2X19hcnJvd19uZXh0JyxcbiAgICAgIH0sXG5cbiAgICAgIC8vIHBhZ2luYXRpb25cbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6ICcudGVzdHMgLnNsLXBhZ2luYXRpb24nLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgJzAnICsgKGluZGV4ICsgMSkgKyAnPC9zcGFuPidcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBvbjoge1xuICAgICAgICBhZnRlckluaXQ6IHN3aXBlciA9PiB7XG4gICAgICAgICAgY2hhbmdlQWN0aXZlTnVtKFxuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24sXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVzdHNfX2FjdGl2ZS1udW1iZXInKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGNoYW5nZUFjdGl2ZU51bShcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlc3RzX19hY3RpdmUtbnVtYmVyJylcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25zX19zbGlkZXInKSkge1xuICAgIG5ldyBTd2lwZXIoJy5jb2xsZWN0aW9uc19fc2xpZGVyJywge1xuICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuICAgICAgb2JzZXJ2ZXI6IHRydWUsXG4gICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbiAgICAgIHNwYWNlQmV0d2VlbjogcmVtKDQyKSxcbiAgICAgIHNwZWVkOiAxMDAwLFxuICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICByZXNpc3RhbmNlOiBmYWxzZSxcblxuICAgICAgLy8gbmF2aWdhdGlvblxuICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBwcmV2RWw6ICcuY29sbGVjdGlvbnMgLnNsLW5hdl9fYXJyb3dfcHJldicsXG4gICAgICAgIG5leHRFbDogJy5jb2xsZWN0aW9ucyAuc2wtbmF2X19hcnJvd19uZXh0JyxcbiAgICAgIH0sXG5cbiAgICAgIC8vIHBhZ2luYXRpb25cbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6ICcuY29sbGVjdGlvbnMgLnNsLXBhZ2luYXRpb24nLFxuICAgICAgICBjbGlja2FibGU6IHRydWUsXG4gICAgICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgJzAnICsgKGluZGV4ICsgMSkgKyAnPC9zcGFuPidcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBvbjoge1xuICAgICAgICBzbGlkZXJGaXJzdE1vdmU6IHN3aXBlciA9PiB7XG4gICAgICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoJ19zbGlkZScpO1xuICAgICAgICB9LFxuICAgICAgICBhZnRlckluaXQ6IHN3aXBlciA9PiB7XG4gICAgICAgICAgY2hhbmdlQWN0aXZlTnVtKFxuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24sXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sbGVjdGlvbnNfX2FjdGl2ZS1udW1iZXInKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHNsaWRlQ2hhbmdlOiBzd2lwZXIgPT4ge1xuICAgICAgICAgIGNoYW5nZUFjdGl2ZU51bShcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25zX19hY3RpdmUtbnVtYmVyJylcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIChlKSB7XG4gIGluaXRTbGlkZXJzKCk7XG59KTtcbiIsImltcG9ydCAnLi4vc2Nzcy9zdHlsZS5zY3NzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB1dGlscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscy91dGlscy5qcydcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBmb3JtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0ICogYXMgZm9ybXMgZnJvbSAnLi91dGlscy9mb3JtL2Zvcm0uanMnO1xuXG4vLyBmb3JtIGZpZWxkc1xuZm9ybXMuZm9ybUZpZWxkc0luaXQoeyB2aWV3UGFzczogZmFsc2UgfSk7XG5cbi8vIGZvcm0gc3VibWl0XG5mb3Jtcy5mb3JtU3VibWl0KCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzd2lwZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCAnLi91dGlscy9zbGlkZXJzLmpzJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWFwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1wb3J0ICcuL3V0aWxzL21hcC5qcyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIHNjcmlwdHNcbmltcG9ydCAnLi91dGlscy9zY3JpcHQnO1xuIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ3aW5kb3ciLCJtYXAiLCJhc3luYyIsInltYXBzMyIsInJlYWR5IiwiUElOX0xPQ0FUSU9OIiwiY2VudGVyIiwiem9vbSIsIllNYXAiLCJZTWFwRGVmYXVsdFNjaGVtZUxheWVyIiwiWU1hcERlZmF1bHRGZWF0dXJlc0xheWVyIiwiWU1hcE1hcmtlciIsImxvY2F0aW9uIiwiYWRkQ2hpbGQiLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzcmMiLCJvbmNsaWNrIiwidXBkYXRlIiwiZHVyYXRpb24iLCJjb29yZGluYXRlcyIsImluaXRNYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsImNvbnNvbGUiLCJsb2ciLCJjbG9zZXN0IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicHJldmVudERlZmF1bHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImZvcm1WYWxpZGF0ZSIsImdldEVycm9ycyIsImZvcm0iLCJlcnJvciIsImZvcm1SZXF1aXJlZEl0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImZvckVhY2giLCJmb3JtUmVxdWlyZWRJdGVtIiwib2Zmc2V0UGFyZW50IiwidGFnTmFtZSIsImRpc2FibGVkIiwidGhpcyIsInZhbGlkYXRlSW5wdXQiLCJkYXRhc2V0IiwicmVxdWlyZWQiLCJ2YWx1ZSIsInJlcGxhY2UiLCJlbWFpbFRlc3QiLCJhZGRFcnJvciIsInJlbW92ZUVycm9yIiwidHlwZSIsImNoZWNrZWQiLCJ0cmltIiwiYWRkIiwicGFyZW50RWxlbWVudCIsImlucHV0RXJyb3IiLCJxdWVyeVNlbGVjdG9yIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJyZW1vdmUiLCJmb3JtQ2xlYW4iLCJyZXNldCIsInNldFRpbWVvdXQiLCJpbnB1dHMiLCJpbmRleCIsImNoZWNrYm94ZXMiLCJ0ZXN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJrZXlzIiwia2V5Iiwic3NyRG9jdW1lbnQiLCJib2R5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwiaGFzaCIsImhvc3QiLCJob3N0bmFtZSIsImhyZWYiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZG9jIiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwid2luIiwiZGVsYXkiLCJub3ciLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJzcGxpdCIsImEiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJvIiwicHJvdG90eXBlIiwiY2FsbCIsInNsaWNlIiwidG8iLCJhcmd1bWVudHMiLCJub0V4dGVuZCIsImkiLCJuZXh0U291cmNlIiwibm9kZSIsIkhUTUxFbGVtZW50Iiwibm9kZVR5cGUiLCJrZXlzQXJyYXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwibmV4dEluZGV4IiwibGVuIiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiX19zd2lwZXJfXyIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsInNldFByb3BlcnR5IiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJfcmVmIiwic3dpcGVyIiwidGFyZ2V0UG9zaXRpb24iLCJzaWRlIiwic3RhcnRQb3NpdGlvbiIsInRyYW5zbGF0ZSIsInRpbWUiLCJzdGFydFRpbWUiLCJwYXJhbXMiLCJzcGVlZCIsIndyYXBwZXJFbCIsInNjcm9sbFNuYXBUeXBlIiwiY3NzTW9kZUZyYW1lSUQiLCJkaXIiLCJpc091dE9mQm91bmQiLCJjdXJyZW50IiwiYW5pbWF0ZSIsImdldFRpbWUiLCJwcm9ncmVzcyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJlYXNlUHJvZ3Jlc3MiLCJjb3MiLCJQSSIsImN1cnJlbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwib3ZlcmZsb3ciLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJtYXRjaGVzIiwic2hvd1dhcm5pbmciLCJ0ZXh0Iiwid2FybiIsImVyciIsInRhZyIsImNsYXNzZXMiLCJBcnJheSIsImlzQXJyYXkiLCJjIiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwicGFyZW50cyIsInBhcmVudCIsInB1c2giLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwiaW5jbHVkZXMiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwiY2FsY0Jyb3dzZXIiLCJldmVudHNFbWl0dGVyIiwib24iLCJldmVudHMiLCJoYW5kbGVyIiwicHJpb3JpdHkiLCJzZWxmIiwiZXZlbnRzTGlzdGVuZXJzIiwiZGVzdHJveWVkIiwibWV0aG9kIiwiZXZlbnQiLCJvbmNlIiwib25jZUhhbmRsZXIiLCJvZmYiLCJfX2VtaXR0ZXJQcm94eSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFwcGx5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiZGF0YSIsImNvbnRleHQiLCJfbGVuMiIsIl9rZXkyIiwidW5zaGlmdCIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsInNsaWRlRWwiLCJpc0VsZW1lbnQiLCJzbGlkZUNsYXNzIiwibGF6eUVsIiwibGF6eVByZWxvYWRlckNsYXNzIiwic2hhZG93Um9vdCIsInVubGF6eSIsInNsaWRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWxvYWQiLCJhbW91bnQiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiY2VpbCIsImFjdGl2ZUluZGV4IiwiZ3JpZCIsInJvd3MiLCJhY3RpdmVDb2x1bW4iLCJwcmVsb2FkQ29sdW1ucyIsImZyb20iLCJfIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZXdpbmQiLCJsb29wIiwicmVhbEluZGV4IiwidXBkYXRlU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInBhcnNlSW50IiwiaXNOYU4iLCJhc3NpZ24iLCJ1cGRhdGVTbGlkZXMiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJnZXREaXJlY3Rpb25MYWJlbCIsInNsaWRlc0VsIiwic3dpcGVyU2l6ZSIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJhZGRUb1NuYXBHcmlkIiwiYWRkVG9TbGlkZXNHcmlkIiwidiIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsInVwZGF0ZVNsaWRlc09mZnNldCIsImJhY2tGYWNlSGlkZGVuQ2xhc3MiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQiLCJjb250YWlucyIsIm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzIiwidXBkYXRlQXV0b0hlaWdodCIsImFjdGl2ZVNsaWRlcyIsIm5ld0hlaWdodCIsInNldFRyYW5zaXRpb24iLCJnZXRTbGlkZUJ5SW5kZXgiLCJnZXRTbGlkZUluZGV4QnlEYXRhIiwidmlzaWJsZVNsaWRlcyIsIm9mZnNldEhlaWdodCIsIm1pbnVzT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY3NzT3ZlcmZsb3dBZGp1c3RtZW50IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzRnVsbHlWaXNpYmxlIiwib3JpZ2luYWxQcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByb2dyZXNzTG9vcCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzQmVnaW5uaW5nUm91bmRlZCIsImlzRW5kUm91bmRlZCIsImZpcnN0U2xpZGVJbmRleCIsImxhc3RTbGlkZUluZGV4IiwiZmlyc3RTbGlkZVRyYW5zbGF0ZSIsImxhc3RTbGlkZVRyYW5zbGF0ZSIsInRyYW5zbGF0ZU1heCIsInRyYW5zbGF0ZUFicyIsImF1dG9IZWlnaHQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwiZ2V0RmlsdGVyZWRTbGlkZSIsImFjdGl2ZVNsaWRlIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnROZXh0QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudFByZXZBbGwiLCJlbWl0U2xpZGVzQ2xhc3NlcyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwibmV3QWN0aXZlSW5kZXgiLCJwcmV2aW91c0luZGV4IiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsImdldFZpcnR1YWxSZWFsSW5kZXgiLCJhSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsInNraXAiLCJmaXJzdFNsaWRlSW5Db2x1bW4iLCJhY3RpdmVTbGlkZUluZGV4IiwiZ2V0QXR0cmlidXRlIiwiaW5pdGlhbGl6ZWQiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJwYXRoIiwicGF0aEVsIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJnZXRUcmFuc2xhdGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsIm5ld1Byb2dyZXNzIiwieCIsInkiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInRyYW5zbGF0ZVRvIiwicnVuQ2FsbGJhY2tzIiwidHJhbnNsYXRlQm91bmRzIiwiaW50ZXJuYWwiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJuZXdUcmFuc2xhdGUiLCJpc0giLCJiZWhhdmlvciIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25FbWl0IiwiZGlyZWN0aW9uIiwic3RlcCIsInNsaWRlVG8iLCJpbml0aWFsIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJ0IiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwidGFyZ2V0U2xpZGVJbmRleCIsImNvbHMiLCJuZWVkTG9vcEZpeCIsImxvb3BGaXgiLCJzbGlkZVJlYWxJbmRleCIsInNsaWRlTmV4dCIsInBlckdyb3VwIiwic2xpZGVzUGVyR3JvdXBBdXRvIiwiaW5jcmVtZW50IiwibG9vcFByZXZlbnRzU2xpZGluZyIsIl9jbGllbnRMZWZ0IiwiY2xpZW50TGVmdCIsInNsaWRlUHJldiIsIm5vcm1hbGl6ZSIsInZhbCIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwicHJldlNuYXBJbmRleCIsInByZXZJbmRleCIsImxhc3RJbmRleCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsInRocmVzaG9sZCIsImN1cnJlbnRTbmFwIiwic2xpZGVUb0luZGV4Iiwic2xpZGVTZWxlY3RvciIsImxvb3BlZFNsaWRlcyIsImdldFNsaWRlSW5kZXgiLCJsb29wQ3JlYXRlIiwic2hvdWxkRmlsbEdyb3VwIiwic2hvdWxkRmlsbEdyaWQiLCJhZGRCbGFua1NsaWRlcyIsImFtb3VudE9mU2xpZGVzIiwic2xpZGVCbGFua0NsYXNzIiwiYXBwZW5kIiwibG9vcEFkZEJsYW5rU2xpZGVzIiwicmVjYWxjU2xpZGVzIiwiYnlNb3VzZXdoZWVsIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJmaWxsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwiX19wcmV2ZW50T2JzZXJ2ZXJfXyIsInN3aXBlckxvb3BNb3ZlRE9NIiwicHJlcGVuZCIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJ0b3VjaEV2ZW50c0RhdGEiLCJzdGFydFRyYW5zbGF0ZSIsInNoaWZ0IiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsRXZlbnQiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwicG9pbnRlclR5cGUiLCJ0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0Iiwid2hpY2giLCJidXR0b24iLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwic3dpcGluZ0NsYXNzSGFzVmFsdWUiLCJub1N3aXBpbmdDbGFzcyIsImV2ZW50UGF0aCIsImNvbXBvc2VkUGF0aCIsIm5vU3dpcGluZ1NlbGVjdG9yIiwiaXNUYXJnZXRTaGFkb3ciLCJub1N3aXBpbmciLCJiYXNlIiwiX19jbG9zZXN0RnJvbSIsImFzc2lnbmVkU2xvdCIsImZvdW5kIiwiZ2V0Um9vdE5vZGUiLCJjbG9zZXN0RWxlbWVudCIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwicGFnZVkiLCJzdGFydFkiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwic3dpcGVEaXJlY3Rpb24iLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb2N1c2FibGVFbGVtZW50cyIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsImlzQ29udGVudEVkaXRhYmxlIiwiZnJlZU1vZGUiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJwcmV2aW91c1giLCJwcmV2aW91c1kiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInRvdWNoQW5nbGUiLCJhdGFuMiIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaGVzRGlmZiIsIm9uZVdheU1vdmVtZW50IiwidG91Y2hSYXRpbyIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImV2dCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImdyYWJDdXJzb3IiLCJzZXRHcmFiQ3Vyc29yIiwibG9vcFN3YXBSZXNldCIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwicGF0aFRyZWUiLCJsYXN0Q2xpY2tUaW1lIiwiY3VycmVudFBvcyIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicmVzaXplVGltZW91dCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Mb2FkIiwib25Eb2N1bWVudFRvdWNoU3RhcnQiLCJkb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCIsInRvdWNoQWN0aW9uIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlzR3JpZEVuYWJsZWQiLCJkZWZhdWx0cyIsImluaXQiLCJyZXNpemVPYnNlcnZlciIsImNyZWF0ZUVsZW1lbnRzIiwiZXZlbnRzUHJlZml4IiwidXJsIiwiYnJlYWtwb2ludHNCYXNlIiwidW5pcXVlTmF2RWxlbWVudHMiLCJwYXNzaXZlTGlzdGVuZXJzIiwid3JhcHBlckNsYXNzIiwiX2VtaXRDbGFzc2VzIiwibW9kdWxlRXh0ZW5kUGFyYW1zIiwiYWxsTW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsImF1dG8iLCJwcm90b3R5cGVzIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIm1vdmluZyIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiYXR0YWNoRXZlbnRzIiwiYmluZCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsIndhc0xvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJoYXNMb29wIiwiY29udGFpbmVyRWwiLCJjdXJyZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwb2ludHMiLCJwb2ludCIsIm1pblJhdGlvIiwic3Vic3RyIiwic29ydCIsImIiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJtb2R1bGVzIiwiX19tb2R1bGVzX18iLCJtb2QiLCJleHRlbmRQYXJhbXMiLCJzd2lwZXJQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJldmVudE5hbWUiLCJ2ZWxvY2l0eSIsInRydW5jIiwiY2xpY2tUaW1lb3V0IiwidmVsb2NpdGllcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInByb3BlcnR5Iiwic2V0UHJvZ3Jlc3MiLCJjbHMiLCJnZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVzIiwidmlldyIsImV4YWN0Iiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwiY29tcGxldGUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwicGFyZW50Tm9kZSIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJvYmplY3QiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibSIsImNoZWNrUHJvcHMiLCJOYXZpZ2F0aW9uIiwiaGlkZU9uQ2xpY2siLCJkaXNhYmxlZENsYXNzIiwiaGlkZGVuQ2xhc3MiLCJsb2NrQ2xhc3MiLCJuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcyIsIm1ha2VFbGVtZW50c0FycmF5IiwiZ2V0RWwiLCJyZXMiLCJ0b2dnbGVFbCIsInN1YkVsIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsImluaXRCdXR0b24iLCJkZXN0cm95QnV0dG9uIiwiX3MiLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiaXNIaWRkZW4iLCJQYWdpbmF0aW9uIiwicGZ4IiwiYnVsbGV0U2l6ZSIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJCdWxsZXQiLCJyZW5kZXJQcm9ncmVzc2JhciIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyQ3VzdG9tIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsImR5bmFtaWNCdWxsZXRzIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwibnVtYmVyIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsImJ1bGxldENsYXNzIiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwiY3VycmVudENsYXNzIiwidG90YWxDbGFzcyIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiY2xpY2thYmxlQ2xhc3MiLCJob3Jpem9udGFsQ2xhc3MiLCJ2ZXJ0aWNhbENsYXNzIiwicGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MiLCJidWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiaXNQYWdpbmF0aW9uRGlzYWJsZWQiLCJzZXRTaWRlQnVsbGV0cyIsImJ1bGxldEVsIiwicG9zaXRpb24iLCJvbkJ1bGxldENsaWNrIiwidG90YWwiLCJmaXJzdEluZGV4IiwibWlkSW5kZXgiLCJjbGFzc2VzVG9SZW1vdmUiLCJzdWZmaXgiLCJzIiwiZmxhdCIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInN1YkVsSW5kZXgiLCJmcmFjdGlvbkVsIiwidGV4dENvbnRlbnQiLCJ0b3RhbEVsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzRWwiLCJpbm5lckhUTUwiLCJyZW5kZXIiLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJvYnNlcnZlciIsImFuaW1hdGlvbkZyYW1lIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIlJlc2l6ZU9ic2VydmVyIiwibmV3V2lkdGgiLCJfcmVmMiIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmVycyIsImF0dGFjaCIsIm9wdGlvbnMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiY29udGFpbmVyUGFyZW50cyIsImRpc2Nvbm5lY3QiLCJyZW0iLCJjaGFuZ2VTbGlkZU51bSIsImNoYW5nZUFjdGl2ZU51bSIsImhpZGVTbGlkZSIsImFycmF5Iiwic2xpZGVDaGFuZ2UiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJhZnRlckluaXQiLCJzbGlkZXJGaXJzdE1vdmUiLCJ2aWV3UGFzcyIsImZvcm1GaWVsZHMiLCJmb3JtRmllbGQiLCJoYXNBdHRyaWJ1dGUiLCJwbGFjZWhvbGRlciIsInRhcmdldEVsZW1lbnQiLCJpbnB1dFR5cGUiLCJmb3JtcyIsImZvcm1TdWJtaXRBY3Rpb24iLCJmb3JtQWN0aW9uIiwiZm9ybU1ldGhvZCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJyZXNwb25zZVJlc3VsdCIsImpzb24iLCJmb3JtU2VudCIsImFsZXJ0IiwiZm9ybUVycm9yIiwiZ290b0Jsb2NrIiwiZGV0YWlsIl0sInNvdXJjZVJvb3QiOiIifQ==