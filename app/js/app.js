(()=>{var e={726:()=>{function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],s=t.dataset.da.trim().split(","),i={};i.element=t,i.parent=t.parentNode,i.destination=document.querySelector(s[0].trim()),i.breakpoint=s[1]?s[1].trim():"767",i.place=s[2]?s[2].trim():"last",i.index=this.indexInParent(i.parent,i.element),this.оbjects.push(i)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,s){return Array.prototype.indexOf.call(s,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const s=this.mediaQueries[t],i=String.prototype.split.call(s,","),n=window.matchMedia(i[0]),r=i[1],a=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===r}));n.addListener((function(){e.mediaHandler(n,a)})),this.mediaHandler(n,a)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const s=t[e];s.index=this.indexInParent(s.parent,s.element),this.moveTo(s.place,s.element,s.destination)}else for(let e=t.length-1;e>=0;e--){const s=t[e];s.element.classList.contains(this.daClassname)&&this.moveBack(s.parent,s.element,s.index)}},e.prototype.moveTo=function(e,t,s){t.classList.add(this.daClassname),"last"===e||e>=s.children.length?s.insertAdjacentElement("beforeend",t):"first"!==e?s.children[e].insertAdjacentElement("beforebegin",t):s.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,s){t.classList.remove(this.daClassname),void 0!==e.children[s]?e.children[s].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const s=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(s,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},486:()=>{new(function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,s,i){return s&&t(e.prototype,s),i&&t(e,i),e}var i={classNames:{active:"gl-active",base:"gl-star-rating",selected:"gl-selected"},clearable:!0,maxStars:10,prebuilt:!1,stars:null,tooltip:"Select a Rating"},n=function(e,t,s){e.classList[t?"add":"remove"](s)},r=function(e){var t=document.createElement("span");for(var s in e=e||{})t.setAttribute(s,e[s]);return t},a=function(e,t,s){var i=r(s);return e.parentNode.insertBefore(i,t?e.nextSibling:e),i},o=function e(){for(var t=arguments.length,s=new Array(t),i=0;i<t;i++)s[i]=arguments[i];var n={};return s.forEach((function(t){Object.keys(t||{}).forEach((function(i){if(void 0!==s[0][i]){var r=t[i];"Object"!==l(r)||"Object"!==l(n[i])?n[i]=r:n[i]=e(n[i],r)}}))})),n},l=function(e){return{}.toString.call(e).slice(8,-1)},c=function(){function t(s,i){var n,r;e(this,t),this.direction=window.getComputedStyle(s,null).getPropertyValue("direction"),this.el=s,this.events={change:this.onChange.bind(this),keydown:this.onKeyDown.bind(this),mousedown:this.onPointerDown.bind(this),mouseleave:this.onPointerLeave.bind(this),mousemove:this.onPointerMove.bind(this),reset:this.onReset.bind(this),touchend:this.onPointerDown.bind(this),touchmove:this.onPointerMove.bind(this)},this.indexActive=null,this.indexSelected=null,this.props=i,this.tick=null,this.ticking=!1,this.values=function(e){var t=[];return[].forEach.call(e.options,(function(e){var s=parseInt(e.value,10)||0;s>0&&t.push({index:e.index,text:e.text,value:s})})),t.sort((function(e,t){return e.value-t.value}))}(s),this.widgetEl=null,this.el.widget&&this.el.widget.destroy(),n=this.values.length,r=this.props.maxStars,/^\d+$/.test(n)&&1<=n&&n<=r?this.build():this.destroy()}return s(t,[{key:"build",value:function(){this.destroy(),this.buildWidget(),this.selectValue(this.indexSelected=this.selected(),!1),this.handleEvents("add"),this.el.widget=this}},{key:"buildWidget",value:function(){var e,t,s=this;this.props.prebuilt?(e=this.el.parentNode,t=e.querySelector("."+this.props.classNames.base+"--stars")):((e=a(this.el,!1,{class:this.props.classNames.base})).appendChild(this.el),t=a(this.el,!0,{class:this.props.classNames.base+"--stars"}),this.values.forEach((function(e,i){var n=r({"data-index":i,"data-value":e.value});"function"==typeof s.props.stars&&s.props.stars.call(s,n,e,i),[].forEach.call(n.children,(function(e){return e.style.pointerEvents="none"})),t.innerHTML+=n.outerHTML}))),e.dataset.starRating="",e.classList.add(this.props.classNames.base+"--"+this.direction),this.props.tooltip&&t.setAttribute("role","tooltip"),this.widgetEl=t}},{key:"changeIndexTo",value:function(e,t){var s=this;if(this.indexActive!==e||t){if([].forEach.call(this.widgetEl.children,(function(t,i){n(t,i<=e,s.props.classNames.active),n(t,i===s.indexSelected,s.props.classNames.selected)})),this.widgetEl.setAttribute("data-rating",e+1),"function"==typeof this.props.stars||this.props.prebuilt||(this.widgetEl.classList.remove("s"+10*(this.indexActive+1)),this.widgetEl.classList.add("s"+10*(e+1))),this.props.tooltip){var i,r=e<0?this.props.tooltip:null===(i=this.values[e])||void 0===i?void 0:i.text;this.widgetEl.setAttribute("aria-label",r)}this.indexActive=e}this.ticking=!1}},{key:"destroy",value:function(){this.indexActive=null,this.indexSelected=this.selected();var e=this.el.parentNode;e.classList.contains(this.props.classNames.base)&&(this.props.prebuilt?(this.widgetEl=e.querySelector("."+this.props.classNames.base+"--stars"),e.classList.remove(this.props.classNames.base+"--"+this.direction),delete e.dataset.starRating):e.parentNode.replaceChild(this.el,e),this.handleEvents("remove")),delete this.el.widget}},{key:"eventListener",value:function(e,t,s,i){var n=this;s.forEach((function(s){return e[t+"EventListener"](s,n.events[s],i||!1)}))}},{key:"handleEvents",value:function(e){var t=this.el.closest("form");t&&"FORM"===t.tagName&&this.eventListener(t,e,["reset"]),this.eventListener(this.el,e,["change"]),"add"===e&&this.el.disabled||(this.eventListener(this.el,e,["keydown"]),this.eventListener(this.widgetEl,e,["mousedown","mouseleave","mousemove","touchend","touchmove"],!1))}},{key:"indexFromEvent",value:function(e){var t,s,i=(null===(t=e.touches)||void 0===t?void 0:t[0])||(null===(s=e.changedTouches)||void 0===s?void 0:s[0])||e,n=document.elementFromPoint(i.clientX,i.clientY);return n.parentNode===this.widgetEl?[].slice.call(n.parentNode.children).indexOf(n):this.indexActive}},{key:"onChange",value:function(){this.changeIndexTo(this.selected(),!0)}},{key:"onKeyDown",value:function(e){var t=e.key.slice(5);if(~["Left","Right"].indexOf(t)){e.preventDefault();var s="Left"===t?-1:1;"rtl"===this.direction&&(s*=-1);var i=this.values.length-1,n=Math.min(Math.max(this.selected()+s,-1),i);this.selectValue(n,!0)}}},{key:"onPointerDown",value:function(e){e.preventDefault();var t=this.indexFromEvent(e);this.props.clearable&&t===this.indexSelected&&(t=-1),this.selectValue(t,!0)}},{key:"onPointerLeave",value:function(e){var t=this;e.preventDefault(),cancelAnimationFrame(this.tick),requestAnimationFrame((function(){return t.changeIndexTo(t.indexSelected)}))}},{key:"onPointerMove",value:function(e){var t=this;e.preventDefault(),this.ticking||(this.tick=requestAnimationFrame((function(){return t.changeIndexTo(t.indexFromEvent(e))})),this.ticking=!0)}},{key:"onReset",value:function(){var e,t=this.valueIndex(null===(e=this.el.querySelector("[selected]"))||void 0===e?void 0:e.value);this.selectValue(t||-1,!1)}},{key:"selected",value:function(){return this.valueIndex(this.el.value)}},{key:"selectValue",value:function(e,t){var s;this.el.value=(null===(s=this.values[e])||void 0===s?void 0:s.value)||"",this.indexSelected=this.selected(),!1===t?this.changeIndexTo(this.selected(),!0):this.el.dispatchEvent(new Event("change"))}},{key:"valueIndex",value:function(e){return this.values.findIndex((function(t){return t.value===+e}))}}]),t}();return function(){function t(s,i){e(this,t),this.destroy=this.destroy.bind(this),this.props=i,this.rebuild=this.rebuild.bind(this),this.selector=s,this.widgets=[],this.build()}return s(t,[{key:"build",value:function(){var e=this;this.queryElements(this.selector).forEach((function(t){var s=o(i,e.props,JSON.parse(t.getAttribute("data-options")));"SELECT"!==t.tagName||t.widget||(!s.prebuilt&&t.parentNode.classList.contains(s.classNames.base)&&e.unwrap(t),e.widgets.push(new c(t,s)))}))}},{key:"destroy",value:function(){this.widgets.forEach((function(e){return e.destroy()})),this.widgets=[]}},{key:"queryElements",value:function(e){return"HTMLSelectElement"===l(e)?[e]:"NodeList"===l(e)?[].slice.call(e):"String"===l(e)?[].slice.call(document.querySelectorAll(e)):[]}},{key:"rebuild",value:function(){this.destroy(),this.build()}},{key:"unwrap",value:function(e){var t=e.parentNode,s=t.parentNode;s.insertBefore(e,t),s.removeChild(t)}}]),t}()}())(".star-rating")},23:()=>{if(document.getElementById("map")){window.map=null,async function(){await ymaps3.ready;const e={center:window.innerWidth>768?[30.29070872801772,59.96487327442857]:[30.285804994973198,59.96628435583354],zoom:15},t={center:[30.286780500000003,59.96677256415152],zoom:15},{YMap:s,YMapDefaultSchemeLayer:i,YMapDefaultFeaturesLayer:n,YMapMarker:r}=ymaps3,a=new s(document.getElementById("map"),{location:e,behaviors:["drag"]});a.addChild(new i),a.addChild(new n);const o=document.createElement("img");o.className="marker",o.src="../app/img/icons/pin.svg",o.onclick=()=>a.update({location:{...t,duration:400}}),a.addChild(new r({coordinates:t.center},o))}()}},807:e=>{var t=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t}},t={};function s(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";let e=!0;const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),t),e=!1,setTimeout((function(){e=!0}),t))},i=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(document.documentElement.classList.add("lock"),e=!1,setTimeout((function(){e=!0}),t))},n=()=>{i(),document.documentElement.classList.add("_menu-opened")},r=()=>{t(),document.documentElement.classList.remove("_menu-opened")},a=(e,t)=>{for(var s=0;s<e.length;s++)e[s].classList.remove(t)},o=e=>window.innerWidth>768?.005208335*window.innerWidth*e:100/390*(.1*window.innerWidth)*e,l=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;e.classList.contains("_slide")||(e.classList.add("_slide"),e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=`${e.offsetHeight}px`,e.offsetHeight,e.style.overflow="hidden",e.style.height=s?`${s}rem`:"0",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,window.setTimeout((()=>{e.hidden=!s,!s&&e.style.removeProperty("height"),e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),!s&&e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideUpDone",{detail:{target:e}}))}),t))},c=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(!e.classList.contains("_slide")){e.classList.add("_slide"),e.hidden=!e.hidden&&null,s&&e.style.removeProperty("height");let i=e.offsetHeight;e.style.overflow="hidden",e.style.height=s?`${s}rem`:"0",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,e.offsetHeight,e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=i+"px",e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),window.setTimeout((()=>{e.style.removeProperty("height"),e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideDownDone",{detail:{target:e}}))}),t)}},d=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;return e.hidden?c(e,t):l(e,t)},u=(e,t)=>{const s=Array.from(e).filter((function(e,s,i){if(e.dataset[t])return e.dataset[t].split(",")[0]}));if(s.length){const e=[];s.forEach((s=>{const i={},n=s.dataset[t].split(",");i.value=n[0],i.type=n[1]?n[1].trim():"max",i.item=s,e.push(i)}));let i=e.map((function(e){return"("+e.type+"-width: "+e.value+"px),"+e.value+","+e.type}));i=(e=>e.filter((function(e,t,s){return s.indexOf(e)===t})))(i);const n=[];if(i.length)return i.forEach((t=>{const s=t.split(","),i=s[1],r=s[2],a=window.matchMedia(s[0]),o=e.filter((function(e){if(e.value===i&&e.type===r)return!0}));n.push({itemsArray:o,matchMedia:a})})),n}};let p=!1;setTimeout((()=>{if(p){let e=new Event("windowScroll");window.addEventListener("scroll",(function(t){document.dispatchEvent(e)}))}}),0);let h={getErrors(e){let t=0,s=e.querySelectorAll("*[data-required]");return s.length&&s.forEach((e=>{null===e.offsetParent&&"SELECT"!==e.tagName||e.disabled||(t+=this.validateInput(e))})),t},validateInput(e){let t=0;return"email"===e.dataset.required?(e.value=e.value.replace(" ",""),this.emailTest(e)?(this.addError(e),t++):this.removeError(e)):("checkbox"!==e.type||e.checked)&&e.value.trim()?this.removeError(e):(this.addError(e),t++),t},addError(e){e.classList.add("_form-error"),e.parentElement.classList.add("_form-error");let t=e.parentElement.querySelector(".form__error");t&&e.parentElement.removeChild(t),e.dataset.error&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="form__error">${e.dataset.error}</div>`)},removeError(e){e.classList.remove("_form-error"),e.parentElement.classList.remove("_form-error"),e.parentElement.querySelector(".form__error")&&e.parentElement.removeChild(e.parentElement.querySelector(".form__error"))},formClean(e){e.reset(),setTimeout((()=>{let t=e.querySelectorAll("input,textarea");for(let e=0;e<t.length;e++){const s=t[e];s.parentElement.classList.remove("_form-focus"),s.classList.remove("_form-focus"),h.removeError(s)}let s=e.querySelectorAll(".checkbox__input");if(s.length>0)for(let e=0;e<s.length;e++){s[e].checked=!1}}),0)},emailTest:e=>!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)};function m(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function f(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:m(t[s])&&m(e[s])&&Object.keys(t[s]).length>0&&f(e[s],t[s])}))}const v={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function g(){const e="undefined"!=typeof document?document:{};return f(e,v),e}const b={document:v,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function y(){const e="undefined"!=typeof window?window:{};return f(e,b),e}function w(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function E(){return Date.now()}function S(e,t){void 0===t&&(t="x");const s=y();let i,n,r;const a=function(e){const t=y();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new s.WebKitCSSMatrix("none"===n?"":n)):(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(",")),"x"===t&&(n=s.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=s.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0}function x(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function _(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const n=i<0||arguments.length<=i?void 0:arguments[i];if(null!=n&&(s=n,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(n)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],r=Object.getOwnPropertyDescriptor(n,i);void 0!==r&&r.enumerable&&(x(e[i])&&x(n[i])?n[i].__swiper__?e[i]=n[i]:_(e[i],n[i]):!x(e[i])&&x(n[i])?(e[i]={},n[i].__swiper__?e[i]=n[i]:_(e[i],n[i])):e[i]=n[i])}}}var s;return e}function L(e,t,s){e.style.setProperty(t,s)}function T(e){let{swiper:t,targetPosition:s,side:i}=e;const n=y(),r=-t.translate;let a,o=null;const l=t.params.speed;t.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(t.cssModeFrameID);const c=s>r?"next":"prev",d=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{a=(new Date).getTime(),null===o&&(o=a);const e=Math.max(Math.min((a-o)/l,1),0),c=.5-Math.cos(e*Math.PI)/2;let p=r+c*(s-r);if(d(p,s)&&(p=s),t.wrapperEl.scrollTo({[i]:p}),d(p,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:p})})),void n.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=n.requestAnimationFrame(u)};u()}function A(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function C(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function k(e){try{return void console.warn(e)}catch(e){}}function O(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function M(e,t){return y().getComputedStyle(e,null).getPropertyValue(t)}function P(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function I(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function q(e,t,s){const i=y();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let z,$,D;function N(){return z||(z=function(){const e=y(),t=g();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),z}function W(e){return void 0===e&&(e={}),$||($=function(e){let{userAgent:t}=void 0===e?{}:e;const s=N(),i=y(),n=i.navigator.platform,r=t||i.navigator.userAgent,a={ios:!1,android:!1},o=i.screen.width,l=i.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const u=r.match(/(iPod)(.*OS\s([\d_]+))?/),p=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===n;let m="MacIntel"===n;return!d&&m&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),m=!1),c&&!h&&(a.os="android",a.android=!0),(d||p||u)&&(a.os="ios",a.ios=!0),a}(e)),$}function V(){return D||(D=function(){const e=y();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),D}var H={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const n=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][n](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function n(){i.off(e,n),n.__emitterProxy&&delete n.__emitterProxy;for(var s=arguments.length,r=new Array(s),a=0;a<s;a++)r[a]=arguments[a];t.apply(i,r)}return n.__emitterProxy=t,i.on(e,n,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,n)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(n,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),i=e):(t=r[0].events,s=r[0].data,i=r[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const B=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},G=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},R=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),n=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=n,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&G(e,s)}))}const r=n+i-1;if(e.params.rewind||e.params.loop)for(let i=n-t;i<=r+t;i+=1){const t=(i%s+s)%s;(t<n||t>r)&&G(e,t)}else for(let i=Math.max(n-t,0);i<=Math.min(r+t,s-1);i+=1)i!==n&&(i>r||i<n)&&G(e,i)};var F={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(M(i,"padding-left")||0,10)-parseInt(M(i,"padding-right")||0,10),s=s-parseInt(M(i,"padding-top")||0,10)-parseInt(M(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:n,size:r,rtlTranslate:a,wrongRTL:o}=e,l=e.virtual&&s.virtual.enabled,c=l?e.virtual.slides.length:e.slides.length,d=C(n,`.${e.params.slideClass}, swiper-slide`),u=l?e.virtual.slides.length:d.length;let p=[];const h=[],m=[];let f=s.slidesOffsetBefore;"function"==typeof f&&(f=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const g=e.snapGrid.length,b=e.slidesGrid.length;let y=s.spaceBetween,w=-f,E=0,S=0;if(void 0===r)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*r:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,d.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(L(i,"--swiper-centered-offset-before",""),L(i,"--swiper-centered-offset-after",""));const x=s.grid&&s.grid.rows>1&&e.grid;let _;x?e.grid.initSlides(d):e.grid&&e.grid.unsetSlides();const T="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let n;if(_=0,d[i]&&(n=d[i]),x&&e.grid.updateSlide(i,n,d),!d[i]||"none"!==M(n,"display")){if("auto"===s.slidesPerView){T&&(d[i].style[e.getDirectionLabel("width")]="");const r=getComputedStyle(n),a=n.style.transform,o=n.style.webkitTransform;if(a&&(n.style.transform="none"),o&&(n.style.webkitTransform="none"),s.roundLengths)_=e.isHorizontal()?q(n,"width",!0):q(n,"height",!0);else{const e=t(r,"width"),s=t(r,"padding-left"),i=t(r,"padding-right"),a=t(r,"margin-left"),o=t(r,"margin-right"),l=r.getPropertyValue("box-sizing");if(l&&"border-box"===l)_=e+a+o;else{const{clientWidth:t,offsetWidth:r}=n;_=e+s+i+a+o+(r-t)}}a&&(n.style.transform=a),o&&(n.style.webkitTransform=o),s.roundLengths&&(_=Math.floor(_))}else _=(r-(s.slidesPerView-1)*y)/s.slidesPerView,s.roundLengths&&(_=Math.floor(_)),d[i]&&(d[i].style[e.getDirectionLabel("width")]=`${_}px`);d[i]&&(d[i].swiperSlideSize=_),m.push(_),s.centeredSlides?(w=w+_/2+E/2+y,0===E&&0!==i&&(w=w-r/2-y),0===i&&(w=w-r/2-y),Math.abs(w)<.001&&(w=0),s.roundLengths&&(w=Math.floor(w)),S%s.slidesPerGroup==0&&p.push(w),h.push(w)):(s.roundLengths&&(w=Math.floor(w)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&p.push(w),h.push(w),w=w+_+y),e.virtualSize+=_+y,E=_,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+v,a&&o&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+y}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),x&&e.grid.updateWrapperSize(_,p),!s.centeredSlides){const t=[];for(let i=0;i<p.length;i+=1){let n=p[i];s.roundLengths&&(n=Math.floor(n)),p[i]<=e.virtualSize-r&&t.push(n)}p=t,Math.floor(e.virtualSize-r)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-r)}if(l&&s.loop){const t=m[0]+y;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),n=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)p.push(p[p.length-1]+n)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&p.push(p[p.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===p.length&&(p=[0]),0!==y){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");d.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==d.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e-r;p=p.map((e=>e<=0?-f:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;if(m.forEach((t=>{e+=t+(y||0)})),e-=y,e<r){const t=(r-e)/2;p.forEach(((e,s)=>{p[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:d,snapGrid:p,slidesGrid:h,slidesSizesGrid:m}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){L(i,"--swiper-centered-offset-before",-p[0]+"px"),L(i,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),p.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),!(l||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);u<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let n,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(n=0;n<Math.ceil(t.params.slidesPerView);n+=1){const e=t.activeIndex+n;if(e>t.slides.length&&!i)break;s.push(a(e))}else s.push(a(t.activeIndex));for(n=0;n<s.length;n+=1)if(void 0!==s[n]){const e=s[n].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:n,snapGrid:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;n&&(a=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=s.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<i.length;e+=1){const l=i[e];let c=l.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(c-=i[0].swiperSlideOffset);const d=(a+(s.centeredSlides?t.minTranslate():0)-c)/(l.swiperSlideSize+o),u=(a-r[0]+(s.centeredSlides?t.minTranslate():0)-c)/(l.swiperSlideSize+o),p=-(a-c),h=p+t.slidesSizesGrid[e],m=p>=0&&p<=t.size-t.slidesSizesGrid[e];(p>=0&&p<t.size-1||h>1&&h<=t.size||p<=0&&h>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),m&&i[e].classList.add(s.slideFullyVisibleClass),l.progress=n?-d:d,l.originalProgress=n?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:n,isBeginning:r,isEnd:a,progressLoop:o}=t;const l=r,c=a;if(0===i)n=0,r=!0,a=!0;else{n=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;r=s||n<=0,a=o||n>=1,s&&(n=0),o&&(n=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),n=t.slidesGrid[s],r=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=n?(l-n)/a:(l+a-r)/a,o>1&&(o-=1)}Object.assign(t,{progress:n,progressLoop:o,isBeginning:r,isEnd:a}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!l&&t.emit("reachBeginning toEdge"),a&&!c&&t.emit("reachEnd toEdge"),(l&&!r||c&&!a)&&t.emit("fromEdge"),t.emit("progress",n)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:n}=e,r=e.virtual&&s.virtual.enabled,a=e.grid&&s.grid&&s.grid.rows>1,o=e=>C(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let l,c,d;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),r)if(s.loop){let t=n-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${t}"]`)}else l=o(`[data-swiper-slide-index="${n}"]`);else a?(l=t.filter((e=>e.column===n))[0],d=t.filter((e=>e.column===n+1))[0],c=t.filter((e=>e.column===n-1))[0]):l=t[n];l&&(l.classList.add(s.slideActiveClass),a?(d&&d.classList.add(s.slideNextClass),c&&c.classList.add(s.slidePrevClass)):(d=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(l,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!d&&(d=t[0]),d&&d.classList.add(s.slideNextClass),c=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(l,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!c&&(c=t[t.length-1]),c&&c.classList.add(s.slidePrevClass))),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:n,activeIndex:r,realIndex:a,snapIndex:o}=t;let l,c=e;const d=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===c&&(c=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let n;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?n=e:i>=t[e]&&i<t[e+1]&&(n=e+1):i>=t[e]&&(n=e);return s.normalizeSlideIndex&&(n<0||void 0===n)&&(n=0),n}(t)),i.indexOf(s)>=0)l=i.indexOf(s);else{const e=Math.min(n.slidesPerGroupSkip,c);l=e+Math.floor((c-e)/n.slidesPerGroup)}if(l>=i.length&&(l=i.length-1),c===r&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(c===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=d(c));const u=t.grid&&n.grid&&n.grid.rows>1;let p;if(t.virtual&&n.virtual.enabled&&n.loop)p=d(c);else if(u){const e=t.slides.filter((e=>e.column===c))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),p=Math.floor(s/n.grid.rows)}else if(t.slides[c]){const e=t.slides[c].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):c}else p=c;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:p,previousIndex:r,activeIndex:c}),t.initialized&&R(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let n=e.closest(`.${i.slideClass}, swiper-slide`);!n&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!n&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(n=e)}));let r,a=!1;if(n)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===n){a=!0,r=e;break}if(!n||!a)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=n,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var j={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:n}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let r=S(n,e);return r+=this.cssOverflowAdjustment(),s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:n,wrapperEl:r,progress:a}=s;let o,l=0,c=0;s.isHorizontal()?l=i?-e:e:c=e,n.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?l:c,n.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-l:-c:n.virtualTranslate||(s.isHorizontal()?l-=s.cssOverflowAdjustment():c-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=s.maxTranslate()-s.minTranslate();o=0===d?0:(e-s.minTranslate())/d,o!==a&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const r=this,{params:a,wrapperEl:o}=r;if(r.animating&&a.preventInteractionOnTransition)return!1;const l=r.minTranslate(),c=r.maxTranslate();let d;if(d=i&&e>l?l:i&&e<c?c:e,r.updateProgress(d),a.cssMode){const e=r.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return T({swiper:r,targetPosition:-d,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(d),s&&(r.emit("beforeTransitionStart",t,n),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(d),s&&(r.emit("beforeTransitionStart",t,n),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function Y(e){let{swiper:t,runCallbacks:s,direction:i,step:n}=e;const{activeIndex:r,previousIndex:a}=t;let o=i;if(o||(o=r>a?"next":r<a?"prev":"reset"),t.emit(`transition${n}`),s&&r!==a){if("reset"===o)return void t.emit(`slideResetTransition${n}`);t.emit(`slideChangeTransition${n}`),"next"===o?t.emit(`slideNextTransition${n}`):t.emit(`slidePrevTransition${n}`)}}var X={slideTo:function(e,t,s,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:p,wrapperEl:h,enabled:m}=r;if(r.animating&&o.preventInteractionOnTransition||!m&&!i&&!n)return!1;const f=Math.min(r.params.slidesPerGroupSkip,a);let v=f+Math.floor((a-f)/r.params.slidesPerGroup);v>=l.length&&(v=l.length-1);const g=-l[v];if(o.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*g),s=Math.floor(100*c[e]),i=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=s&&t<i-(i-s)/2?a=e:t>=s&&t<i&&(a=e+1):t>=s&&(a=e)}if(r.initialized&&a!==u){if(!r.allowSlideNext&&(p?g>r.translate&&g>r.minTranslate():g<r.translate&&g<r.minTranslate()))return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(u||0)!==a)return!1}let b;if(a!==(d||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(g),b=a>u?"next":a<u?"prev":"reset",p&&-g===r.translate||!p&&g===r.translate)return r.updateActiveIndex(a),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!==b&&(r.transitionStart(s,b),r.transitionEnd(s,b)),!1;if(o.cssMode){const e=r.isHorizontal(),s=p?g:-g;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),t&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return T({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(a),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(s,b),0===t?r.transitionEnd(s,b):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,b))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const n=this,r=n.grid&&n.params.grid&&n.params.grid.rows>1;let a=e;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)a+=n.virtual.slidesBefore;else{let e;if(r){const t=a*n.params.grid.rows;e=n.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=n.getSlideIndexByData(a);const t=r?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:s}=n.params;let i=n.params.slidesPerView;"auto"===i?i=n.slidesPerViewDynamic():(i=Math.ceil(parseFloat(n.params.slidesPerView,10)),s&&i%2==0&&(i+=1));let o=t-e<i;if(s&&(o=o||e<Math.ceil(i/2)),o){const i=s?e<n.activeIndex?"prev":"next":e-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?n.realIndex:void 0})}if(r){const e=a*n.params.grid.rows;a=n.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else a=n.getSlideIndexByData(a)}return requestAnimationFrame((()=>{n.slideTo(a,t,s,i)})),n},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:n,params:r,animating:a}=i;if(!n)return i;let o=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(o=Math.max(i.slidesPerViewDynamic("current",!0),1));const l=i.activeIndex<r.slidesPerGroupSkip?1:o,c=i.virtual&&r.virtual.enabled;if(r.loop){if(a&&!c&&r.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+l,e,t,s)})),!0}return r.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+l,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:n,snapGrid:r,slidesGrid:a,rtlTranslate:o,enabled:l,animating:c}=i;if(!l)return i;const d=i.virtual&&n.virtual.enabled;if(n.loop){if(c&&!d&&n.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=u(o?i.translate:-i.translate),h=r.map((e=>u(e)));let m=r[h.indexOf(p)-1];if(void 0===m&&n.cssMode){let e;r.forEach(((t,s)=>{p>=t&&(e=s)})),void 0!==e&&(m=r[e>0?e-1:e])}let f=0;if(void 0!==m&&(f=a.indexOf(m),f<0&&(f=i.activeIndex-1),"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),n.rewind&&i.isBeginning){const n=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(n,e,t,s)}return n.loop&&0===i.activeIndex&&n.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const n=this;let r=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,r),o=a+Math.floor((r-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const e=n.snapGrid[o];l-e>(n.snapGrid[o+1]-e)*i&&(r+=n.params.slidesPerGroup)}else{const e=n.snapGrid[o-1];l-e<=(n.snapGrid[o]-e)*i&&(r-=n.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,n.slidesGrid.length-1),n.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let n,r=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;n=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-i/2||r>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),r=e.getSlideIndex(C(s,`${a}[data-swiper-slide-index="${n}"]`)[0]),w((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-i?(e.loopFix(),r=e.getSlideIndex(C(s,`${a}[data-swiper-slide-index="${n}"]`)[0]),w((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};var U={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const n=()=>{C(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},r=t.grid&&s.grid&&s.grid.rows>1,a=s.slidesPerGroup*(r?s.grid.rows:1),o=t.slides.length%a!=0,l=r&&t.slides.length%s.grid.rows!=0,c=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?O("swiper-slide",[s.slideBlankClass]):O("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(o){if(s.loopAddBlankSlides){c(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()}else k("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(l){if(s.loopAddBlankSlides){c(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else k("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:n,activeSlideIndex:r,byController:a,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:p,params:h}=l,{centeredSlides:m}=h;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&h.virtual.enabled)return s&&(h.centeredSlides||0!==l.snapIndex?h.centeredSlides&&l.snapIndex<h.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let f=h.slidesPerView;"auto"===f?f=l.slidesPerViewDynamic():(f=Math.ceil(parseFloat(h.slidesPerView,10)),m&&f%2==0&&(f+=1));const v=h.slidesPerGroupAuto?f:h.slidesPerGroup;let g=v;g%v!=0&&(g+=v-g%v),g+=h.loopAdditionalSlides,l.loopedSlides=g;const b=l.grid&&h.grid&&h.grid.rows>1;c.length<f+g?k("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&k("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],w=[];let E=l.activeIndex;void 0===r?r=l.getSlideIndex(c.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):E=r;const S="next"===i||!i,x="prev"===i||!i;let _=0,L=0;const T=b?Math.ceil(c.length/h.grid.rows):c.length,A=(b?c[r].column:r)+(m&&void 0===n?-f/2+.5:0);if(A<g){_=Math.max(g-A,v);for(let e=0;e<g-A;e+=1){const t=e-Math.floor(e/T)*T;if(b){const e=T-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&y.push(t)}else y.push(T-t-1)}}else if(A+f>T-g){L=Math.max(A-(T-2*g),v);for(let e=0;e<L;e+=1){const t=e-Math.floor(e/T)*T;b?c.forEach(((e,s)=>{e.column===t&&w.push(s)})):w.push(t)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),x&&y.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),S&&w.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===h.slidesPerView?l.updateSlides():b&&(y.length>0&&x||w.length>0&&S)&&l.slides.forEach(((e,t)=>{l.grid.updateSlide(t,e,l.slides)})),h.watchSlidesProgress&&l.updateSlidesOffset(),s)if(y.length>0&&x){if(void 0===t){const e=l.slidesGrid[E],t=l.slidesGrid[E+_]-e;o?l.setTranslate(l.translate-t):(l.slideTo(E+_,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else if(n){const e=b?y.length/h.grid.rows:y.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(w.length>0&&S)if(void 0===t){const e=l.slidesGrid[E],t=l.slidesGrid[E-L]-e;o?l.setTranslate(l.translate-t):(l.slideTo(E-L,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else{const e=b?w.length/h.grid.rows:w.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:n,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&s})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===h.slidesPerView&&s})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function K(e,t,s){const i=y(),{params:n}=e,r=n.edgeSwipeDetection,a=n.edgeSwipeThreshold;return!r||!(s<=a||s>=i.innerWidth-a)||"prevent"===r&&(t.preventDefault(),!0)}function Q(e){const t=this,s=g();let i=e;i.originalEvent&&(i=i.originalEvent);const n=t.touchEventsData;if("pointerdown"===i.type){if(null!==n.pointerId&&n.pointerId!==i.pointerId)return;n.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(n.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void K(t,i,i.targetTouches[0].pageX);const{params:r,touches:a,enabled:o}=t;if(!o)return;if(!r.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let l=i.target;if("wrapper"===r.touchEventsTarget&&!t.wrapperEl.contains(l))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(n.isTouched&&n.isMoved)return;const c=!!r.noSwipingClass&&""!==r.noSwipingClass,d=i.composedPath?i.composedPath():i.path;c&&i.target&&i.target.shadowRoot&&d&&(l=d[0]);const u=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,p=!(!i.target||!i.target.shadowRoot);if(r.noSwiping&&(p?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===g()||s===y())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(u,l):l.closest(u)))return void(t.allowClick=!0);if(r.swipeHandler&&!l.closest(r.swipeHandler))return;a.currentX=i.pageX,a.currentY=i.pageY;const h=a.currentX,m=a.currentY;if(!K(t,i,h))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=h,a.startY=m,n.touchStartTime=E(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1);let f=!0;l.matches(n.focusableElements)&&(f=!1,"SELECT"===l.nodeName&&(n.isTouched=!1)),s.activeElement&&s.activeElement.matches(n.focusableElements)&&s.activeElement!==l&&s.activeElement.blur();const v=f&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!v||l.isContentEditable||i.preventDefault(),r.freeMode&&r.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function Z(e){const t=g(),s=this,i=s.touchEventsData,{params:n,touches:r,rtlTranslate:a,enabled:o}=s;if(!o)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let l,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==i.touchId)return;if(c.pointerId!==i.pointerId)return}if("touchmove"===c.type){if(l=[...c.changedTouches].filter((e=>e.identifier===i.touchId))[0],!l||l.identifier!==i.touchId)return}else l=c;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",c));const d=l.pageX,u=l.pageY;if(c.preventedByNestedSwiper)return r.startX=d,void(r.startY=u);if(!s.allowTouchMove)return c.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u}),i.touchStartTime=E()));if(n.touchReleaseOnEdges&&!n.loop)if(s.isVertical()){if(u<r.startY&&s.translate<=s.maxTranslate()||u>r.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(d<r.startX&&s.translate<=s.maxTranslate()||d>r.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",c),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=u;const p=r.currentX-r.startX,h=r.currentY-r.startY;if(s.params.threshold&&Math.sqrt(p**2+h**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&r.currentY===r.startY||s.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:p*p+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(p))/Math.PI,i.isScrolling=s.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",c),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!n.cssMode&&c.cancelable&&c.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&c.stopPropagation();let m=s.isHorizontal()?p:h,f=s.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;n.oneWayMovement&&(m=Math.abs(m)*(a?1:-1),f=Math.abs(f)*(a?1:-1)),r.diff=m,m*=n.touchRatio,a&&(m=-m,f=-f);const v=s.touchesDirection;s.swipeDirection=m>0?"prev":"next",s.touchesDirection=f>0?"prev":"next";const b=s.params.loop&&!n.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(b&&y&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!n.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",c)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&v!==s.touchesDirection&&b&&y&&Math.abs(m)>=1)return Object.assign(r,{startX:d,startY:u,currentX:d,currentY:u,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=m+i.startTranslate;let w=!0,S=n.resistanceRatio;if(n.touchReleaseOnEdges&&(S=0),m>0?(b&&y&&i.allowThresholdMove&&i.currentTranslate>(n.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(w=!1,n.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+m)**S))):m<0&&(b&&y&&i.allowThresholdMove&&i.currentTranslate<(n.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===n.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(w=!1,n.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-m)**S))),w&&(c.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),n.threshold>0){if(!(Math.abs(m)>n.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=s.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&s.freeMode||n.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function J(e){const t=this,s=t.touchEventsData;let i,n=e;n.originalEvent&&(n=n.originalEvent);if("touchend"===n.type||"touchcancel"===n.type){if(i=[...n.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(n.pointerId!==s.pointerId)return;i=n}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(n.type)){if(!(["pointercancel","contextmenu"].includes(n.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:r,touches:a,rtlTranslate:o,slidesGrid:l,enabled:c}=t;if(!c)return;if(!r.simulateTouch&&"mouse"===n.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",n),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const d=E(),u=d-s.touchStartTime;if(t.allowClick){const e=n.path||n.composedPath&&n.composedPath();t.updateClickedSlide(e&&e[0]||n.target,e),t.emit("tap click",n),u<300&&d-s.lastClickTime<300&&t.emit("doubleTap doubleClick",n)}if(s.lastClickTime=E(),w((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===a.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let p;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,p=r.followFinger?o?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:p});let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==l[e+t]?p>=l[e]&&p<l[e+t]&&(h=e,m=l[e+t]-l[e]):p>=l[e]&&(h=e,m=l[l.length-1]-l[l.length-2])}let f=null,v=null;r.rewind&&(t.isBeginning?v=r.virtual&&r.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const g=(p-l[h])/m,b=h<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(u>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?f:h+b):t.slideTo(h)),"prev"===t.swipeDirection&&(g>1-r.longSwipesRatio?t.slideTo(h+b):null!==v&&g<0&&Math.abs(g)>r.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(n.target===t.navigation.nextEl||n.target===t.navigation.prevEl)?n.target===t.navigation.nextEl?t.slideTo(h+b):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==f?f:h+b),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h))}}function ee(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:n,snapGrid:r}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=n,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function te(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function se(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let n;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();n=0===r?0:(e.translate-e.minTranslate())/r,n!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ie(e){const t=this;B(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function ne(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const re=(e,t)=>{const s=g(),{params:i,el:n,wrapperEl:r,device:a}=e,o=!!i.nested,l="on"===t?"addEventListener":"removeEventListener",c=t;s[l]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),n[l]("touchstart",e.onTouchStart,{passive:!1}),n[l]("pointerdown",e.onTouchStart,{passive:!1}),s[l]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[l]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[l]("touchend",e.onTouchEnd,{passive:!0}),s[l]("pointerup",e.onTouchEnd,{passive:!0}),s[l]("pointercancel",e.onTouchEnd,{passive:!0}),s[l]("touchcancel",e.onTouchEnd,{passive:!0}),s[l]("pointerout",e.onTouchEnd,{passive:!0}),s[l]("pointerleave",e.onTouchEnd,{passive:!0}),s[l]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&n[l]("click",e.onClick,!0),i.cssMode&&r[l]("scroll",e.onScroll),i.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",ee,!0):e[c]("observerUpdate",ee,!0),n[l]("load",e.onLoad,{capture:!0})};const ae=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var oe={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function le(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],n=s[i];"object"==typeof n&&null!==n?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in n?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),_(t,s)):_(t,s)):_(t,s)}}const ce={eventsEmitter:H,update:F,translate:j,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),Y({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),Y({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:X,loop:U,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=Q.bind(e),e.onTouchMove=Z.bind(e),e.onTouchEnd=J.bind(e),e.onDocumentTouchStart=ne.bind(e),t.cssMode&&(e.onScroll=se.bind(e)),e.onClick=te.bind(e),e.onLoad=ie.bind(e),re(e,"on")},detachEvents:function(){re(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:n}=e,r=i.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const a=e.getBreakpoint(r,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const o=(a in r?r[a]:void 0)||e.originalParams,l=ae(e,i),c=ae(e,o),d=i.enabled;l&&!c?(n.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!l&&c&&(n.classList.add(`${i.containerModifierClass}grid`),(o.grid.fill&&"column"===o.grid.fill||!o.grid.fill&&"column"===i.grid.fill)&&n.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===o[t])return;const s=i[t]&&i[t].enabled,n=o[t]&&o[t].enabled;s&&!n&&e[t].disable(),!s&&n&&e[t].enable()}));const u=o.direction&&o.direction!==i.direction,p=i.loop&&(o.slidesPerView!==i.slidesPerView||u),h=i.loop;u&&s&&e.changeDirection(),_(e.params,o);const m=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),d&&!m?e.disable():!d&&m&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",o),s&&(p?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&f?(e.loopCreate(t),e.updateSlides()):h&&!f&&e.loopDestroy()),e.emit("breakpoint",o)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const n=y(),r="window"===t?n.innerHeight:s.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:r,value:o}=a[e];"window"===t?n.matchMedia(`(min-width: ${o}px)`).matches&&(i=r):o<=s.clientWidth&&(i=r)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:n,device:r}=e,a=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...a),n.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},de={};class ue{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),n=0;n<s;n++)i[n]=arguments[n];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=_({},t),e&&!t.el&&(t.el=e);const r=g();if(t.el&&"string"==typeof t.el&&r.querySelectorAll(t.el).length>1){const e=[];return r.querySelectorAll(t.el).forEach((s=>{const i=_({},t,{el:s});e.push(new ue(i))})),e}const a=this;a.__swiper__=!0,a.support=N(),a.device=W({userAgent:t.userAgent}),a.browser=V(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const o={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:le(t,o),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const l=_({},oe,o);return a.params=_({},l,de,t),a.originalParams=_({},a.params),a.passedParams=_({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=P(C(t,`.${s.slideClass}, swiper-slide`)[0]);return P(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=C(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),n=(s.maxTranslate()-i)*e+i;s.translateTo(n,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:n,slidesSizesGrid:r,size:a,activeIndex:o}=this;let l=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[o]?i[o].swiperSlideSize:0;for(let s=o+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,l+=1,t>a&&(e=!0));for(let s=o-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<i.length;e+=1){(t?n[e]+r[e]-n[o]<a:n[e]-n[o]<a)&&(l+=1)}else for(let e=o-1;e>=0;e-=1){n[o]-n[e]<a&&(l+=1)}return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let n;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&B(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;n=e.slideTo(t.length-1,0,!1,!0)}else n=e.slideTo(e.activeIndex,0,!1,!0);n||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let n=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return C(s,i())[0]})();return!n&&t.params.createElements&&(n=O("div",t.params.wrapperClass),s.append(n),C(s,`.${t.params.slideClass}`).forEach((e=>{n.append(e)}))),Object.assign(t,{el:s,wrapperEl:n,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:n,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===M(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===M(s,"direction")),wrongRTL:"-webkit-box"===M(n,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?B(t,e):e.addEventListener("load",(e=>{B(t,e.target)}))})),R(t),t.initialized=!0,R(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:n,wrapperEl:r,slides:a}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),n.removeAttribute("style"),r.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){_(de,e)}static get extendedDefaults(){return de}static get defaults(){return oe}static installModule(e){ue.prototype.__modules__||(ue.prototype.__modules__=[]);const t=ue.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ue.installModule(e))),ue):(ue.installModule(e),ue)}}function pe(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((n=>{if(!s[n]&&!0===s.auto){let r=C(e.el,`.${i[n]}`)[0];r||(r=O("div",i[n]),r.className=i[n],e.el.append(r)),s[n]=r,t[n]=r}})),s}function he(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const r=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function a(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function o(e,s){const i=t.params.navigation;(e=r(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function l(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return o(s,!1),void o(e,!1);o(s,t.isBeginning&&!t.params.rewind),o(e,t.isEnd&&!t.params.rewind)}function c(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),n("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),n("navigationNext"))}function u(){const e=t.params.navigation;if(t.params.navigation=pe(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=a(e.nextEl),i=a(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=r(s),i=r(i);const n=(s,i)=>{s&&s.addEventListener("click","next"===i?d:c),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),i.forEach((e=>n(e,"prev")))}function p(){let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?d:c),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?h():(u(),l())})),i("toEdge fromEdge lock unlock",(()=>{l()})),i("destroy",(()=>{p()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=r(e),s=r(s),t.enabled?l():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:a}=t.navigation;i=r(i),a=r(a);const o=s.target;if(t.params.navigation.hideOnClick&&!a.includes(o)&&!i.includes(o)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===o||t.pagination.el.contains(o)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),n(!0===e?"navigationShow":"navigationHide"),[...i,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),u(),l()},disable:h,update:l,init:u,destroy:p})}function me(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function fe(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;const r="swiper-pagination";let a;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;const l=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function c(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function u(e){const s=e.target.closest(me(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=P(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function p(){const e=t.rtl,s=t.params.pagination;if(c())return;let i,r,u=t.pagination.el;u=l(u);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,r=t.previousSnapIndex):(r=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const n=t.pagination.bullets;let l,c,p;if(s.dynamicBullets&&(a=q(n[0],t.isHorizontal()?"width":"height",!0),u.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==r&&(o+=i-(r||0),o>s.dynamicMainBullets-1?o=s.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(i-o,0),c=l+(Math.min(n.length,s.dynamicMainBullets)-1),p=(c+l)/2),n.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),u.length>1)n.forEach((e=>{const n=P(e);n===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(n>=l&&n<=c&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),n===l&&d(e,"prev"),n===c&&d(e,"next"))}));else{const e=n[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&n.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=n[l],t=n[c];for(let e=l;e<=c;e+=1)n[e]&&n[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(n.length,s.dynamicMainBullets+4),r=(a*i-a)/2-p*a,o=e?"right":"left";n.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${r}px`}))}}u.forEach(((e,r)=>{if("fraction"===s.type&&(e.querySelectorAll(me(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(me(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(h)}))),"progressbar"===s.type){let n;n=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const r=(i+1)/h;let a=1,o=1;"horizontal"===n?a=r:o=r,e.querySelectorAll(me(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,h),0===r&&n("paginationRender",e)):(0===r&&n("paginationRender",e),n("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(c())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=l(i);let r="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?r+=e.renderBullet.call(t,s,e.bulletClass):r+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=r||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(me(e.bulletClass)))})),"custom"!==e.type&&n("paginationRender",i[0])}function m(){t.params.pagination=pe(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>I(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=l(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",u),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(c())return;let s=t.pagination.el;s&&(s=l(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",u))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=l(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?v():(m(),h(),p())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),i("snapIndexChange",(()=>{p()})),i("snapGridLengthChange",(()=>{h(),p()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=l(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{p()})),i("click",((e,s)=>{const i=s.target,r=l(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=r[0].classList.contains(t.params.pagination.hiddenClass);n(!0===e?"paginationShow":"paginationHide"),r.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const v=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=l(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=l(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),h(),p()},disable:v,render:h,update:p,init:m,destroy:f})}function ve(e,t){const s=A(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function ge(e){let{swiper:t,duration:s,transformElements:i,allSlides:n}=e;const{activeIndex:r}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=n?i:i.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0];return e.parentElement})(e):e;return t.getSlideIndex(s)===r})),e.forEach((e=>{!function(e,t){t&&e.addEventListener("transitionend",(function s(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",s))}))}(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function be(e){let{swiper:t,extendParams:s,on:i}=e;s({fadeEffect:{crossFade:!1}});!function(e){const{effect:t,swiper:s,on:i,setTranslate:n,setTransition:r,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:c}=e;let d;i("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),o&&o()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=a?a():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),i("setTranslate",(()=>{s.params.effect===t&&n()})),i("setTransition",((e,i)=>{s.params.effect===t&&r(i)})),i("transitionEnd",(()=>{if(s.params.effect===t&&l){if(!c||!c().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),l()}})),i("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(d=!0),requestAnimationFrame((()=>{d&&s.slides&&s.slides.length&&(n(),d=!1)})))}))}({effect:"fade",swiper:t,on:i,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let s=0;s<e.length;s+=1){const e=t.slides[s];let i=-e.swiperSlideOffset;t.params.virtualTranslate||(i-=t.translate);let n=0;t.isHorizontal()||(n=i,i=0);const r=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),a=ve(0,e);a.style.opacity=r,a.style.transform=`translate3d(${i}px, ${n}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>A(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),ge({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}Object.keys(ce).forEach((e=>{Object.keys(ce[e]).forEach((t=>{ue.prototype[t]=ce[e][t]}))})),ue.use([function(e){let{swiper:t,on:s,emit:i}=e;const n=y();let r=null,a=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},l=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==n.ResizeObserver?t&&!t.destroyed&&t.initialized&&(r=new ResizeObserver((e=>{a=n.requestAnimationFrame((()=>{const{width:s,height:i}=t;let n=s,r=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:a}=e;a&&a!==t.el||(n=i?i.width:(s[0]||s).inlineSize,r=i?i.height:(s[0]||s).blockSize)})),n===s&&r===i||o()}))})),r.observe(t.el)):(n.addEventListener("resize",o),n.addEventListener("orientationchange",l))})),s("destroy",(()=>{a&&n.cancelAnimationFrame(a),r&&r.unobserve&&t.el&&(r.unobserve(t.el),r=null),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",l)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;const r=[],a=y(),o=function(e,s){void 0===s&&(s={});const i=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void n("observerUpdate",e[0]);const s=function(){n("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(s):a.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),r.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=I(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{r.forEach((e=>{e.disconnect()})),r.splice(0,r.length)}))}]);let ye=null,we=null;const Ee=(e,t,s)=>{const i=e.slides;i.length&&t&&i.forEach((e=>{e.querySelector(s).innerHTML=`${t.querySelector(".swiper-pagination-bullet-active").innerHTML}`}))},Se=(e,t)=>{t&&e.el&&(t.innerHTML=`${e.el.querySelector(".swiper-pagination-bullet-active").innerHTML}`)},xe=(e,t)=>{if(e.slides.length>=4){const s=e.pagination.bullets,i=e.slides,n=e.realIndex;s.length?(a(s,"_revealed"),window.innerWidth<=768&&s[n].classList.add("_revealed"),s[n+1]&&s[n+1].classList.add("_revealed"),s[n+2]&&s[n+2].classList.add("_revealed"),4===t&&(window.innerWidth<=768&&s[n+3]?(e.pagination.el.parentElement.style.width="40rem",s[n+3].classList.add("_revealed")):window.innerWidth<=768&&!s[n+3]&&(e.pagination.el.parentElement.style.width="29rem")),window.innerWidth>768&&s[n+3]&&s[n+3].classList.add("_revealed"),window.innerWidth<=768&&(n===i.length-2||n===i.length-1)&&(s[i.length-3].classList.add("_revealed"),s[i.length-2].classList.add("_revealed"),s[i.length-1].classList.add("_revealed")),window.innerWidth>768&&n===i.length-1&&(s[0].classList.add("_revealed"),s[1].classList.add("_revealed"),s[2].classList.add("_revealed"))):window.innerWidth>768&&s.forEach((e=>{e.classList.contains("swiper-pagination-bullet-active")||e.classList.add("_revealed")}))}},_e=e=>{const t=Array.from(e.el.querySelectorAll(".swiper-slide"));a(t,"_revealed"),t.forEach(((e,s)=>{e.classList.contains("swiper-slide-active")&&(t[s].classList.add("_revealed"),window.innerWidth>768&&(t[s+1]&&t[s+1].classList.add("_revealed"),t[s+2]&&t[s+2].classList.add("_revealed"),document.querySelector(".catalog-page")&&t[s+3]&&t[s+3].classList.add("_revealed")))}))},Le=()=>{document.querySelector(".search-box__slider")&&new ue(".search-box__slider",{modules:[he,be],observer:!0,observeParents:!0,observeSlideChildren:!0,slidesPerView:1.5,spaceBetween:50,speed:700,loop:!0,navigation:{prevEl:".search-box__slider-nav .search-box__slider-arr_prev",nextEl:".search-box__slider-nav .search-box__slider-arr_next"},breakpoints:{768:{slidesPerView:1,effect:"fade"}}}),document.querySelector(".tabs.swiper")&&(window.innerWidth<=768&&!we?we=new ue(".tabs.swiper",{observer:!0,observeParents:!0,slidesPerView:"auto",spaceBetween:o(2.5),slideToClickedSlide:!0,slideClass:"tab",wrapperClass:"tabs-wrap"}):window.innerWidth>768&&we&&(we.destroy(),we=null))};window.addEventListener("load",(function(e){setTimeout((()=>{document.querySelector(".hero__slider")&&new ue(".hero__slider",{modules:[he,fe],observer:!0,observeParents:!0,autoHeight:!0,slidesPerView:1,speed:800,loop:!0,navigation:{prevEl:".hero .sl-nav__arrow_prev",nextEl:".hero .sl-nav__arrow_next"},pagination:{el:".hero__sl-control .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{direction:"vertical",slidesPerView:"auto"}},on:{init:e=>{const t=e.passedParams.spaceBetween,s=e.slides[0].clientHeight+t;e.el.style.height=s+"px",Ee(e,e.pagination.el,".slide-hero__number")},slideChange:e=>{Ee(e,e.pagination.el,".slide-hero__number"),xe(e)}}}),document.querySelectorAll(".shopify-section").length&&document.querySelectorAll(".shopify-section").forEach((e=>{const t=e.dataset.shopifySection;new ue(`[data-shopify-section="${t}"] .swiper`,{modules:[he,fe],slidesPerView:1.4,spaceBetween:65,speed:800,loop:!0,longSwipes:!1,navigation:{prevEl:`[data-shopify-section="${t}"] .sl-nav__arrow_prev`,nextEl:`[data-shopify-section="${t}"] .sl-nav__arrow_next`},pagination:{el:`[data-shopify-section="${t}"] .sl-pagination`,clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:document.querySelector(".catalog-page")?5:4,spaceBetween:document.querySelector(".catalog-page")?90:137}},on:{afterInit:e=>{Se(e.pagination,document.querySelector(`[data-shopify-section="${t}"] .shopify-section__number`)),xe(e),_e(e)},realIndexChange:e=>{Se(e.pagination,document.querySelector(`[data-shopify-section="${t}"] .shopify-section__number`)),xe(e)},slideChangeTransitionStart:e=>{_e(e)},touchMove:e=>{_e(e)}}})})),document.querySelector(".tests__slider")&&new ue(".tests__slider",{modules:[he,fe],observer:!0,observeParents:!0,slidesPerView:1,spaceBetween:30,speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".tests .sl-nav__arrow_prev",nextEl:".tests .sl-nav__arrow_next"},pagination:{el:".tests .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:1.01}},on:{afterInit:e=>{Se(e.pagination,document.querySelector(".tests__active-number")),xe(e,4)},slideChange:e=>{Se(e.pagination,document.querySelector(".tests__active-number"))},realIndexChange:e=>{xe(e,4)}}}),document.querySelector(".collections__slider")&&new ue(".collections__slider",{modules:[he,fe],observer:!0,observeParents:!0,speed:1e3,loop:!0,slidesPerView:1.6,spaceBetween:64,watchSlidesProgress:!0,watchSlidesVisibility:!0,resistance:!1,navigation:{prevEl:".collections .sl-nav__arrow_prev",nextEl:".collections .sl-nav__arrow_next"},pagination:{el:".collections .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:"auto",spaceBetween:"21%"}},on:{afterInit:e=>{Se(e.pagination,document.querySelector(".collections__active-number"))},slideChange:e=>{e.el.classList.contains("_slide")||e.el.classList.add("_slide"),Se(e.pagination,document.querySelector(".collections__active-number")),xe(e)}}}),document.querySelector(".categories__slider")&&(window.innerWidth<=768&&!ye?ye=new ue(".categories__slider",{modules:[he,fe],observer:!0,observeParents:!0,slidesPerView:2,spaceBetween:o(.8),speed:1e3,loop:!0,navigation:{prevEl:".categories .sl-nav__arrow_prev",nextEl:".categories .sl-nav__arrow_next"},pagination:{el:".categories .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1<10?"0":"")+(e+1)+"</span>"}},on:{afterInit:e=>{setTimeout((()=>{xe(e)}),0)},slideChangeTransitionStart:e=>{xe(e)}}}):window.innerWidth>768&&ye&&(ye.destroy(),ye=null)),document.querySelector(".reviews-product__slider")&&new ue(".reviews-product__slider",{modules:[he,fe],observer:!0,observeParents:!0,slidesPerView:1,spaceBetween:o(2),speed:700,loop:!0,watchSlidesProgress:!0,navigation:{prevEl:".reviews-product .sl-nav__arrow_prev",nextEl:".reviews-product .sl-nav__arrow_next"},pagination:{el:".reviews-product .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1<10?"0":"")+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:4}},on:{afterInit:e=>{Se(e.pagination,document.querySelector(".reviews-product__active-number")),setTimeout((()=>{xe(e,4)}),0)},slideChange:e=>{Se(e.pagination,document.querySelector(".reviews-product__active-number")),xe(e,4)}}}),Le()}),0)})),window.addEventListener("resize",Le);s(23);var Te=s(807);const Ae=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};const Ce="object"==typeof global&&global&&global.Object===Object&&global;var ke="object"==typeof self&&self&&self.Object===Object&&self;const Oe=Ce||ke||Function("return this")();const Me=function(){return Oe.Date.now()};var Pe=/\s/;const Ie=function(e){for(var t=e.length;t--&&Pe.test(e.charAt(t)););return t};var qe=/^\s+/;const ze=function(e){return e?e.slice(0,Ie(e)+1).replace(qe,""):e};const $e=Oe.Symbol;var De=Object.prototype,Ne=De.hasOwnProperty,We=De.toString,Ve=$e?$e.toStringTag:void 0;const He=function(e){var t=Ne.call(e,Ve),s=e[Ve];try{e[Ve]=void 0;var i=!0}catch(e){}var n=We.call(e);return i&&(t?e[Ve]=s:delete e[Ve]),n};var Be=Object.prototype.toString;const Ge=function(e){return Be.call(e)};var Re=$e?$e.toStringTag:void 0;const Fe=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Re&&Re in Object(e)?He(e):Ge(e)};const je=function(e){return null!=e&&"object"==typeof e};const Ye=function(e){return"symbol"==typeof e||je(e)&&"[object Symbol]"==Fe(e)};var Xe=/^[-+]0x[0-9a-f]+$/i,Ue=/^0b[01]+$/i,Ke=/^0o[0-7]+$/i,Qe=parseInt;const Ze=function(e){if("number"==typeof e)return e;if(Ye(e))return NaN;if(Ae(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ae(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=ze(e);var s=Ue.test(e);return s||Ke.test(e)?Qe(e.slice(2),s?2:8):Xe.test(e)?NaN:+e};var Je=Math.max,et=Math.min;const tt=function(e,t,s){var i,n,r,a,o,l,c=0,d=!1,u=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function h(t){var s=i,r=n;return i=n=void 0,c=t,a=e.apply(r,s)}function m(e){var s=e-l;return void 0===l||s>=t||s<0||u&&e-c>=r}function f(){var e=Me();if(m(e))return v(e);o=setTimeout(f,function(e){var s=t-(e-l);return u?et(s,r-(e-c)):s}(e))}function v(e){return o=void 0,p&&i?h(e):(i=n=void 0,a)}function g(){var e=Me(),s=m(e);if(i=arguments,n=this,l=e,s){if(void 0===o)return function(e){return c=e,o=setTimeout(f,t),d?h(e):a}(l);if(u)return clearTimeout(o),o=setTimeout(f,t),h(l)}return void 0===o&&(o=setTimeout(f,t)),a}return t=Ze(t)||0,Ae(s)&&(d=!!s.leading,r=(u="maxWait"in s)?Je(Ze(s.maxWait)||0,t):r,p="trailing"in s?!!s.trailing:p),g.cancel=function(){void 0!==o&&clearTimeout(o),c=0,i=l=n=o=void 0},g.flush=function(){return void 0===o?a:v(Me())},g};const st=function(e,t,s){var i=!0,n=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return Ae(s)&&(i="leading"in s?!!s.leading:i,n="trailing"in s?!!s.trailing:n),tt(e,t,{leading:i,maxWait:t,trailing:n})};var it=function(){return it=Object.assign||function(e){for(var t,s=1,i=arguments.length;s<i;s++)for(var n in t=arguments[s])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},it.apply(this,arguments)},nt=null,rt=null;function at(){if(null===nt){if("undefined"==typeof document)return nt=0;var e=document.body,t=document.createElement("div");t.classList.add("simplebar-hide-scrollbar"),e.appendChild(t);var s=t.getBoundingClientRect().right;e.removeChild(t),nt=s}return nt}function ot(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window}function lt(e){return e&&e.ownerDocument?e.ownerDocument:document}Te&&window.addEventListener("resize",(function(){rt!==window.devicePixelRatio&&(rt=window.devicePixelRatio,nt=null)}));var ct=function(e){return Array.prototype.reduce.call(e,(function(e,t){var s=t.name.match(/data-simplebar-(.+)/);if(s){var i=s[1].replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}));switch(t.value){case"true":e[i]=!0;break;case"false":e[i]=!1;break;case void 0:e[i]=!0;break;default:e[i]=t.value}}return e}),{})};function dt(e,t){var s;e&&(s=e.classList).add.apply(s,t.split(" "))}function ut(e,t){e&&t.split(" ").forEach((function(t){e.classList.remove(t)}))}function pt(e){return".".concat(e.split(" ").join("."))}var ht=Object.freeze({__proto__:null,getElementWindow:ot,getElementDocument:lt,getOptions:ct,addClasses:dt,removeClasses:ut,classNamesToQuery:pt}),mt=ot,ft=lt,vt=ct,gt=dt,bt=ut,yt=pt,wt=function(){function e(t,s){void 0===s&&(s={});var i=this;if(this.removePreventClickId=null,this.minScrollbarWidth=20,this.stopScrollDelay=175,this.isScrolling=!1,this.isMouseEntering=!1,this.scrollXTicking=!1,this.scrollYTicking=!1,this.wrapperEl=null,this.contentWrapperEl=null,this.contentEl=null,this.offsetEl=null,this.maskEl=null,this.placeholderEl=null,this.heightAutoObserverWrapperEl=null,this.heightAutoObserverEl=null,this.rtlHelpers=null,this.scrollbarWidth=0,this.resizeObserver=null,this.mutationObserver=null,this.elStyles=null,this.isRtl=null,this.mouseX=0,this.mouseY=0,this.onMouseMove=function(){},this.onWindowResize=function(){},this.onStopScrolling=function(){},this.onMouseEntered=function(){},this.onScroll=function(){var e=mt(i.el);i.scrollXTicking||(e.requestAnimationFrame(i.scrollX),i.scrollXTicking=!0),i.scrollYTicking||(e.requestAnimationFrame(i.scrollY),i.scrollYTicking=!0),i.isScrolling||(i.isScrolling=!0,gt(i.el,i.classNames.scrolling)),i.showScrollbar("x"),i.showScrollbar("y"),i.onStopScrolling()},this.scrollX=function(){i.axis.x.isOverflowing&&i.positionScrollbar("x"),i.scrollXTicking=!1},this.scrollY=function(){i.axis.y.isOverflowing&&i.positionScrollbar("y"),i.scrollYTicking=!1},this._onStopScrolling=function(){bt(i.el,i.classNames.scrolling),i.options.autoHide&&(i.hideScrollbar("x"),i.hideScrollbar("y")),i.isScrolling=!1},this.onMouseEnter=function(){i.isMouseEntering||(gt(i.el,i.classNames.mouseEntered),i.showScrollbar("x"),i.showScrollbar("y"),i.isMouseEntering=!0),i.onMouseEntered()},this._onMouseEntered=function(){bt(i.el,i.classNames.mouseEntered),i.options.autoHide&&(i.hideScrollbar("x"),i.hideScrollbar("y")),i.isMouseEntering=!1},this._onMouseMove=function(e){i.mouseX=e.clientX,i.mouseY=e.clientY,(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseMoveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseMoveForAxis("y")},this.onMouseLeave=function(){i.onMouseMove.cancel(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseLeaveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseLeaveForAxis("y"),i.mouseX=-1,i.mouseY=-1},this._onWindowResize=function(){i.scrollbarWidth=i.getScrollbarWidth(),i.hideNativeScrollbar()},this.onPointerEvent=function(e){var t,s;i.axis.x.track.el&&i.axis.y.track.el&&i.axis.x.scrollbar.el&&i.axis.y.scrollbar.el&&(i.axis.x.track.rect=i.axis.x.track.el.getBoundingClientRect(),i.axis.y.track.rect=i.axis.y.track.el.getBoundingClientRect(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&(t=i.isWithinBounds(i.axis.x.track.rect)),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&(s=i.isWithinBounds(i.axis.y.track.rect)),(t||s)&&(e.stopPropagation(),"pointerdown"===e.type&&"touch"!==e.pointerType&&(t&&(i.axis.x.scrollbar.rect=i.axis.x.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.x.scrollbar.rect)?i.onDragStart(e,"x"):i.onTrackClick(e,"x")),s&&(i.axis.y.scrollbar.rect=i.axis.y.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.y.scrollbar.rect)?i.onDragStart(e,"y"):i.onTrackClick(e,"y")))))},this.drag=function(t){var s,n,r,a,o,l,c,d,u,p,h;if(i.draggedAxis&&i.contentWrapperEl){var m=i.axis[i.draggedAxis].track,f=null!==(n=null===(s=m.rect)||void 0===s?void 0:s[i.axis[i.draggedAxis].sizeAttr])&&void 0!==n?n:0,v=i.axis[i.draggedAxis].scrollbar,g=null!==(a=null===(r=i.contentWrapperEl)||void 0===r?void 0:r[i.axis[i.draggedAxis].scrollSizeAttr])&&void 0!==a?a:0,b=parseInt(null!==(l=null===(o=i.elStyles)||void 0===o?void 0:o[i.axis[i.draggedAxis].sizeAttr])&&void 0!==l?l:"0px",10);t.preventDefault(),t.stopPropagation();var y=("y"===i.draggedAxis?t.pageY:t.pageX)-(null!==(d=null===(c=m.rect)||void 0===c?void 0:c[i.axis[i.draggedAxis].offsetAttr])&&void 0!==d?d:0)-i.axis[i.draggedAxis].dragOffset,w=(y="x"===i.draggedAxis&&i.isRtl?(null!==(p=null===(u=m.rect)||void 0===u?void 0:u[i.axis[i.draggedAxis].sizeAttr])&&void 0!==p?p:0)-v.size-y:y)/(f-v.size)*(g-b);"x"===i.draggedAxis&&i.isRtl&&(w=(null===(h=e.getRtlHelpers())||void 0===h?void 0:h.isScrollingToNegative)?-w:w),i.contentWrapperEl[i.axis[i.draggedAxis].scrollOffsetAttr]=w}},this.onEndDrag=function(e){var t=ft(i.el),s=mt(i.el);e.preventDefault(),e.stopPropagation(),bt(i.el,i.classNames.dragging),t.removeEventListener("mousemove",i.drag,!0),t.removeEventListener("mouseup",i.onEndDrag,!0),i.removePreventClickId=s.setTimeout((function(){t.removeEventListener("click",i.preventClick,!0),t.removeEventListener("dblclick",i.preventClick,!0),i.removePreventClickId=null}))},this.preventClick=function(e){e.preventDefault(),e.stopPropagation()},this.el=t,this.options=it(it({},e.defaultOptions),s),this.classNames=it(it({},e.defaultOptions.classNames),s.classNames),this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}}},"object"!=typeof this.el||!this.el.nodeName)throw new Error("Argument passed to SimpleBar must be an HTML element instead of ".concat(this.el));this.onMouseMove=st(this._onMouseMove,64),this.onWindowResize=tt(this._onWindowResize,64,{leading:!0}),this.onStopScrolling=tt(this._onStopScrolling,this.stopScrollDelay),this.onMouseEntered=tt(this._onMouseEntered,this.stopScrollDelay),this.init()}return e.getRtlHelpers=function(){if(e.rtlHelpers)return e.rtlHelpers;var t=document.createElement("div");t.innerHTML='<div class="simplebar-dummy-scrollbar-size"><div></div></div>';var s=t.firstElementChild,i=null==s?void 0:s.firstElementChild;if(!i)return null;document.body.appendChild(s),s.scrollLeft=0;var n=e.getOffset(s),r=e.getOffset(i);s.scrollLeft=-999;var a=e.getOffset(i);return document.body.removeChild(s),e.rtlHelpers={isScrollOriginAtZero:n.left!==r.left,isScrollingToNegative:r.left!==a.left},e.rtlHelpers},e.prototype.getScrollbarWidth=function(){try{return this.contentWrapperEl&&"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:at()}catch(e){return at()}},e.getOffset=function(e){var t=e.getBoundingClientRect(),s=ft(e),i=mt(e);return{top:t.top+(i.pageYOffset||s.documentElement.scrollTop),left:t.left+(i.pageXOffset||s.documentElement.scrollLeft)}},e.prototype.init=function(){Te&&(this.initDOM(),this.rtlHelpers=e.getRtlHelpers(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())},e.prototype.initDOM=function(){var e,t;this.wrapperEl=this.el.querySelector(yt(this.classNames.wrapper)),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector(yt(this.classNames.contentWrapper)),this.contentEl=this.options.contentNode||this.el.querySelector(yt(this.classNames.contentEl)),this.offsetEl=this.el.querySelector(yt(this.classNames.offset)),this.maskEl=this.el.querySelector(yt(this.classNames.mask)),this.placeholderEl=this.findChild(this.wrapperEl,yt(this.classNames.placeholder)),this.heightAutoObserverWrapperEl=this.el.querySelector(yt(this.classNames.heightAutoObserverWrapperEl)),this.heightAutoObserverEl=this.el.querySelector(yt(this.classNames.heightAutoObserverEl)),this.axis.x.track.el=this.findChild(this.el,"".concat(yt(this.classNames.track)).concat(yt(this.classNames.horizontal))),this.axis.y.track.el=this.findChild(this.el,"".concat(yt(this.classNames.track)).concat(yt(this.classNames.vertical))),this.axis.x.scrollbar.el=(null===(e=this.axis.x.track.el)||void 0===e?void 0:e.querySelector(yt(this.classNames.scrollbar)))||null,this.axis.y.scrollbar.el=(null===(t=this.axis.y.track.el)||void 0===t?void 0:t.querySelector(yt(this.classNames.scrollbar)))||null,this.options.autoHide||(gt(this.axis.x.scrollbar.el,this.classNames.visible),gt(this.axis.y.scrollbar.el,this.classNames.visible))},e.prototype.initListeners=function(){var e,t=this,s=mt(this.el);if(this.el.addEventListener("mouseenter",this.onMouseEnter),this.el.addEventListener("pointerdown",this.onPointerEvent,!0),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),null===(e=this.contentWrapperEl)||void 0===e||e.addEventListener("scroll",this.onScroll),s.addEventListener("resize",this.onWindowResize),this.contentEl){if(window.ResizeObserver){var i=!1,n=s.ResizeObserver||ResizeObserver;this.resizeObserver=new n((function(){i&&s.requestAnimationFrame((function(){t.recalculate()}))})),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),s.requestAnimationFrame((function(){i=!0}))}this.mutationObserver=new s.MutationObserver((function(){s.requestAnimationFrame((function(){t.recalculate()}))})),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})}},e.prototype.recalculate=function(){if(this.heightAutoObserverEl&&this.contentEl&&this.contentWrapperEl&&this.wrapperEl&&this.placeholderEl){var e=mt(this.el);this.elStyles=e.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;var t=this.contentEl.offsetWidth,s=this.heightAutoObserverEl.offsetHeight<=1,i=this.heightAutoObserverEl.offsetWidth<=1||t>0,n=this.contentWrapperEl.offsetWidth,r=this.elStyles.overflowX,a=this.elStyles.overflowY;this.contentEl.style.padding="".concat(this.elStyles.paddingTop," ").concat(this.elStyles.paddingRight," ").concat(this.elStyles.paddingBottom," ").concat(this.elStyles.paddingLeft),this.wrapperEl.style.margin="-".concat(this.elStyles.paddingTop," -").concat(this.elStyles.paddingRight," -").concat(this.elStyles.paddingBottom," -").concat(this.elStyles.paddingLeft);var o=this.contentEl.scrollHeight,l=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=s?"auto":"100%",this.placeholderEl.style.width=i?"".concat(t||l,"px"):"auto",this.placeholderEl.style.height="".concat(o,"px");var c=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=0!==t&&l>t,this.axis.y.isOverflowing=o>c,this.axis.x.isOverflowing="hidden"!==r&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==a&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();var d=this.axis.x.isOverflowing?this.scrollbarWidth:0,u=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&l>n-u,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&o>c-d,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el&&(this.axis.x.scrollbar.el.style.width="".concat(this.axis.x.scrollbar.size,"px")),this.axis.y.scrollbar.el&&(this.axis.y.scrollbar.el.style.height="".concat(this.axis.y.scrollbar.size,"px")),this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")}},e.prototype.getScrollbarSize=function(e){var t,s;if(void 0===e&&(e="y"),!this.axis[e].isOverflowing||!this.contentEl)return 0;var i,n=this.contentEl[this.axis[e].scrollSizeAttr],r=null!==(s=null===(t=this.axis[e].track.el)||void 0===t?void 0:t[this.axis[e].offsetSizeAttr])&&void 0!==s?s:0,a=r/n;return i=Math.max(~~(a*r),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(i=Math.min(i,this.options.scrollbarMaxSize)),i},e.prototype.positionScrollbar=function(t){var s,i,n;void 0===t&&(t="y");var r=this.axis[t].scrollbar;if(this.axis[t].isOverflowing&&this.contentWrapperEl&&r.el&&this.elStyles){var a=this.contentWrapperEl[this.axis[t].scrollSizeAttr],o=(null===(s=this.axis[t].track.el)||void 0===s?void 0:s[this.axis[t].offsetSizeAttr])||0,l=parseInt(this.elStyles[this.axis[t].sizeAttr],10),c=this.contentWrapperEl[this.axis[t].scrollOffsetAttr];c="x"===t&&this.isRtl&&(null===(i=e.getRtlHelpers())||void 0===i?void 0:i.isScrollOriginAtZero)?-c:c,"x"===t&&this.isRtl&&(c=(null===(n=e.getRtlHelpers())||void 0===n?void 0:n.isScrollingToNegative)?c:-c);var d=c/(a-l),u=~~((o-r.size)*d);u="x"===t&&this.isRtl?-u+(o-r.size):u,r.el.style.transform="x"===t?"translate3d(".concat(u,"px, 0, 0)"):"translate3d(0, ".concat(u,"px, 0)")}},e.prototype.toggleTrackVisibility=function(e){void 0===e&&(e="y");var t=this.axis[e].track.el,s=this.axis[e].scrollbar.el;t&&s&&this.contentWrapperEl&&(this.axis[e].isOverflowing||this.axis[e].forceVisible?(t.style.visibility="visible",this.contentWrapperEl.style[this.axis[e].overflowAttr]="scroll",this.el.classList.add("".concat(this.classNames.scrollable,"-").concat(e))):(t.style.visibility="hidden",this.contentWrapperEl.style[this.axis[e].overflowAttr]="hidden",this.el.classList.remove("".concat(this.classNames.scrollable,"-").concat(e))),this.axis[e].isOverflowing?s.style.display="block":s.style.display="none")},e.prototype.showScrollbar=function(e){void 0===e&&(e="y"),this.axis[e].isOverflowing&&!this.axis[e].scrollbar.isVisible&&(gt(this.axis[e].scrollbar.el,this.classNames.visible),this.axis[e].scrollbar.isVisible=!0)},e.prototype.hideScrollbar=function(e){void 0===e&&(e="y"),this.axis[e].isOverflowing&&this.axis[e].scrollbar.isVisible&&(bt(this.axis[e].scrollbar.el,this.classNames.visible),this.axis[e].scrollbar.isVisible=!1)},e.prototype.hideNativeScrollbar=function(){this.offsetEl&&(this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px",this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px")},e.prototype.onMouseMoveForAxis=function(e){void 0===e&&(e="y");var t=this.axis[e];t.track.el&&t.scrollbar.el&&(t.track.rect=t.track.el.getBoundingClientRect(),t.scrollbar.rect=t.scrollbar.el.getBoundingClientRect(),this.isWithinBounds(t.track.rect)?(this.showScrollbar(e),gt(t.track.el,this.classNames.hover),this.isWithinBounds(t.scrollbar.rect)?gt(t.scrollbar.el,this.classNames.hover):bt(t.scrollbar.el,this.classNames.hover)):(bt(t.track.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(e)))},e.prototype.onMouseLeaveForAxis=function(e){void 0===e&&(e="y"),bt(this.axis[e].track.el,this.classNames.hover),bt(this.axis[e].scrollbar.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(e)},e.prototype.onDragStart=function(e,t){var s;void 0===t&&(t="y");var i=ft(this.el),n=mt(this.el),r=this.axis[t].scrollbar,a="y"===t?e.pageY:e.pageX;this.axis[t].dragOffset=a-((null===(s=r.rect)||void 0===s?void 0:s[this.axis[t].offsetAttr])||0),this.draggedAxis=t,gt(this.el,this.classNames.dragging),i.addEventListener("mousemove",this.drag,!0),i.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(i.addEventListener("click",this.preventClick,!0),i.addEventListener("dblclick",this.preventClick,!0)):(n.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)},e.prototype.onTrackClick=function(e,t){var s,i,n,r,a=this;void 0===t&&(t="y");var o=this.axis[t];if(this.options.clickOnTrack&&o.scrollbar.el&&this.contentWrapperEl){e.preventDefault();var l=mt(this.el);this.axis[t].scrollbar.rect=o.scrollbar.el.getBoundingClientRect();var c=null!==(i=null===(s=this.axis[t].scrollbar.rect)||void 0===s?void 0:s[this.axis[t].offsetAttr])&&void 0!==i?i:0,d=parseInt(null!==(r=null===(n=this.elStyles)||void 0===n?void 0:n[this.axis[t].sizeAttr])&&void 0!==r?r:"0px",10),u=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],p=("y"===t?this.mouseY-c:this.mouseX-c)<0?-1:1,h=-1===p?u-d:u+d,m=function(){a.contentWrapperEl&&(-1===p?u>h&&(u-=40,a.contentWrapperEl[a.axis[t].scrollOffsetAttr]=u,l.requestAnimationFrame(m)):u<h&&(u+=40,a.contentWrapperEl[a.axis[t].scrollOffsetAttr]=u,l.requestAnimationFrame(m)))};m()}},e.prototype.getContentElement=function(){return this.contentEl},e.prototype.getScrollElement=function(){return this.contentWrapperEl},e.prototype.removeListeners=function(){var e=mt(this.el);this.el.removeEventListener("mouseenter",this.onMouseEnter),this.el.removeEventListener("pointerdown",this.onPointerEvent,!0),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl&&this.contentWrapperEl.removeEventListener("scroll",this.onScroll),e.removeEventListener("resize",this.onWindowResize),this.mutationObserver&&this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.onMouseMove.cancel(),this.onWindowResize.cancel(),this.onStopScrolling.cancel(),this.onMouseEntered.cancel()},e.prototype.unMount=function(){this.removeListeners()},e.prototype.isWithinBounds=function(e){return this.mouseX>=e.left&&this.mouseX<=e.left+e.width&&this.mouseY>=e.top&&this.mouseY<=e.top+e.height},e.prototype.findChild=function(e,t){var s=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;return Array.prototype.filter.call(e.children,(function(e){return s.call(e,t)}))[0]},e.rtlHelpers=null,e.defaultOptions={forceVisible:!1,clickOnTrack:!0,scrollbarMinSize:25,scrollbarMaxSize:0,ariaLabel:"scrollable content",classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging",scrolling:"simplebar-scrolling",scrollable:"simplebar-scrollable",mouseEntered:"simplebar-mouse-entered"},scrollableNode:null,contentNode:null,autoHide:!0},e.getOptions=vt,e.helpers=ht,e}(),Et=function(e,t){return Et=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},Et(e,t)};var St=wt.helpers,xt=St.getOptions,_t=St.addClasses,Lt=function(e){function t(){for(var s=[],i=0;i<arguments.length;i++)s[i]=arguments[i];var n=e.apply(this,s)||this;return t.instances.set(s[0],n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}Et(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}(t,e),t.initDOMLoadedElements=function(){document.removeEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.removeEventListener("load",this.initDOMLoadedElements),Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"),(function(e){"init"===e.getAttribute("data-simplebar")||t.instances.has(e)||new t(e,xt(e.attributes))}))},t.removeObserver=function(){var e;null===(e=t.globalObserver)||void 0===e||e.disconnect()},t.prototype.initDOM=function(){var e,t,s,i=this;if(!Array.prototype.filter.call(this.el.children,(function(e){return e.classList.contains(i.classNames.wrapper)})).length){for(this.wrapperEl=document.createElement("div"),this.contentWrapperEl=document.createElement("div"),this.offsetEl=document.createElement("div"),this.maskEl=document.createElement("div"),this.contentEl=document.createElement("div"),this.placeholderEl=document.createElement("div"),this.heightAutoObserverWrapperEl=document.createElement("div"),this.heightAutoObserverEl=document.createElement("div"),_t(this.wrapperEl,this.classNames.wrapper),_t(this.contentWrapperEl,this.classNames.contentWrapper),_t(this.offsetEl,this.classNames.offset),_t(this.maskEl,this.classNames.mask),_t(this.contentEl,this.classNames.contentEl),_t(this.placeholderEl,this.classNames.placeholder),_t(this.heightAutoObserverWrapperEl,this.classNames.heightAutoObserverWrapperEl),_t(this.heightAutoObserverEl,this.classNames.heightAutoObserverEl);this.el.firstChild;)this.contentEl.appendChild(this.el.firstChild);this.contentWrapperEl.appendChild(this.contentEl),this.offsetEl.appendChild(this.contentWrapperEl),this.maskEl.appendChild(this.offsetEl),this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl),this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl),this.wrapperEl.appendChild(this.maskEl),this.wrapperEl.appendChild(this.placeholderEl),this.el.appendChild(this.wrapperEl),null===(e=this.contentWrapperEl)||void 0===e||e.setAttribute("tabindex","0"),null===(t=this.contentWrapperEl)||void 0===t||t.setAttribute("role","region"),null===(s=this.contentWrapperEl)||void 0===s||s.setAttribute("aria-label",this.options.ariaLabel)}if(!this.axis.x.track.el||!this.axis.y.track.el){var n=document.createElement("div"),r=document.createElement("div");_t(n,this.classNames.track),_t(r,this.classNames.scrollbar),n.appendChild(r),this.axis.x.track.el=n.cloneNode(!0),_t(this.axis.x.track.el,this.classNames.horizontal),this.axis.y.track.el=n.cloneNode(!0),_t(this.axis.y.track.el,this.classNames.vertical),this.el.appendChild(this.axis.x.track.el),this.el.appendChild(this.axis.y.track.el)}wt.prototype.initDOM.call(this),this.el.setAttribute("data-simplebar","init")},t.prototype.unMount=function(){wt.prototype.unMount.call(this),t.instances.delete(this.el)},t.initHtmlApi=function(){this.initDOMLoadedElements=this.initDOMLoadedElements.bind(this),"undefined"!=typeof MutationObserver&&(this.globalObserver=new MutationObserver(t.handleMutations),this.globalObserver.observe(document,{childList:!0,subtree:!0})),"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(this.initDOMLoadedElements):(document.addEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.addEventListener("load",this.initDOMLoadedElements))},t.handleMutations=function(e){e.forEach((function(e){e.addedNodes.forEach((function(e){1===e.nodeType&&(e.hasAttribute("data-simplebar")?!t.instances.has(e)&&document.documentElement.contains(e)&&new t(e,xt(e.attributes)):e.querySelectorAll("[data-simplebar]").forEach((function(e){"init"!==e.getAttribute("data-simplebar")&&!t.instances.has(e)&&document.documentElement.contains(e)&&new t(e,xt(e.attributes))})))})),e.removedNodes.forEach((function(e){1===e.nodeType&&("init"===e.getAttribute("data-simplebar")?t.instances.has(e)&&!document.documentElement.contains(e)&&t.instances.get(e).unMount():Array.prototype.forEach.call(e.querySelectorAll('[data-simplebar="init"]'),(function(e){t.instances.has(e)&&!document.documentElement.contains(e)&&t.instances.get(e).unMount()})))}))}))},t.instances=new WeakMap,t}(wt);Te&&Lt.initHtmlApi();var Tt=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var s=-1;return e.some((function(e,i){return e[0]===t&&(s=i,!0)})),s}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var s=e(this.__entries__,t),i=this.__entries__[s];return i&&i[1]},t.prototype.set=function(t,s){var i=e(this.__entries__,t);~i?this.__entries__[i][1]=s:this.__entries__.push([t,s])},t.prototype.delete=function(t){var s=this.__entries__,i=e(s,t);~i&&s.splice(i,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var s=0,i=this.__entries__;s<i.length;s++){var n=i[s];e.call(t,n[1],n[0])}},t}()}(),At="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Ct=void 0!==s.g&&s.g.Math===Math?s.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),kt="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Ct):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)};var Ot=["top","right","bottom","left","width","height","size","weight"],Mt="undefined"!=typeof MutationObserver,Pt=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var s=!1,i=!1,n=0;function r(){s&&(s=!1,e()),i&&o()}function a(){kt(r)}function o(){var e=Date.now();if(s){if(e-n<2)return;i=!0}else s=!0,i=!1,setTimeout(a,t);n=e}return o}(this.refresh.bind(this),20)}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,s=t.indexOf(e);~s&&t.splice(s,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){At&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Mt?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){At&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,s=void 0===t?"":t;Ot.some((function(e){return!!~s.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),It=function(e,t){for(var s=0,i=Object.keys(t);s<i.length;s++){var n=i[s];Object.defineProperty(e,n,{value:t[n],enumerable:!1,writable:!1,configurable:!0})}return e},qt=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Ct},zt=Ht(0,0,0,0);function $t(e){return parseFloat(e)||0}function Dt(e){for(var t=[],s=1;s<arguments.length;s++)t[s-1]=arguments[s];return t.reduce((function(t,s){return t+$t(e["border-"+s+"-width"])}),0)}function Nt(e){var t=e.clientWidth,s=e.clientHeight;if(!t&&!s)return zt;var i=qt(e).getComputedStyle(e),n=function(e){for(var t={},s=0,i=["top","right","bottom","left"];s<i.length;s++){var n=i[s],r=e["padding-"+n];t[n]=$t(r)}return t}(i),r=n.left+n.right,a=n.top+n.bottom,o=$t(i.width),l=$t(i.height);if("border-box"===i.boxSizing&&(Math.round(o+r)!==t&&(o-=Dt(i,"left","right")+r),Math.round(l+a)!==s&&(l-=Dt(i,"top","bottom")+a)),!function(e){return e===qt(e).document.documentElement}(e)){var c=Math.round(o+r)-t,d=Math.round(l+a)-s;1!==Math.abs(c)&&(o-=c),1!==Math.abs(d)&&(l-=d)}return Ht(n.left,n.top,o,l)}var Wt="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof qt(e).SVGGraphicsElement}:function(e){return e instanceof qt(e).SVGElement&&"function"==typeof e.getBBox};function Vt(e){return At?Wt(e)?function(e){var t=e.getBBox();return Ht(0,0,t.width,t.height)}(e):Nt(e):zt}function Ht(e,t,s,i){return{x:e,y:t,width:s,height:i}}var Bt=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Ht(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=Vt(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Gt=function(e,t){var s=function(e){var t=e.x,s=e.y,i=e.width,n=e.height,r="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,a=Object.create(r.prototype);return It(a,{x:t,y:s,width:i,height:n,top:s,right:t+i,bottom:n+s,left:t}),a}(t);It(this,{target:e,contentRect:s})},Rt=function(){function e(e,t,s){if(this.activeObservations_=[],this.observations_=new Tt,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=s}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof qt(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new Bt(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof qt(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Gt(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),Ft="undefined"!=typeof WeakMap?new WeakMap:new Tt,jt=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var s=Pt.getInstance(),i=new Rt(t,s,this);Ft.set(this,i)};["observe","unobserve","disconnect"].forEach((function(e){jt.prototype[e]=function(){var t;return(t=Ft.get(this))[e].apply(t,arguments)}}));const Yt=void 0!==Ct.ResizeObserver?Ct.ResizeObserver:jt;window.ResizeObserver=Yt;new class{constructor(){this._this=this,this.classes={sel:"select",body:"select__body",label:"select__label",title:"select__title",val:"select__value",content:"select__content",options:"select__options",option:"select__option",scroll:"select__scroll",group:"select__group",inp:"select__input",asset:"select__asset",txt:"select__text",hint:"select__hint",active:"_select-active",focused:"_select-focused",opened:"_select-opened",filled:"_select-filled",selected:"_select-selected",disabled:"_select-disabled",list:"_select-list",error:"_select-error",multiple:"_select-multiple",checkbox:"_select-checkbox",label:"_select-label"};const e=document.querySelectorAll("select");e.length&&this.init(e)}init(e){e.forEach(((e,t)=>{e.classList.contains("star-rating")||this.initSelItem(e,t+1)})),document.addEventListener("click",function(e){this.setActions(e)}.bind(this)),document.addEventListener("keydown",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusin",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusout",function(e){this.setActions(e)}.bind(this))}initSelItem(e,t){const s=this,i=document.createElement("div");if(i.classList.add(this.classes.sel),e.parentNode.insertBefore(i,e),i.appendChild(e),e.hidden=!0,t&&(e.dataset.selId=t),this.getPlaceholder(e)&&(e.dataset.optPlaceholder=this.getPlaceholder(e).value,this.getPlaceholder(e).label.show)){this.getSelect(i,this.classes.title).twinSel.insertAdjacentHTML("afterbegin",`<span class="${this.classes.label}">${this.getPlaceholder(e).label.text?this.getPlaceholder(e).label.text:this.getPlaceholder(e).value}</span>`)}i.insertAdjacentHTML("beforeend",`<div class="${this.classes.body}"><div hidden class="${this.classes.options}"></div></div>`),this.build(e),e.dataset.speed=e.dataset.speed?e.dataset.speed:"150",e.addEventListener("change",(function(e){s.initSelections(e)}))}build(e){const t=e.parentElement;t.dataset.selId=e.dataset.selId,this.setValue(t,e),this.setOptions(t,e),e.dataset.selAddonClass&&t.classList.add(`select_${e.dataset.selAddonClass}`),e.multiple?t.classList.add(this.classes.multiple):t.classList.remove(this.classes.multiple),e.hasAttribute("data-sel-checkboxes")&&e.multiple?t.classList.add(this.classes.checkbox):t.classList.remove(this.classes.checkbox),this.disableSelect(t,e),e.hasAttribute("data-sel-search")&&this.setSearchActions(t),e.hasAttribute("data-sel-opened")&&this.setAction(t),e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selHint}</div>`),e.hasAttribute("data-show-val")?t.classList.add("_select-show-val"):t.classList.remove("_select-show-val")}setValue(e,t){const s=this.getSelect(e,this.classes.body).twinSel,i=this.getSelect(e,this.classes.title).twinSel;i&&i.remove(),s.insertAdjacentHTML("afterbegin",this.getValue(e,t))}setOptions(e,t){const s=this.getSelect(e,this.classes.options).twinSel;s.innerHTML=this.getOptions(t),s.querySelector(`.${this.classes.option}`).classList.add(this.classes.selected)}disableSelect(e,t){t.disabled?(e.classList.add(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!0):(e.classList.remove(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!1)}setActions(e){const t=e.target,s=e.type;if(t.closest(this.getClass(this.classes.sel))||t.closest(this.getClass(this.classes.list))){const i=t.closest(".select")?t.closest(".select"):document.querySelector(`.${this.classes.sel}[data-sel-id="${t.closest(this.getClass(this.classes.list)).dataset.selectId}"]`),n=this.getSelect(i).relativeSel;if("click"===s){if(!n.disabled)if(t.closest(this.getClass(this.classes.list))){const e=t.closest(this.getClass(this.classes.list)),s=document.querySelector(`.${this.classes.sel}[data-sel-id="${e.dataset.selId}"] .select__option[data-opt-val="${e.dataset.optVal}"]`);this.setOptionAction(i,n,s)}else if(t.closest(this.getClass(this.classes.title)))this.setAction(i);else if(t.closest(this.getClass(this.classes.option))){const e=t.closest(this.getClass(this.classes.option));this.setOptionAction(i,n,e)}}else"focusin"===s||"focusout"===s?t.closest(this.getClass(this.classes.sel))&&("focusin"===s?i.classList.add(this.classes.focused):(i.classList.remove(this.classes.focused),n.hasAttribute("data-validate")&&(i.classList.contains(this.classes.filled)?this.removeErr(n,i):this.addErr(n,i)))):"keydown"===s&&"Escape"===e.code&&this.closeGroup()}else this.closeGroup()}setAction(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;if(t.closest("[data-one-select]")){const e=t.closest("[data-one-select]");this.closeGroup(e)}s.classList.contains("_slide")||(e.classList.toggle(this.classes.opened),d(s,t.dataset.speed),e.classList.contains(this.classes.opened)&&t.hasAttribute("data-validate")&&e.classList.contains(this.classes.error)&&this.removeErr(t,e))}closeGroup(e){const t=(e||document).querySelectorAll(`${this.getClass(this.classes.sel)}${this.getClass(this.classes.opened)}`);t.length&&t.forEach((e=>{this.closeItem(e)}))}closeItem(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;s.classList.contains("_slide")||(e.classList.remove(this.classes.opened),l(s,t.dataset.speed))}setOptionAction(e,t,s){if(t.multiple){s.classList.toggle(this.classes.selected);this.getData(t).elements.forEach((e=>{e.removeAttribute("selected")}));e.querySelectorAll(this.getClass(this.classes.selected)).forEach((e=>{t.querySelector(`option[value="${e.dataset.optVal}"]`).setAttribute("selected","selected")})),s.classList.contains(this.classes.selected)||(console.log(t.querySelector(`option[value="${s.dataset.optVal}"]`)),t.querySelector(`option[value="${s.dataset.optVal}"]`).removeAttribute("selected"))}else e.querySelectorAll(".select__option").forEach((e=>e.classList.remove(this.classes.selected))),s.classList.add(this.classes.selected),t.hasAttribute("data-show-selection")||(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`)&&(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`).hidden=!1),s.hidden=!0),t.value=s.hasAttribute("data-opt-val")?s.dataset.optVal:s.textContent,this.setAction(e);this.setValue(e,t),this.setSelections(t)}setSearchActions(e){const t=this,s=this.getSelect(e,this.classes.inp).twinSel,i=this.getSelect(e,this.classes.options).twinSel.querySelectorAll(`.${this.classes.option}`);s.addEventListener("input",(function(){i.forEach((e=>{e.textContent.toUpperCase().indexOf(s.value.toUpperCase())>=0?e.hidden=!1:e.hidden=!0})),!0===i.hidden&&t.setAction(e)}))}setSubtitle(e){}addErr(e,t){t.classList.add(this.classes.error),e.dataset.selError&&!e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selError}</div>`)}removeErr(e,t){t.classList.contains(this.classes.error)&&t.classList.remove(this.classes.error),e.parentElement.querySelector(".select__hint")&&!e.dataset.selHint&&e.parentElement.removeChild(e.parentElement.querySelector(".select__hint"))}getClass(e){return`.${e}`}getSelect(e,t){return{relativeSel:e.querySelector("select"),twinSel:e.querySelector(this.getClass(t))}}getValue(e,t){let s,i,n=this.getData(t,2).html;if(n=n.length?n:t.dataset.selLabel?t.dataset.selLabel:"",this.getData(t).values.length?e.classList.add(this.classes.active):e.classList.remove(this.classes.active),t.hasAttribute("data-sel-label")&&(s=t.dataset.selLabel?` data-sel-label="${t.dataset.selLabel}"`:' data-sel-label="Выбор"',i=` ${this.classes.label}`),t.multiple&&t.hasAttribute("data-sel-list")&&(n=this.getData(t).elements.map((t=>`<span data-opt-id="${e.dataset.selId}" data-opt-val="${t.value}" class="_list-item">${this.getContent(t)}</span>`)).join(""),t.dataset.list&&document.querySelector(t.dataset.list)&&(document.querySelector(t.dataset.list).innerHTML=n,t.hasAttribute("data-sel-search")&&(n=!1))),t.hasAttribute("data-sel-search"))return`<div class="${this.classes.title}"><span ${s} class="${this.classes.val}"><input autocomplete="off" type="search" placeholder="${n}" data-placeholder="${n}" class="${this.classes.inp}"></span></div>`;{const e=this.getData(t).elements.length&&this.getData(t).elements[0].dataset.optClass?` ${this.getData(t).elements[0].dataset.optClass}`:"";return`<button type="button" class="${this.classes.title}"><span ${s||""} class="${this.classes.val} ${i||""}"><span class="${this.classes.content}${e}">${n}</span></span></button>`}}getOptions(e){const t=e.hasAttribute("data-sel-scroll")?"data-simplebar":"";let s=e.dataset.selScroll?`style="max-height:${e.dataset.selScroll}px"`:"",i=Array.from(e.options);if(i.length){let n="";return(this.getPlaceholder(e)&&!this.getPlaceholder(e).show||e.multiple)&&(i=i.filter((e=>e.value))),n+=t?`<div ${t} ${s} class="${this.classes.scroll}">`:"",i.forEach((t=>{n+=this.getOption(t,e)})),n+=t?"</div>":"",n}}getOption(e,t){const s=e.selected&&t.multiple?` ${this.classes.selected}`:"",i=!e.selected||t.hasAttribute("data-show-selection")||t.multiple?"":"hidden",n=e.dataset.optClass?` ${e.dataset.optClass}`:"",r=!!e.dataset.optionLink&&e.dataset.optionLink,a=e.hasAttribute("data-option-link-target")?'target="_blank"':"";let o="";return o+=r?`<a ${a} ${i} href="${r}" data-opt-val="${e.value}" class="${this.classes.option}${n}${s}">`:`<button ${i} class="${this.classes.option}${n}${s}" data-opt-val="${e.value}" type="button">`,o+=this.getContent(e),o+=r?"</a>":"</button>",o}getContent(e){const t=e.dataset.optAsset?`${e.dataset.optAsset}`:"",s=t.indexOf("img")>=0?`<img src="${t}" alt="">`:t;let i="";return i+=t?`<span class="${this.classes.group}">`:"",i+=t?`<span class="${this.classes.asset}">`:"",i+=t?s:"",i+=t?"</span>":"",i+=t?`<span class="${this.classes.txt}">`:"",i+=e.textContent,i+=t?"</span>":"",i+=t?"</span>":"",i}getPlaceholder(e){const t=Array.from(e.options).find((e=>!e.value));if(t)return t.classList.add(this.classes.subtitle),{value:t.textContent,show:t.hasAttribute("data-sel-ph-show"),label:{show:t.hasAttribute("data-sel-ph"),text:t.dataset.optPlaceholder}}}getData(e){let t=[];return e.multiple?t=Array.from(e.options).filter((e=>e.value)).filter((e=>e.selected)):t.push(e.options[e.selectedIndex]),{elements:t.map((e=>e)),values:t.filter((e=>e.value)).map((e=>e.value)),html:t.map((e=>this.getContent(e)))}}initSelections(e){const t=e.target;this.build(t),this.setSelections(t)}setSelections(e){const t=e.parentElement;if(e.hasAttribute("data-submit")&&e.value){let t=document.createElement("button");t.type="submit",e.closest("form").append(t),t.click(),t.remove()}e.parentElement.classList.add(this.classes.filled),this.selection(t,e)}selection(e,t){document.dispatchEvent(new CustomEvent("selection",{detail:{select:t}}))}}({});s(726);new class{constructor(e){let t={logging:!0,init:!0,attributeOpenButton:"data-modal",attributeCloseButton:"data-close",fixElementSelector:"[data-lp]",youtubeAttribute:"data-modal-youtube",youtubePlaceAttribute:"data-modal-youtube-place",setAutoplayYoutube:!0,classes:{modal:"modal",modalContent:"modal__content",modalActive:"modal_show",bodyActive:"modal-show"},focusCatch:!0,closeEsc:!0,bodyLock:!0,hashSettings:{location:!0,goHash:!0},on:{beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){}}};this.youTubeCode,this.isOpen=!1,this.targetOpen={selector:!1,element:!1},this.previousOpen={selector:!1,element:!1},this.lastClosed={selector:!1,element:!1},this._dataValue=!1,this.hash=!1,this._reopen=!1,this._selectorOpen=!1,this.lastFocusEl=!1,this._focusEl=["a[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"button:not([disabled]):not([aria-hidden])","select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","area[href]","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],this.options={...t,...e,classes:{...t.classes,...e?.classes},hashSettings:{...t.hashSettings,...e?.hashSettings},on:{...t.on,...e?.on}},this.bodyLock=!1,this.options.init&&this.initmodals()}initmodals(){this.eventsmodal()}eventsmodal(){document.addEventListener("click",function(e){const t=e.target.closest(`[${this.options.attributeOpenButton}]`);if(t)return e.preventDefault(),this._dataValue=t.getAttribute(this.options.attributeOpenButton)?t.getAttribute(this.options.attributeOpenButton):"error",this.youTubeCode=t.getAttribute(this.options.youtubeAttribute)?t.getAttribute(this.options.youtubeAttribute):null,"error"!==this._dataValue?(this.isOpen||(this.lastFocusEl=t),this.targetOpen.selector=`${this._dataValue}`,this._selectorOpen=!0,void this.open()):void 0;return e.target.closest(`[${this.options.attributeCloseButton}]`)||!e.target.closest(`.${this.options.classes.modalContent}`)&&this.isOpen?(e.preventDefault(),void this.close()):void 0}.bind(this)),document.addEventListener("keydown",function(e){if(this.options.closeEsc&&27==e.which&&"Escape"===e.code&&this.isOpen)return e.preventDefault(),void this.close();this.options.focusCatch&&9==e.which&&this.isOpen&&this._focusCatch(e)}.bind(this)),this.options.hashSettings.goHash&&(window.addEventListener("hashchange",function(){window.location.hash?this._openToHash():this.close(this.targetOpen.selector)}.bind(this)),window.addEventListener("load",function(){window.location.hash&&this._openToHash()}.bind(this)))}open(t){if(e&&(this.bodyLock=!(!document.documentElement.classList.contains("lock")||this.isOpen),t&&"string"==typeof t&&""!==t.trim()&&(this.targetOpen.selector=t,this._selectorOpen=!0),this.isOpen&&(this._reopen=!0,this.close()),this._selectorOpen||(this.targetOpen.selector=this.lastClosed.selector),this._reopen||(this.previousActiveElement=document.activeElement),this.targetOpen.element=document.querySelector(this.targetOpen.selector),this.targetOpen.element)){if(this.youTubeCode){const e=`https://www.youtube.com/embed/${this.youTubeCode}?rel=0&showinfo=0&autoplay=1`,t=document.createElement("iframe");t.setAttribute("allowfullscreen","");const s=this.options.setAutoplayYoutube?"autoplay;":"";if(t.setAttribute("allow",`${s}; encrypted-media`),t.setAttribute("src",e),!this.targetOpen.element.querySelector(`[${this.options.youtubePlaceAttribute}]`)){this.targetOpen.element.querySelector(".modal__text").setAttribute(`${this.options.youtubePlaceAttribute}`,"")}this.targetOpen.element.querySelector(`[${this.options.youtubePlaceAttribute}]`).appendChild(t)}this.options.hashSettings.location&&(this._getHash(),this._setHash()),this.options.on.beforeOpen(this),document.dispatchEvent(new CustomEvent("beforemodalOpen",{detail:{modal:this}})),this.targetOpen.element.classList.add(this.options.classes.modalActive),document.documentElement.classList.add(this.options.classes.bodyActive),this._reopen?this._reopen=!1:!this.bodyLock&&i(),this.targetOpen.element.setAttribute("aria-hidden","false"),this.previousOpen.selector=this.targetOpen.selector,this.previousOpen.element=this.targetOpen.element,this._selectorOpen=!1,this.isOpen=!0,setTimeout((()=>{this._focusTrap()}),50),this.options.on.afterOpen(this),document.dispatchEvent(new CustomEvent("aftermodalOpen",{detail:{modal:this}}))}}close(s){s&&"string"==typeof s&&""!==s.trim()&&(this.previousOpen.selector=s),this.isOpen&&e&&(this.options.on.beforeClose(this),document.dispatchEvent(new CustomEvent("beforemodalClose",{detail:{modal:this}})),this.youTubeCode&&this.targetOpen.element.querySelector(`[${this.options.youtubePlaceAttribute}]`)&&(this.targetOpen.element.querySelector(`[${this.options.youtubePlaceAttribute}]`).innerHTML=""),this.previousOpen.element.classList.remove(this.options.classes.modalActive),this.previousOpen.element.setAttribute("aria-hidden","true"),this._reopen||(document.documentElement.classList.remove(this.options.classes.bodyActive),!this.bodyLock&&t(),this.isOpen=!1),this._removeHash(),this._selectorOpen&&(this.lastClosed.selector=this.previousOpen.selector,this.lastClosed.element=this.previousOpen.element),this.options.on.afterClose(this),document.dispatchEvent(new CustomEvent("aftermodalClose",{detail:{modal:this}})),setTimeout((()=>{this._focusTrap()}),50))}_getHash(){this.options.hashSettings.location&&(this.hash=this.targetOpen.selector.includes("#")?this.targetOpen.selector:this.targetOpen.selector.replace(".","#"))}_openToHash(){let e=document.querySelector(`.${window.location.hash.replace("#","")}`)?`.${window.location.hash.replace("#","")}`:document.querySelector(`${window.location.hash}`)?`${window.location.hash}`:null;(document.querySelector(`[${this.options.attributeOpenButton} = "${e}"]`)?document.querySelector(`[${this.options.attributeOpenButton} = "${e}"]`):document.querySelector(`[${this.options.attributeOpenButton} = "${e.replace(".","#")}"]`))&&e&&this.open(e)}_setHash(){history.pushState("","",this.hash)}_removeHash(){history.pushState("","",window.location.href.split("#")[0])}_focusCatch(e){const t=this.targetOpen.element.querySelectorAll(this._focusEl),s=Array.prototype.slice.call(t),i=s.indexOf(document.activeElement);e.shiftKey&&0===i&&(s[s.length-1].focus(),e.preventDefault()),e.shiftKey||i!==s.length-1||(s[0].focus(),e.preventDefault())}_focusTrap(){const e=this.previousOpen.element.querySelectorAll(this._focusEl);!this.isOpen&&this.lastFocusEl?this.lastFocusEl.focus():e[0].focus()}}({});s(486);window.addEventListener("load",(function(){document.body.style.opacity=1})),document.addEventListener("DOMContentLoaded",(function(){window.scrollY>=50&&(document.documentElement.classList.add("_header-scroll"),document.documentElement.classList.add("_header-show"));const s=document.querySelector(".header__search-input");s&&(s.addEventListener("focusin",(function(){document.documentElement.classList.contains("_search-box-opened")||(document.documentElement.classList.add("_search-box-opened"),window.innerWidth<=768&&e&&(setTimeout((()=>{document.querySelector(".search-box__content").prepend(s.parentElement)}),0),i()))})),s.addEventListener("input",(function(){s.querySelector("input").value.length?s.closest("form").classList.contains("_filled")||s.closest("form").classList.add("_filled"):s.closest("form").classList.contains("_filled")&&s.closest("form").classList.remove("_filled")})),s.closest("form").addEventListener("submit",(function(){document.documentElement.classList.contains("_search-box-opened")&&(document.documentElement.classList.remove("_search-box-opened"),window.innerWidth<=768&&(setTimeout((()=>{document.querySelector(".header__search").appendChild(s.parentElement)}),0),t())),s.closest("form").classList.contains("_filled")&&s.closest("form").classList.remove("_filled"),s.querySelector("input").blur()})));const n=document.querySelectorAll("[data-numbers-only]");n.length&&n.forEach((e=>{"1"===e.dataset.numbersOnly&&(e.value="1"),e.addEventListener("input",(function(){/\d+/.test(e.value)||(e.value="")}))}));const r=(e,t,s)=>{e.length&&e.forEach((e=>e.closest(t).querySelector(s).appendChild(e)))};r(document.querySelectorAll(".catalog__card.menu-product-card_list-view .menu-product-card__heart-btn"),".catalog__card",".menu-product-card__actions"),r(document.querySelectorAll(".catalog__card.menu-product-card_list-view .menu-product-card__badges"),".catalog__card",".menu-product-card__preview"),window.innerWidth<=768&&(r(document.querySelectorAll(".catalog__card.menu-product-card_grid-view .menu-product-card__heart-btn"),".catalog__card",".menu-product-card__actions"),r(document.querySelectorAll(".catalog__card.menu-product-card_grid-view .menu-product-card__badges"),".catalog__card",".menu-product-card__preview"));const o=e=>{const t=document.querySelector(".tags-catalog__list"),s=(e,s)=>{const i=`\n        <span class="tags-catalog__text txt">${s}</span>\n        <button type="button" class="tags-catalog__remove-btn"><img src="./img/icons/cross.svg" alt="" class="tags-catalog__remove-btn-icon" /></button>\n      `;if(e.checked){const e=document.createElement("div");e.classList.add("tags-catalog__item"),e.setAttribute("data-tag-text",s),e.innerHTML=i,t.appendChild(e)}else e.checked||t.removeChild(t.querySelector(`[data-tag-text="${s}"]`))};if(e&&e.closest(".filters .checkbox__input"))s(e.closest(".filters .checkbox__input"),e.closest(".filters .checkbox__input").nextElementSibling.innerHTML);else if(!e){const e=document.querySelectorAll(".filters .checkbox__input[checked]");e.length&&e.forEach((e=>{s(e,e.nextElementSibling.innerHTML)}))}};o();const l=document.querySelectorAll(".filters .checkbox");l.length&&l.forEach((e=>e.setAttribute("data-filter-text",e.querySelector(".checkbox__text").innerHTML)));document.querySelector(".header__catalog")&&window.innerWidth>768&&document.addEventListener("mouseover",(function(e){const t=e.target,s=()=>{a(document.querySelectorAll("[data-subnav-index]"),"_active"),a(document.querySelectorAll("[data-sublink-index]"),"_active")};t.closest(".header__catalog")?document.documentElement.classList.add("_show-catalog"):(document.documentElement.classList.remove("_show-catalog"),document.querySelector(".header-catalog__advertising").classList.remove("_hidden"),s()),t.closest("[data-sublink-index]")&&(s(),t.closest("[data-sublink-index]").classList.add("_active"),document.querySelector(`[data-subnav-index="${t.closest("[data-sublink-index]").dataset.sublinkIndex}"]`).classList.add("_active"),document.querySelector(".header-catalog__advertising").classList.add("_hidden"))}));document.addEventListener("click",(n=>{const r=n.target;if(!document.querySelector(".user-cashback._active")||!r.closest(".user-cashback__value")&&r.closest(".user-cashback")?!document.querySelector(".user-cashback._active")&&r.closest(".user-cashback__value")&&r.closest(".user-cashback").classList.add("_active"):document.querySelector(".user-cashback._active").classList.remove("_active"),r.closest(".actions-header__item_account")&&window.innerWidth>768&&n.preventDefault(),r.closest(".show-all-btn")&&r.closest(".info-product__tab-body").classList.toggle("_show-all"),r.closest(".characteristics__show-all-btn")&&r.closest(".characteristics").classList.toggle("_show-all"),r.closest(".header-catalog__arr-btn")&&r.closest(".header-catalog__subnav").classList.remove("_active"),window.innerWidth<=768&&r.closest(".header-catalog__sublinks-item")&&(n.preventDefault(),a(document.querySelectorAll("[data-subnav-index]"),"_active"),document.querySelector(`[data-subnav-index="${r.closest(".header-catalog__sublinks-item").dataset.sublinkIndex}"]`).classList.add("_active")),r.closest(".menu__link_catalog")&&e&&(document.documentElement.classList.add("_show-catalog"),document.documentElement.classList.remove("_menu-opened"),i()),r.closest(".header-catalog__close-btn")&&e&&(document.documentElement.classList.remove("_show-catalog"),a(document.querySelectorAll("[data-subnav-index]"),"_active"),t()),r.closest("#close-search-btn")&&(document.documentElement.classList.remove("_search-box-opened"),setTimeout((()=>{document.querySelector(".header__search").appendChild(s.parentElement)}),0),t()),r.closest(".sublist-filters__options .option__input")){document.querySelector(".filters__sort-btn").innerHTML=r.closest(".sublist-filters__options .option__input").nextElementSibling.innerHTML}if(r.closest("[data-sl-btn]")&&r.closest("[data-sl-parent]").classList.add("_sublist-opened"),r.closest("[data-close-sl-btn]")&&r.closest("[data-sl-parent]").classList.remove("_sublist-opened"),r.closest("#open-filters-btn")&&e&&(document.documentElement.classList.add("_filters-visible"),i()),r.closest("#close-filters-btn")&&(document.documentElement.classList.remove("_filters-visible"),t()),r.closest(".tags-catalog__remove-btn-icon")){const e=r.closest(".tags-catalog__item");document.querySelectorAll(`[data-filter-text="${e.dataset.tagText}"] input`).forEach((e=>e.checked=!1)),e.remove()}if(r.closest(".filters .checkbox__input")&&o(r.closest(".filters .checkbox__input"),r.closest(".filters .checkbox__input").parentElement.dataset.filterTxt),r.closest("[data-clean-form-btn]")&&(h.formClean(r.closest("form")),document.querySelector(".tags-catalog__list").innerHTML=""),r.closest(".filters__show-all-btn")&&r.closest(".filters__form").classList.toggle("_show-all-filters"),r.closest(".filters__showmore-btn")&&window.innerWidth>768){const e=r.closest(".filters__group");e&&e.classList.toggle("_show-all-options")}r.closest(".heart-btn__icon")&&(r.closest(".heart-btn__icon").classList.toggle("_active"),n.preventDefault()),document.documentElement.classList.contains("_search-box-opened")&&!r.closest(".header__search")&&document.documentElement.classList.remove("_search-box-opened"),r.closest(".menu-bar__item")&&(a(document.querySelectorAll(".menu-bar__item"),"_active"),r.closest(".menu-bar__item").classList.add("_active")),r.closest(".tab")&&(a(document.querySelectorAll(".tab"),"_active"),r.closest(".tab").classList.add("_active")),r.closest(".hero-product__option")&&(a(document.querySelectorAll(".hero-product__option"),"_active"),r.closest(".hero-product__option").classList.add("_active")),r.closest(".view-catalog__btn")&&(a(document.querySelectorAll(".view-catalog__btn"),"_active"),r.closest(".view-catalog__btn").classList.add("_active"))}))})),document.querySelector(".hamburger")&&document.addEventListener("click",(function(t){e&&t.target.closest(".hamburger")?n():e&&document.documentElement.classList.contains("_menu-opened")&&(t.target.closest(".menu__close-btn")||!t.target.closest(".menu"))&&r()})),(()=>{const e=document.querySelectorAll("[data-spoilers]");if(e.length>0){const t=Array.from(e).filter((function(e,t,s){return!e.dataset.spoilers.split(",")[0]}));t.length&&i(t);let s=u(e,"spoilers");function i(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.forEach((e=>{e=t?e.item:e,t.matches||!t?(e.classList.add("_spoiler-init"),n(e),e.addEventListener("click",r)):(e.classList.remove("_spoiler-init"),n(e,!1),e.removeEventListener("click",r))}))}function n(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=e.querySelectorAll("[data-spoiler]");s.length&&(s=Array.from(s).filter((t=>t.closest("[data-spoilers]")===e)),s.forEach((e=>{t?(e.removeAttribute("tabindex"),e.classList.contains("_spoiler-active")||(e.nextElementSibling.hidden=!0)):(e.setAttribute("tabindex","-1"),e.nextElementSibling.hidden=!1)})))}function r(e){const t=e.target;if(t.closest("[data-spoiler]")){const s=t.closest("[data-spoiler]"),i=s.closest("[data-spoilers]"),n=i.hasAttribute("data-one-spoiler"),r=i.dataset.spoilersSpeed?parseInt(i.dataset.spoilersSpeed):500;i.querySelectorAll("._slide").length||(n&&!s.classList.contains("_spoiler-active")&&a(i),s.classList.toggle("_spoiler-active"),d(s.nextElementSibling,r)),e.preventDefault()}}function a(e){const t=e.querySelector("[data-spoiler]._spoiler-active"),s=e.dataset.spoilersSpeed?parseInt(e.dataset.spoilersSpeed):500;t&&!e.querySelectorAll("._slide").length&&(t.classList.remove("_spoiler-active"),l(t.nextElementSibling,s))}s&&s.length&&s.forEach((e=>{e.matchMedia.addEventListener("change",(function(){i(e.itemsArray,e.matchMedia)})),i(e.itemsArray,e.matchMedia)}));const o=document.querySelectorAll("[data-spoiler-close]");o.length&&document.addEventListener("click",(function(e){e.target.closest("[data-spoilers]")||o.forEach((e=>{const t=e.closest("[data-spoilers]"),s=spollersBlock.dataset.spoilersSpeed?parseInt(t.dataset.spoilersSpeed):500;e.classList.remove("_spoiler-active"),l(e.nextElementSibling,s)}))}))}})(),(()=>{const e=document.querySelectorAll("[data-original-height]");e.length&&window.innerWidth>768&&e.forEach((e=>{const t=e.dataset.visibleHeight,s=e.parentElement.querySelector("[data-showmore-btn]"),i=()=>{e.dataset.originalHeight=`${e.offsetHeight}px`,t&&(e.style.height=e.dataset.visibleHeight)};i(),s&&t&&s.addEventListener("click",(function(){e.parentElement.classList.contains("_show-all")?(e.parentElement.classList.remove("_show-all"),e.style.height=e.dataset.visibleHeight):(e.parentElement.classList.add("_show-all"),e.style.height=e.dataset.originalHeight)})),window.addEventListener("resize",i)}))})(),(()=>{const e=document.querySelectorAll("[data-tabs]");let t=[];if(e.length>0){const n=(()=>{if(location.hash)return location.hash.replace("#","")})();n&&n.startsWith("tab-")&&(t=n.replace("tab-","").split("-")),e.forEach(((e,s)=>{e.classList.add("_tab-init"),e.setAttribute("data-tabs-index",s),e.addEventListener("click",i),function(e){let s=e.querySelectorAll("[data-tabs-titles]>*"),i=e.querySelectorAll("[data-tabs-body]>*");const n=e.dataset.tabsIndex,r=t[0]==n;if(r){const t=e.querySelector("[data-tabs-titles]>._active");t&&t.classList.remove("_active")}i.length&&(i=Array.from(i).filter((t=>t.closest("[data-tabs]")===e)),s=Array.from(s).filter((t=>t.closest("[data-tabs]")===e)),i.forEach(((e,i)=>{s[i].setAttribute("data-tabs-title",""),e.setAttribute("data-tabs-item",""),r&&i==t[1]&&s[i].classList.add("_active"),e.hidden=!s[i].classList.contains("_active")})))}(e)}));let r=u(e,"tabs");r&&r.length&&r.forEach((e=>{e.matchMedia.addEventListener("change",(function(){s(e.itemsArray,e.matchMedia)})),s(e.itemsArray,e.matchMedia)}))}function s(e,t){e.forEach((e=>{let s=(e=e.item).querySelector("[data-tabs-titles]"),i=e.querySelectorAll("[data-tabs-title]"),n=e.querySelector("[data-tabs-body]"),r=e.querySelectorAll("[data-tabs-item]");i=Array.from(i).filter((t=>t.closest("[data-tabs]")===e)),r=Array.from(r).filter((t=>t.closest("[data-tabs]")===e)),r.forEach(((r,a)=>{t.matches?(n.append(i[a]),n.append(r),e.classList.add("_tab-spoller")):(s.append(i[a]),e.classList.remove("_tab-spoller"))}))}))}function i(e){const t=e.target;if(t.closest("[data-tabs-title]")){const s=t.closest("[data-tabs-title]"),i=s.closest("[data-tabs]");if(!s.classList.contains("_active")&&!i.querySelector("._slide")){let e=i.querySelectorAll("[data-tabs-title]._active");e.length&&(e=Array.from(e).filter((e=>e.closest("[data-tabs]")===i))),e.length&&e[0].classList.remove("_active"),s.classList.add("_active"),function(e){let t=e.querySelectorAll("[data-tabs-title]"),s=e.querySelectorAll("[data-tabs-item]");const i=e.dataset.tabsIndex,n=function(e){if(e.hasAttribute("data-tabs-animate"))return e.dataset.tabsAnimate>0?Number(e.dataset.tabsAnimate):500}(e);if(s.length>0){const r=e.hasAttribute("data-tabs-hash");s=Array.from(s).filter((t=>t.closest("[data-tabs]")===e)),t=Array.from(t).filter((t=>t.closest("[data-tabs]")===e)),s.forEach(((e,s)=>{t[s].classList.contains("_active")?(n?c(e,n):e.hidden=!1,r&&!e.closest(".modal")&&setHash(`tab-${i}-${s}`)):n?l(e,n):e.hidden=!0}))}}(i)}e.preventDefault()}}})(),(()=>{p=!0;const e=document.querySelector("header.header"),t=e.hasAttribute("data-scroll-show"),s=e.dataset.scrollShow?e.dataset.scrollShow:500,i=e.dataset.scroll?e.dataset.scroll:1;let n,r=0;document.addEventListener("windowScroll",(function(e){const a=window.scrollY;clearTimeout(n),a>=i?(!document.documentElement.classList.contains("_header-scroll")&&document.documentElement.classList.add("_header-scroll"),t&&(a>r?document.documentElement.classList.contains("_header-show")&&document.documentElement.classList.remove("_header-show"):!document.documentElement.classList.contains("_header-show")&&document.documentElement.classList.add("_header-show"),n=setTimeout((()=>{!document.documentElement.classList.contains("_header-show")&&document.documentElement.classList.add("_header-show")}),s))):(document.documentElement.classList.contains("_header-scroll")&&document.documentElement.classList.remove("_header-scroll"),t&&document.documentElement.classList.contains("_header-show")&&document.documentElement.classList.remove("_header-show")),r=a<=0?0:a}))})(),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{viewPass:!1};const t=document.querySelectorAll("input[placeholder],textarea[placeholder]");t.length&&t.forEach((e=>{e.hasAttribute("data-placeholder-nohide")||(e.dataset.placeholder=e.placeholder)})),document.body.addEventListener("focusin",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=""),t.hasAttribute("data-no-focus-classes")||(t.classList.add("_form-focus"),t.parentElement.classList.add("_form-focus")),h.removeError(t))})),document.body.addEventListener("focusout",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=t.dataset.placeholder),t.hasAttribute("data-no-focus-classes")||(t.classList.remove("_form-focus"),t.parentElement.classList.remove("_form-focus")),t.hasAttribute("data-validate")&&h.validateInput(t))})),e.viewPass&&document.addEventListener("click",(function(e){let t=e.target;if(t.closest('[class*="__viewpass"]')){let e=t.classList.contains("_viewpass-active")?"password":"text";t.parentElement.querySelector("input").setAttribute("type",e),t.classList.toggle("_viewpass-active")}}))}({viewPass:!1}),function(){const e=document.forms;if(e.length)for(const s of e)s.addEventListener("submit",(function(e){t(e.target,e)})),s.addEventListener("reset",(function(e){const t=e.target;h.formClean(t)}));async function t(e,t){if(0===(e.hasAttribute("data-no-validate")?0:h.getErrors(e))){if(e.hasAttribute("data-ajax")){t.preventDefault();const i=e.getAttribute("action")?e.getAttribute("action").trim():"#",n=e.getAttribute("method")?e.getAttribute("method").trim():"GET",r=new FormData(e);e.classList.add("_sending");const a=await fetch(i,{method:n,body:r});if(a.ok){let t=await a.json();e.classList.remove("_sending"),s(e,t)}else alert("error"),e.classList.remove("_sending")}else e.hasAttribute("data-dev")&&(t.preventDefault(),s(e))}else{t.preventDefault();const s=e.querySelector("._form-error");s&&e.hasAttribute("data-goto-error")&&gotoBlock(s,!0,1e3)}}function s(e){document.dispatchEvent(new CustomEvent("formSent",{detail:{form:e}})),h.formClean(e)}}(),function(){const e=document.querySelectorAll(".quantity");e.length&&e.forEach((e=>{const t=e.querySelector("input");t.addEventListener("change",(function(){/0$/.test(t.value)&&(t.value="1")})),t.addEventListener("focusout",(function(){t.value||(t.value="1")}))})),document.addEventListener("click",(function(e){let t=e.target;if(t.closest(".quantity__button")){let e=parseInt(t.closest(".quantity").querySelector("input").value);t.classList.contains("quantity__button_plus")?e++:(--e,e<1&&(e=1)),t.closest(".quantity").querySelector("input").value=e}}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,