(()=>{var e={726:()=>{function e(e){this.type=e}e.prototype.init=function(){const e=this;this.оbjects=[],this.daClassname="_dynamic_adapt_",this.nodes=document.querySelectorAll("[data-da]");for(let e=0;e<this.nodes.length;e++){const t=this.nodes[e],s=t.dataset.da.trim().split(","),i={};i.element=t,i.parent=t.parentNode,i.destination=document.querySelector(s[0].trim()),i.breakpoint=s[1]?s[1].trim():"767",i.place=s[2]?s[2].trim():"last",i.index=this.indexInParent(i.parent,i.element),this.оbjects.push(i)}this.arraySort(this.оbjects),this.mediaQueries=Array.prototype.map.call(this.оbjects,(function(e){return"("+this.type+"-width: "+e.breakpoint+"px),"+e.breakpoint}),this),this.mediaQueries=Array.prototype.filter.call(this.mediaQueries,(function(e,t,s){return Array.prototype.indexOf.call(s,e)===t}));for(let t=0;t<this.mediaQueries.length;t++){const s=this.mediaQueries[t],i=String.prototype.split.call(s,","),r=window.matchMedia(i[0]),n=i[1],a=Array.prototype.filter.call(this.оbjects,(function(e){return e.breakpoint===n}));r.addListener((function(){e.mediaHandler(r,a)})),this.mediaHandler(r,a)}},e.prototype.mediaHandler=function(e,t){if(e.matches)for(let e=0;e<t.length;e++){const s=t[e];s.index=this.indexInParent(s.parent,s.element),this.moveTo(s.place,s.element,s.destination)}else for(let e=t.length-1;e>=0;e--){const s=t[e];s.element.classList.contains(this.daClassname)&&this.moveBack(s.parent,s.element,s.index)}},e.prototype.moveTo=function(e,t,s){t.classList.add(this.daClassname),"last"===e||e>=s.children.length?s.insertAdjacentElement("beforeend",t):"first"!==e?s.children[e].insertAdjacentElement("beforebegin",t):s.insertAdjacentElement("afterbegin",t)},e.prototype.moveBack=function(e,t,s){t.classList.remove(this.daClassname),void 0!==e.children[s]?e.children[s].insertAdjacentElement("beforebegin",t):e.insertAdjacentElement("beforeend",t)},e.prototype.indexInParent=function(e,t){const s=Array.prototype.slice.call(e.children);return Array.prototype.indexOf.call(s,t)},e.prototype.arraySort=function(e){"min"===this.type?Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?-1:"last"===e.place||"first"===t.place?1:e.place-t.place:e.breakpoint-t.breakpoint})):Array.prototype.sort.call(e,(function(e,t){return e.breakpoint===t.breakpoint?e.place===t.place?0:"first"===e.place||"last"===t.place?1:"last"===e.place||"first"===t.place?-1:t.place-e.place:t.breakpoint-e.breakpoint}))};new e("max").init()},23:()=>{if(document.getElementById("map")){window.map=null,async function(){await ymaps3.ready;const e={center:window.innerWidth>768?[30.29070872801772,59.96487327442857]:[30.285804994973198,59.96628435583354],zoom:15},t={center:[30.286780500000003,59.96677256415152],zoom:15},{YMap:s,YMapDefaultSchemeLayer:i,YMapDefaultFeaturesLayer:r,YMapMarker:n}=ymaps3,a=new s(document.getElementById("map"),{location:e,behaviors:["drag"]});a.addChild(new i),a.addChild(new r);const l=document.createElement("img");l.className="marker",l.src="../app/img/icons/pin.svg",l.onclick=()=>a.update({location:{...t,duration:400}}),a.addChild(new n({coordinates:t.center},l))}()}},807:e=>{var t=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,s),n.exports}s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";let e=!0;const t=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(setTimeout((()=>{document.documentElement.classList.remove("lock")}),t),e=!1,setTimeout((function(){e=!0}),t))},i=function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:500;e&&(document.documentElement.classList.add("lock"),e=!1,setTimeout((function(){e=!0}),t))},r=()=>{i(),document.documentElement.classList.add("_menu-opened")},n=()=>{t(),document.documentElement.classList.remove("_menu-opened")},a=(e,t)=>{for(var s=0;s<e.length;s++)e[s].classList.remove(t)},l=e=>window.innerWidth>768?.005208335*window.innerWidth*e:100/390*(.1*window.innerWidth)*e;let o=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;e.classList.contains("_slide")||(e.classList.add("_slide"),e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=`${e.offsetHeight}px`,e.offsetHeight,e.style.overflow="hidden",e.style.height=s?`${s}rem`:"0",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,window.setTimeout((()=>{e.hidden=!s,!s&&e.style.removeProperty("height"),e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),!s&&e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideUpDone",{detail:{target:e}}))}),t))},c=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;return e.hidden?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(!e.classList.contains("_slide")){e.classList.add("_slide"),e.hidden=!e.hidden&&null,s&&e.style.removeProperty("height");let i=e.offsetHeight;e.style.overflow="hidden",e.style.height=s?`${s}rem`:"0",e.style.paddingTop=0,e.style.paddingBottom=0,e.style.marginTop=0,e.style.marginBottom=0,e.offsetHeight,e.style.transitionProperty="height, margin, padding",e.style.transitionDuration=t+"ms",e.style.height=i+"px",e.style.removeProperty("padding-top"),e.style.removeProperty("padding-bottom"),e.style.removeProperty("margin-top"),e.style.removeProperty("margin-bottom"),window.setTimeout((()=>{e.style.removeProperty("height"),e.style.removeProperty("overflow"),e.style.removeProperty("transition-duration"),e.style.removeProperty("transition-property"),e.classList.remove("_slide"),document.dispatchEvent(new CustomEvent("slideDownDone",{detail:{target:e}}))}),t)}}(e,t):o(e,t)};let d={getErrors(e){let t=0,s=e.querySelectorAll("*[data-required]");return s.length&&s.forEach((e=>{null===e.offsetParent&&"SELECT"!==e.tagName||e.disabled||(t+=this.validateInput(e))})),t},validateInput(e){let t=0;return"email"===e.dataset.required?(e.value=e.value.replace(" ",""),this.emailTest(e)?(this.addError(e),t++):this.removeError(e)):("checkbox"!==e.type||e.checked)&&e.value.trim()?this.removeError(e):(this.addError(e),t++),t},addError(e){e.classList.add("_form-error"),e.parentElement.classList.add("_form-error");let t=e.parentElement.querySelector(".form__error");t&&e.parentElement.removeChild(t),e.dataset.error&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="form__error">${e.dataset.error}</div>`)},removeError(e){e.classList.remove("_form-error"),e.parentElement.classList.remove("_form-error"),e.parentElement.querySelector(".form__error")&&e.parentElement.removeChild(e.parentElement.querySelector(".form__error"))},formClean(e){e.reset(),setTimeout((()=>{let t=e.querySelectorAll("input,textarea");for(let e=0;e<t.length;e++){const s=t[e];s.parentElement.classList.remove("_form-focus"),s.classList.remove("_form-focus"),d.removeError(s)}let s=e.querySelectorAll(".checkbox__input");if(s.length>0)for(let e=0;e<s.length;e++){s[e].checked=!1}}),0)},emailTest:e=>!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)};function u(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function p(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:u(t[s])&&u(e[s])&&Object.keys(t[s]).length>0&&p(e[s],t[s])}))}const h={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function m(){const e="undefined"!=typeof document?document:{};return p(e,h),e}const f={document:h,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function v(){const e="undefined"!=typeof window?window:{};return p(e,f),e}function g(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function b(){return Date.now()}function w(e,t){void 0===t&&(t="x");const s=v();let i,r,n;const a=function(e){const t=v();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=a.transform||a.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===r?"":r)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=n.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}function y(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function E(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],n=Object.getOwnPropertyDescriptor(r,i);void 0!==n&&n.enumerable&&(y(e[i])&&y(r[i])?r[i].__swiper__?e[i]=r[i]:E(e[i],r[i]):!y(e[i])&&y(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:E(e[i],r[i])):e[i]=r[i])}}}var s;return e}function x(e,t,s){e.style.setProperty(t,s)}function S(e){let{swiper:t,targetPosition:s,side:i}=e;const r=v(),n=-t.translate;let a,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const c=s>n?"next":"prev",d=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{a=(new Date).getTime(),null===l&&(l=a);const e=Math.max(Math.min((a-l)/o,1),0),c=.5-Math.cos(e*Math.PI)/2;let p=n+c*(s-n);if(d(p,s)&&(p=s),t.wrapperEl.scrollTo({[i]:p}),d(p,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:p})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function _(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function T(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function L(e){try{return void console.warn(e)}catch(e){}}function C(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function A(e,t){return v().getComputedStyle(e,null).getPropertyValue(t)}function M(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function k(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function O(e,t,s){const i=v();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let P,z,I;function $(){return P||(P=function(){const e=v(),t=m();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),P}function D(e){return void 0===e&&(e={}),z||(z=function(e){let{userAgent:t}=void 0===e?{}:e;const s=$(),i=v(),r=i.navigator.platform,n=t||i.navigator.userAgent,a={ios:!1,android:!1},l=i.screen.width,o=i.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/);let d=n.match(/(iPad).*OS\s([\d_]+)/);const u=n.match(/(iPod)(.*OS\s([\d_]+))?/),p=!d&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let m="MacIntel"===r;return!d&&m&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(d=n.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),m=!1),c&&!h&&(a.os="android",a.android=!0),(d||p||u)&&(a.os="ios",a.ios=!0),a}(e)),z}function q(){return I||(I=function(){const e=v();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,i]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&i<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),I}var N={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];t.apply(i,n)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],s=n.slice(1,n.length),i=e):(t=n[0].events,s=n[0].data,i=n[0].context||e),s.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const W=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},V=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},B=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,n=[s-t];return n.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{n.includes(t.column)&&V(e,s)}))}const n=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=n+t;i+=1){const t=(i%s+s)%s;(t<r||t>n)&&V(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(n+t,s-1);i+=1)i!==r&&(i>n||i<r)&&V(e,i)};var H={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(A(i,"padding-left")||0,10)-parseInt(A(i,"padding-right")||0,10),s=s-parseInt(A(i,"padding-top")||0,10)-parseInt(A(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:a,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,c=o?e.virtual.slides.length:e.slides.length,d=T(r,`.${e.params.slideClass}, swiper-slide`),u=o?e.virtual.slides.length:d.length;let p=[];const h=[],m=[];let f=s.slidesOffsetBefore;"function"==typeof f&&(f=s.slidesOffsetBefore.call(e));let v=s.slidesOffsetAfter;"function"==typeof v&&(v=s.slidesOffsetAfter.call(e));const g=e.snapGrid.length,b=e.slidesGrid.length;let w=s.spaceBetween,y=-f,E=0,S=0;if(void 0===n)return;"string"==typeof w&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*n:"string"==typeof w&&(w=parseFloat(w)),e.virtualSize=-w,d.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(x(i,"--swiper-centered-offset-before",""),x(i,"--swiper-centered-offset-after",""));const _=s.grid&&s.grid.rows>1&&e.grid;let L;_?e.grid.initSlides(d):e.grid&&e.grid.unsetSlides();const C="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let r;if(L=0,d[i]&&(r=d[i]),_&&e.grid.updateSlide(i,r,d),!d[i]||"none"!==A(r,"display")){if("auto"===s.slidesPerView){C&&(d[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),a=r.style.transform,l=r.style.webkitTransform;if(a&&(r.style.transform="none"),l&&(r.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?O(r,"width",!0):O(r,"height",!0);else{const e=t(n,"width"),s=t(n,"padding-left"),i=t(n,"padding-right"),a=t(n,"margin-left"),l=t(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+a+l;else{const{clientWidth:t,offsetWidth:n}=r;L=e+s+i+a+l+(n-t)}}a&&(r.style.transform=a),l&&(r.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(n-(s.slidesPerView-1)*w)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),d[i]&&(d[i].style[e.getDirectionLabel("width")]=`${L}px`);d[i]&&(d[i].swiperSlideSize=L),m.push(L),s.centeredSlides?(y=y+L/2+E/2+w,0===E&&0!==i&&(y=y-n/2-w),0===i&&(y=y-n/2-w),Math.abs(y)<.001&&(y=0),s.roundLengths&&(y=Math.floor(y)),S%s.slidesPerGroup==0&&p.push(y),h.push(y)):(s.roundLengths&&(y=Math.floor(y)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&p.push(y),h.push(y),y=y+L+w),e.virtualSize+=L+w,E=L,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+v,a&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+w}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),_&&e.grid.updateWrapperSize(L,p),!s.centeredSlides){const t=[];for(let i=0;i<p.length;i+=1){let r=p[i];s.roundLengths&&(r=Math.floor(r)),p[i]<=e.virtualSize-n&&t.push(r)}p=t,Math.floor(e.virtualSize-n)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-n)}if(o&&s.loop){const t=m[0]+w;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),r=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)p.push(p[p.length-1]+r)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&p.push(p[p.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===p.length&&(p=[0]),0!==w){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");d.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==d.length-1)).forEach((e=>{e.style[t]=`${w}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(w||0)})),e-=w;const t=e-n;p=p.map((e=>e<=0?-f:e>t?t+v:e))}if(s.centerInsufficientSlides){let e=0;if(m.forEach((t=>{e+=t+(w||0)})),e-=w,e<n){const t=(n-e)/2;p.forEach(((e,s)=>{p[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:d,snapGrid:p,slidesGrid:h,slidesSizesGrid:m}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){x(i,"--swiper-centered-offset-before",-p[0]+"px"),x(i,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),p.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);u<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(a(e))}else s.push(a(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:n}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;r&&(a=e),i.forEach((e=>{e.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let c=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(c-=i[0].swiperSlideOffset);const d=(a+(s.centeredSlides?t.minTranslate():0)-c)/(o.swiperSlideSize+l),u=(a-n[0]+(s.centeredSlides?t.minTranslate():0)-c)/(o.swiperSlideSize+l),p=-(a-c),h=p+t.slidesSizesGrid[e],m=p>=0&&p<=t.size-t.slidesSizesGrid[e];(p>=0&&p<t.size-1||h>1&&h<=t.size||p<=0&&h>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),i[e].classList.add(s.slideVisibleClass)),m&&i[e].classList.add(s.slideFullyVisibleClass),o.progress=r?-d:d,o.originalProgress=r?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:a,progressLoop:l}=t;const o=n,c=a;if(0===i)r=0,n=!0,a=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;n=s||r<=0,a=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],n=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/a:(o+a-n)/a,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:n,isEnd:a}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),a&&!c&&t.emit("reachEnd toEdge"),(o&&!n||c&&!a)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,n=e.virtual&&s.virtual.enabled,a=e.grid&&s.grid&&s.grid.rows>1,l=e=>T(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,c,d;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),n)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${r}"]`);else a?(o=t.filter((e=>e.column===r))[0],d=t.filter((e=>e.column===r+1))[0],c=t.filter((e=>e.column===r-1))[0]):o=t[r];o&&(o.classList.add(s.slideActiveClass),a?(d&&d.classList.add(s.slideNextClass),c&&c.classList.add(s.slidePrevClass)):(d=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!d&&(d=t[0]),d&&d.classList.add(s.slideNextClass),c=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!c&&(c=t[t.length-1]),c&&c.classList.add(s.slidePrevClass))),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:n,realIndex:a,snapIndex:l}=t;let o,c=e;const d=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===c&&(c=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,c);o=e+Math.floor((c-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),c===n&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(c===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=d(c));const u=t.grid&&r.grid&&r.grid.rows>1;let p;if(t.virtual&&r.virtual.enabled&&r.loop)p=d(c);else if(u){const e=t.slides.filter((e=>e.column===c))[0];let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),p=Math.floor(s/r.grid.rows)}else if(t.slides[c]){const e=t.slides[c].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):c}else p=c;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:a,realIndex:p,previousIndex:n,activeIndex:c}),t.initialized&&B(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let n,a=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){a=!0,n=e;break}if(!r||!a)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=n,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var G={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let n=w(r,e);return n+=this.cssOverflowAdjustment(),s&&(n=-n),n||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:n,progress:a}=s;let l,o=0,c=0;s.isHorizontal()?o=i?-e:e:c=e,r.roundLengths&&(o=Math.floor(o),c=Math.floor(c)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:c,r.cssMode?n[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-c:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():c-=s.cssOverflowAdjustment(),n.style.transform=`translate3d(${o}px, ${c}px, 0px)`);const d=s.maxTranslate()-s.minTranslate();l=0===d?0:(e-s.minTranslate())/d,l!==a&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const n=this,{params:a,wrapperEl:l}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const o=n.minTranslate(),c=n.maxTranslate();let d;if(d=i&&e>o?o:i&&e<c?c:e,n.updateProgress(d),a.cssMode){const e=n.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-d;else{if(!n.support.smoothScroll)return S({swiper:n,targetPosition:-d,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(d),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(d),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,s&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function R(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:n,previousIndex:a}=t;let l=i;if(l||(l=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${r}`),s&&n!==a){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var j={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:l,snapGrid:o,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:p,wrapperEl:h,enabled:m}=n;if(n.animating&&l.preventInteractionOnTransition||!m&&!i&&!r)return!1;const f=Math.min(n.params.slidesPerGroupSkip,a);let v=f+Math.floor((a-f)/n.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const g=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*g),s=Math.floor(100*c[e]),i=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=s&&t<i-(i-s)/2?a=e:t>=s&&t<i&&(a=e+1):t>=s&&(a=e)}if(n.initialized&&a!==u){if(!n.allowSlideNext&&(p?g>n.translate&&g>n.minTranslate():g<n.translate&&g<n.minTranslate()))return!1;if(!n.allowSlidePrev&&g>n.translate&&g>n.maxTranslate()&&(u||0)!==a)return!1}let b;if(a!==(d||0)&&s&&n.emit("beforeSlideChangeStart"),n.updateProgress(g),b=a>u?"next":a<u?"prev":"reset",p&&-g===n.translate||!p&&g===n.translate)return n.updateActiveIndex(a),l.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==l.effect&&n.setTranslate(g),"reset"!==b&&(n.transitionStart(s,b),n.transitionEnd(s,b)),!1;if(l.cssMode){const e=n.isHorizontal(),s=p?g:-g;if(0===t){const t=n.virtual&&n.params.virtual.enabled;t&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),t&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}))}else{if(!n.support.smoothScroll)return S({swiper:n,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(s,b),0===t?n.transitionEnd(s,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(s,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const r=this,n=r.grid&&r.params.grid&&r.params.grid.rows>1;let a=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)a+=r.virtual.slidesBefore;else{let e;if(n){const t=a*r.params.grid.rows;e=r.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=r.getSlideIndexByData(a);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:s}=r.params;let i=r.params.slidesPerView;"auto"===i?i=r.slidesPerViewDynamic():(i=Math.ceil(parseFloat(r.params.slidesPerView,10)),s&&i%2==0&&(i+=1));let l=t-e<i;if(s&&(l=l||e<Math.ceil(i/2)),l){const i=s?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?r.realIndex:void 0})}if(n){const e=a*r.params.grid.rows;a=r.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else a=r.getSlideIndexByData(a)}return requestAnimationFrame((()=>{r.slideTo(a,t,s,i)})),r},slideNext:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{enabled:r,params:n,animating:a}=i;if(!r)return i;let l=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<n.slidesPerGroupSkip?1:l,c=i.virtual&&n.virtual.enabled;if(n.loop){if(a&&!c&&n.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return n.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);const i=this,{params:r,snapGrid:n,slidesGrid:a,rtlTranslate:l,enabled:o,animating:c}=i;if(!o)return i;const d=i.virtual&&r.virtual.enabled;if(r.loop){if(c&&!d&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=u(l?i.translate:-i.translate),h=n.map((e=>u(e)));let m=n[h.indexOf(p)-1];if(void 0===m&&r.cssMode){let e;n.forEach(((t,s)=>{p>=t&&(e=s)})),void 0!==e&&(m=n[e>0?e-1:e])}let f=0;if(void 0!==m&&(f=a.indexOf(m),f<0&&(f=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;let n=r.activeIndex;const a=Math.min(r.params.slidesPerGroupSkip,n),l=a+Math.floor((n-a)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex(T(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),g((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex(T(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),g((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var F={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{T(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&s.grid&&s.grid.rows>1,a=s.slidesPerGroup*(n?s.grid.rows:1),l=t.slides.length%a!=0,o=n&&t.slides.length%s.grid.rows!=0,c=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?C("swiper-slide",[s.slideBlankClass]):C("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){c(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else if(o){if(s.loopAddBlankSlides){c(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else L("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");r()}else r();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:n,byController:a,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:p,params:h}=o,{centeredSlides:m}=h;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&h.virtual.enabled)return s&&(h.centeredSlides||0!==o.snapIndex?h.centeredSlides&&o.snapIndex<h.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=d,o.allowSlideNext=u,void o.emit("loopFix");let f=h.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(h.slidesPerView,10)),m&&f%2==0&&(f+=1));const v=h.slidesPerGroupAuto?f:h.slidesPerGroup;let g=v;g%v!=0&&(g+=v-g%v),g+=h.loopAdditionalSlides,o.loopedSlides=g;const b=o.grid&&h.grid&&h.grid.rows>1;c.length<f+g?L("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===h.grid.fill&&L("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let E=o.activeIndex;void 0===n?n=o.getSlideIndex(c.filter((e=>e.classList.contains(h.slideActiveClass)))[0]):E=n;const x="next"===i||!i,S="prev"===i||!i;let _=0,T=0;const C=b?Math.ceil(c.length/h.grid.rows):c.length,A=(b?c[n].column:n)+(m&&void 0===r?-f/2+.5:0);if(A<g){_=Math.max(g-A,v);for(let e=0;e<g-A;e+=1){const t=e-Math.floor(e/C)*C;if(b){const e=C-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&w.push(t)}else w.push(C-t-1)}}else if(A+f>C-g){T=Math.max(A-(C-2*g),v);for(let e=0;e<T;e+=1){const t=e-Math.floor(e/C)*C;b?c.forEach(((e,s)=>{e.column===t&&y.push(s)})):y.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),S&&w.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),x&&y.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===h.slidesPerView?o.updateSlides():b&&(w.length>0&&S||y.length>0&&x)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),h.watchSlidesProgress&&o.updateSlidesOffset(),s)if(w.length>0&&S){if(void 0===t){const e=o.slidesGrid[E],t=o.slidesGrid[E+_]-e;l?o.setTranslate(o.translate-t):(o.slideTo(E+_,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(r){const e=b?w.length/h.grid.rows:w.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(y.length>0&&x)if(void 0===t){const e=o.slidesGrid[E],t=o.slidesGrid[E-T]-e;l?o.setTranslate(o.translate-t):(o.slideTo(E-T,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?y.length/h.grid.rows:y.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=d,o.allowSlideNext=u,o.controller&&o.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===h.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function Y(e,t,s){const i=v(),{params:r}=e,n=r.edgeSwipeDetection,a=r.edgeSwipeThreshold;return!n||!(s<=a||s>=i.innerWidth-a)||"prevent"===n&&(t.preventDefault(),!0)}function X(e){const t=this,s=m();let i=e;i.originalEvent&&(i=i.originalEvent);const r=t.touchEventsData;if("pointerdown"===i.type){if(null!==r.pointerId&&r.pointerId!==i.pointerId)return;r.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(r.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void Y(t,i,i.targetTouches[0].pageX);const{params:n,touches:a,enabled:l}=t;if(!l)return;if(!n.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let o=i.target;if("wrapper"===n.touchEventsTarget&&!t.wrapperEl.contains(o))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(r.isTouched&&r.isMoved)return;const c=!!n.noSwipingClass&&""!==n.noSwipingClass,d=i.composedPath?i.composedPath():i.path;c&&i.target&&i.target.shadowRoot&&d&&(o=d[0]);const u=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,p=!(!i.target||!i.target.shadowRoot);if(n.noSwiping&&(p?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===m()||s===v())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(u,o):o.closest(u)))return void(t.allowClick=!0);if(n.swipeHandler&&!o.closest(n.swipeHandler))return;a.currentX=i.pageX,a.currentY=i.pageY;const h=a.currentX,f=a.currentY;if(!Y(t,i,h))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=h,a.startY=f,r.touchStartTime=b(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let g=!0;o.matches(r.focusableElements)&&(g=!1,"SELECT"===o.nodeName&&(r.isTouched=!1)),s.activeElement&&s.activeElement.matches(r.focusableElements)&&s.activeElement!==o&&s.activeElement.blur();const w=g&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!w||o.isContentEditable||i.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function U(e){const t=m(),s=this,i=s.touchEventsData,{params:r,touches:n,rtlTranslate:a,enabled:l}=s;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let o,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==i.touchId)return;if(c.pointerId!==i.pointerId)return}if("touchmove"===c.type){if(o=[...c.changedTouches].filter((e=>e.identifier===i.touchId))[0],!o||o.identifier!==i.touchId)return}else o=c;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",c));const d=o.pageX,u=o.pageY;if(c.preventedByNestedSwiper)return n.startX=d,void(n.startY=u);if(!s.allowTouchMove)return c.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:d,startY:u,currentX:d,currentY:u}),i.touchStartTime=b()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(u<n.startY&&s.translate<=s.maxTranslate()||u>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(d<n.startX&&s.translate<=s.maxTranslate()||d>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",c),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=d,n.currentY=u;const p=n.currentX-n.startX,h=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(p**2+h**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:p*p+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(p))/Math.PI,i.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",c),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!r.cssMode&&c.cancelable&&c.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&c.stopPropagation();let f=s.isHorizontal()?p:h,v=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(f=Math.abs(f)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),n.diff=f,f*=r.touchRatio,a&&(f=-f,v=-v);const g=s.touchesDirection;s.swipeDirection=f>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const w=s.params.loop&&!r.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(w&&y&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",c)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&g!==s.touchesDirection&&w&&y&&Math.abs(f)>=1)return Object.assign(n,{startX:d,startY:u,currentX:d,currentY:u,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=f+i.startTranslate;let E=!0,x=r.resistanceRatio;if(r.touchReleaseOnEdges&&(x=0),f>0?(w&&y&&i.allowThresholdMove&&i.currentTranslate>(r.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(E=!1,r.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+f)**x))):f<0&&(w&&y&&i.allowThresholdMove&&i.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(E=!1,r.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-f)**x))),E&&(c.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(f)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function Q(e){const t=this,s=t.touchEventsData;let i,r=e;r.originalEvent&&(r=r.originalEvent);if("touchend"===r.type||"touchcancel"===r.type){if(i=[...r.changedTouches].filter((e=>e.identifier===s.touchId))[0],!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)){if(!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:n,touches:a,rtlTranslate:l,slidesGrid:o,enabled:c}=t;if(!c)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&n.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);n.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const d=b(),u=d-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),u<300&&d-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=b(),g((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===a.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let p;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,p=n.followFinger?l?t.translate:-t.translate:-s.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:p});let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?p>=o[e]&&p<o[e+t]&&(h=e,m=o[e+t]-o[e]):p>=o[e]&&(h=e,m=o[o.length-1]-o[o.length-2])}let f=null,v=null;n.rewind&&(t.isBeginning?v=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const w=(p-o[h])/m,y=h<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(u>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?f:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(w>1-n.longSwipesRatio?t.slideTo(h+y):null!==v&&w<0&&Math.abs(w)>n.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h):("next"===t.swipeDirection&&t.slideTo(null!==f?f:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h))}}function K(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function Z(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function J(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ee(e){const t=this;W(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function te(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const se=(e,t)=>{const s=m(),{params:i,el:r,wrapperEl:n,device:a}=e,l=!!i.nested,o="on"===t?"addEventListener":"removeEventListener",c=t;s[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),r[o]("touchstart",e.onTouchStart,{passive:!1}),r[o]("pointerdown",e.onTouchStart,{passive:!1}),s[o]("touchmove",e.onTouchMove,{passive:!1,capture:l}),s[o]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[o]("touchend",e.onTouchEnd,{passive:!0}),s[o]("pointerup",e.onTouchEnd,{passive:!0}),s[o]("pointercancel",e.onTouchEnd,{passive:!0}),s[o]("touchcancel",e.onTouchEnd,{passive:!0}),s[o]("pointerout",e.onTouchEnd,{passive:!0}),s[o]("pointerleave",e.onTouchEnd,{passive:!0}),s[o]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[o]("click",e.onClick,!0),i.cssMode&&n[o]("scroll",e.onScroll),i.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",K,!0):e[c]("observerUpdate",K,!0),r[o]("load",e.onLoad,{capture:!0})};const ie=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var re={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function ne(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),E(t,s)):E(t,s)):E(t,s)}}const ae={eventsEmitter:N,update:H,translate:G,transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),R({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),R({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:j,loop:F,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=X.bind(e),e.onTouchMove=U.bind(e),e.onTouchEnd=Q.bind(e),e.onDocumentTouchStart=te.bind(e),t.cssMode&&(e.onScroll=J.bind(e)),e.onClick=Z.bind(e),e.onLoad=ee.bind(e),se(e,"on")},detachEvents:function(){se(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const a=e.getBreakpoint(n,e.params.breakpointsBase,e.el);if(!a||e.currentBreakpoint===a)return;const l=(a in n?n[a]:void 0)||e.originalParams,o=ie(e,i),c=ie(e,l),d=i.enabled;o&&!c?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&c&&(r.classList.add(`${i.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const s=i[t]&&i[t].enabled,r=l[t]&&l[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const u=l.direction&&l.direction!==i.direction,p=i.loop&&(l.slidesPerView!==i.slidesPerView||u),h=i.loop;u&&s&&e.changeDirection(),E(e.params,l);const m=e.params.enabled,f=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),d&&!m?e.disable():!d&&m&&e.enable(),e.currentBreakpoint=a,e.emit("_beforeBreakpoint",l),s&&(p?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&f?(e.loopCreate(t),e.updateSlides()):h&&!f&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=v(),n="window"===t?r.innerHeight:s.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:n,value:l}=a[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(i=n):l<=s.clientWidth&&(i=n)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:n}=e,a=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...a),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},le={};class oe{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=E({},t),e&&!t.el&&(t.el=e);const n=m();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((s=>{const i=E({},t,{el:s});e.push(new oe(i))})),e}const a=this;a.__swiper__=!0,a.support=$(),a.device=D({userAgent:t.userAgent}),a.browser=q(),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const l={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:ne(t,l),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const o=E({},re,l);return a.params=E({},o,le,t),a.originalParams=E({},a.params),a.passedParams=E({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===a.params.direction,isVertical:()=>"vertical"===a.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=M(T(t,`.${s.slideClass}, swiper-slide`)[0]);return M(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=T(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:n,size:a,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?i[l].swiperSlideSize:0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>a&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>a&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1){(t?r[e]+n[e]-r[l]<a:r[e]-r[l]<a)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){r[l]-r[e]<a&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&W(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&"SWIPER-CONTAINER"===s.parentNode.host.nodeName&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(i())}return T(s,i())[0]})();return!r&&t.params.createElements&&(r=C("div",t.params.wrapperClass),s.append(r),T(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===A(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===A(s,"direction")),wrongRTL:"-webkit-box"===A(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?W(t,e):e.addEventListener("load",(e=>{W(t,e.target)}))})),B(t),t.initialized=!0,B(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:n,slides:a}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r.removeAttribute("style"),n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){E(le,e)}static get extendedDefaults(){return le}static get defaults(){return re}static installModule(e){oe.prototype.__modules__||(oe.prototype.__modules__=[]);const t=oe.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>oe.installModule(e))),oe):(oe.installModule(e),oe)}}function ce(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let n=T(e.el,`.${i[r]}`)[0];n||(n=C("div",i[r]),n.className=i[r],e.el.append(n)),s[r]=n,t[r]=n}})),s}function de(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const n=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function a(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s.length>1&&1===t.el.querySelectorAll(e).length&&(s=t.el.querySelector(e))),e&&!s?e:s)}function l(e,s){const i=t.params.navigation;(e=n(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return l(s,!1),void l(e,!1);l(s,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function c(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function u(){const e=t.params.navigation;if(t.params.navigation=ce(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=a(e.nextEl),i=a(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=n(s),i=n(i);const r=(s,i)=>{s&&s.addEventListener("click","next"===i?d:c),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}function p(){let{nextEl:e,prevEl:s}=t.navigation;e=n(e),s=n(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?d:c),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}i("init",(()=>{!1===t.params.navigation.enabled?h():(u(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{p()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=n(e),s=n(s),t.enabled?o():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:a}=t.navigation;i=n(i),a=n(a);const l=s.target;if(t.params.navigation.hideOnClick&&!a.includes(l)&&!i.includes(l)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...i,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const h=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),u(),o()},disable:h,update:o,init:u,destroy:p})}function ue(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function pe(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n="swiper-pagination";let a;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;const o=e=>(Array.isArray(e)?e:[e]).filter((e=>!!e));function c(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function u(e){const s=e.target.closest(ue(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=M(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;t.slideToLoop(i)}else t.slideTo(i)}function p(){const e=t.rtl,s=t.params.pagination;if(c())return;let i,n,u=t.pagination.el;u=o(u);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,h=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let o,c,p;if(s.dynamicBullets&&(a=O(r[0],t.isHorizontal()?"width":"height",!0),u.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==n&&(l+=i-(n||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),c=o+(Math.min(r.length,s.dynamicMainBullets)-1),p=(c+o)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),u.length>1)r.forEach((e=>{const r=M(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=o&&r<=c&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===o&&d(e,"prev"),r===c&&d(e,"next"))}));else{const e=r[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=r[o],t=r[c];for(let e=o;e<=c;e+=1)r[e]&&r[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(r.length,s.dynamicMainBullets+4),n=(a*i-a)/2-p*a,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${n}px`}))}}u.forEach(((e,n)=>{if("fraction"===s.type&&(e.querySelectorAll(ue(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(ue(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(h)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(i+1)/h;let a=1,l=1;"horizontal"===r?a=n:l=n,e.querySelectorAll(ue(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,h),0===n&&r("paginationRender",e)):(0===n&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function h(){const e=t.params.pagination;if(c())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=o(i);let n="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?n+=e.renderBullet.call(t,s,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(ue(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",i[0])}function m(){t.params.pagination=ce(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.filter((e=>k(e,".swiper")[0]===t.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=o(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",u),t.enabled||s.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(c())return;let s=t.pagination.el;s&&(s=o(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",u))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=o(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?v():(m(),h(),p())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),i("snapIndexChange",(()=>{p()})),i("snapGridLengthChange",(()=>{h(),p()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{p()})),i("click",((e,s)=>{const i=s.target,n=o(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const v=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=o(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),h(),p()},disable:v,render:h,update:p,init:m,destroy:f})}function he(e,t){const s=_(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function me(e){let{swiper:t,duration:s,transformElements:i,allSlides:r}=e;const{activeIndex:n}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=r?i:i.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0];return e.parentElement})(e):e;return t.getSlideIndex(s)===n})),e.forEach((e=>{!function(e,t){t&&e.addEventListener("transitionend",(function s(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",s))}))}(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function fe(e){let{swiper:t,extendParams:s,on:i}=e;s({fadeEffect:{crossFade:!1}});!function(e){const{effect:t,swiper:s,on:i,setTranslate:r,setTransition:n,overwriteParams:a,perspective:l,recreateShadows:o,getEffectParams:c}=e;let d;i("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=a?a():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),i("setTranslate",(()=>{s.params.effect===t&&r()})),i("setTransition",((e,i)=>{s.params.effect===t&&n(i)})),i("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!c||!c().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),i("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(d=!0),requestAnimationFrame((()=>{d&&s.slides&&s.slides.length&&(r(),d=!1)})))}))}({effect:"fade",swiper:t,on:i,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let s=0;s<e.length;s+=1){const e=t.slides[s];let i=-e.swiperSlideOffset;t.params.virtualTranslate||(i-=t.translate);let r=0;t.isHorizontal()||(r=i,i=0);const n=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),a=he(0,e);a.style.opacity=n,a.style.transform=`translate3d(${i}px, ${r}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>_(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),me({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})}Object.keys(ae).forEach((e=>{Object.keys(ae[e]).forEach((t=>{oe.prototype[t]=ae[e][t]}))})),oe.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=v();let n=null,a=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,n=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:a}=e;a&&a!==t.el||(r=i?i.width:(s[0]||s).inlineSize,n=i?i.height:(s[0]||s).blockSize)})),r===s&&n===i||l()}))})),n.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",o))})),s("destroy",(()=>{a&&r.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n=[],a=v(),l=function(e,s){void 0===s&&(s={});const i=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const s=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(s):a.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),n.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=k(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]);let ve=null,ge=null;const be=(e,t,s)=>{const i=e.slides;i.length&&t&&i.forEach((e=>{e.querySelector(s).innerHTML=`${t.querySelector(".swiper-pagination-bullet-active").innerHTML}`}))},we=(e,t)=>{t&&e.el&&(t.innerHTML=`${e.el.querySelector(".swiper-pagination-bullet-active").innerHTML}`)},ye=e=>{if(e.slides.length>=4){const t=e.pagination.bullets,s=e.slides,i=e.realIndex;t.length?(a(t,"_revealed"),window.innerWidth<=768&&t[i].classList.add("_revealed"),t[i+1]&&t[i+1].classList.add("_revealed"),t[i+2]&&t[i+2].classList.add("_revealed"),window.innerWidth>768&&t[i+3]&&t[i+3].classList.add("_revealed"),window.innerWidth<=768&&(i===s.length-2||i===s.length-1)&&(t[s.length-3].classList.add("_revealed"),t[s.length-2].classList.add("_revealed"),t[s.length-1].classList.add("_revealed")),window.innerWidth>768&&i===s.length-1&&(t[0].classList.add("_revealed"),t[1].classList.add("_revealed"),t[2].classList.add("_revealed"))):window.innerWidth>768&&t.forEach((e=>{e.classList.contains("swiper-pagination-bullet-active")||e.classList.add("_revealed")}))}},Ee=e=>{const t=Array.from(e.el.querySelectorAll(".swiper-slide"));a(t,"_revealed"),t.forEach(((e,s)=>{e.classList.contains("swiper-slide-active")&&(t[s].classList.add("_revealed"),window.innerWidth>768&&(t[s+1]&&t[s+1].classList.add("_revealed"),t[s+2]&&t[s+2].classList.add("_revealed"),document.querySelector(".catalog-page")&&t[s+3]&&t[s+3].classList.add("_revealed")))}))},xe=()=>{document.querySelector(".search-box__slider")&&new oe(".search-box__slider",{modules:[de,fe],observer:!0,observeParents:!0,observeSlideChildren:!0,slidesPerView:1.5,spaceBetween:50,speed:700,loop:!0,navigation:{prevEl:".search-box__slider-nav .search-box__slider-arr_prev",nextEl:".search-box__slider-nav .search-box__slider-arr_next"},breakpoints:{768:{slidesPerView:1,effect:"fade"}}}),document.querySelector(".catalog__categories")&&(window.innerWidth<=768&&!ge?ge=new oe(".catalog__categories",{observer:!0,observeParents:!0,slidesPerView:"auto",spaceBetween:l(2.5),slideToClickedSlide:!0,slideClass:"categories-catalog__item",wrapperClass:"categories-catalog__list"}):window.innerWidth>768&&ge&&(ge.destroy(),ge=null))};window.addEventListener("load",(function(e){setTimeout((()=>{document.querySelector(".hero__slider")&&new oe(".hero__slider",{modules:[de,pe],observer:!0,observeParents:!0,autoHeight:!0,slidesPerView:1,speed:800,loop:!0,navigation:{prevEl:".hero .sl-nav__arrow_prev",nextEl:".hero .sl-nav__arrow_next"},pagination:{el:".hero__sl-control .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{direction:"vertical",slidesPerView:"auto"}},on:{init:e=>{const t=e.passedParams.spaceBetween,s=e.slides[0].clientHeight+t;e.el.style.height=s+"px",be(e,e.pagination.el,".slide-hero__number")},slideChange:e=>{be(e,e.pagination.el,".slide-hero__number"),ye(e)}}}),document.querySelector(".recommendations__slider")&&new oe(".recommendations__slider",{modules:[de,pe],slidesPerView:1.4,spaceBetween:65,speed:800,loop:!0,longSwipes:!1,navigation:{prevEl:".recommendations .sl-nav__arrow_prev",nextEl:".recommendations .sl-nav__arrow_next"},pagination:{el:".recommendations .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:document.querySelector(".catalog-page")?5:4,spaceBetween:document.querySelector(".catalog-page")?90:137}},on:{afterInit:e=>{we(e.pagination,document.querySelector(".recommendations__number")),ye(e),Ee(e)},realIndexChange:e=>{we(e.pagination,document.querySelector(".recommendations__number")),ye(e)},slideChangeTransitionStart:e=>{Ee(e)},touchMove:e=>{Ee(e)}}}),document.querySelector(".tests__slider")&&new oe(".tests__slider",{modules:[de,pe],observer:!0,observeParents:!0,slidesPerView:1,spaceBetween:30,speed:1e3,loop:!0,watchSlidesProgress:!0,watchSlidesVisibility:!0,navigation:{prevEl:".tests .sl-nav__arrow_prev",nextEl:".tests .sl-nav__arrow_next"},pagination:{el:".tests .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:1.01}},on:{afterInit:e=>{we(e.pagination,document.querySelector(".tests__active-number")),ye(e)},slideChange:e=>{we(e.pagination,document.querySelector(".tests__active-number"))},realIndexChange:e=>{ye(e)}}}),document.querySelector(".collections__slider")&&new oe(".collections__slider",{modules:[de,pe],observer:!0,observeParents:!0,speed:1e3,loop:!0,slidesPerView:1.6,spaceBetween:64,watchSlidesProgress:!0,watchSlidesVisibility:!0,resistance:!1,navigation:{prevEl:".collections .sl-nav__arrow_prev",nextEl:".collections .sl-nav__arrow_next"},pagination:{el:".collections .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">0'+(e+1)+"</span>"}},breakpoints:{768:{slidesPerView:"auto",spaceBetween:"21%"}},on:{afterInit:e=>{we(e.pagination,document.querySelector(".collections__active-number"))},slideChange:e=>{e.el.classList.contains("_slide")||e.el.classList.add("_slide"),we(e.pagination,document.querySelector(".collections__active-number")),ye(e)}}}),document.querySelector(".categories__slider")&&(window.innerWidth<=768&&!ve?ve=new oe(".categories__slider",{modules:[de,pe],observer:!0,observeParents:!0,slidesPerView:2,spaceBetween:l(.8),speed:1e3,loop:!0,navigation:{prevEl:".categories .sl-nav__arrow_prev",nextEl:".categories .sl-nav__arrow_next"},pagination:{el:".categories .sl-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1<10?"0":"")+(e+1)+"</span>"}},on:{afterInit:e=>{setTimeout((()=>{ye(e)}),0)},slideChangeTransitionStart:e=>{ye(e)}}}):window.innerWidth>768&&ve&&(ve.destroy(),ve=null)),xe()}),0)})),window.addEventListener("resize",xe);s(23);new class{constructor(){this._this=this,this.classes={sel:"select",body:"select__body",label:"select__label",title:"select__title",val:"select__value",content:"select__content",options:"select__options",option:"select__option",scroll:"select__scroll",group:"select__group",inp:"select__input",asset:"select__asset",txt:"select__text",hint:"select__hint",active:"_select-active",focused:"_select-focused",opened:"_select-opened",filled:"_select-filled",selected:"_select-selected",disabled:"_select-disabled",list:"_select-list",error:"_select-error",multiple:"_select-multiple",checkbox:"_select-checkbox",label:"_select-label"};const e=document.querySelectorAll("select");e.length&&this.init(e)}init(e){e.forEach(((e,t)=>{this.initSelItem(e,t+1)})),document.addEventListener("click",function(e){this.setActions(e)}.bind(this)),document.addEventListener("keydown",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusin",function(e){this.setActions(e)}.bind(this)),document.addEventListener("focusout",function(e){this.setActions(e)}.bind(this))}initSelItem(e,t){const s=this,i=document.createElement("div");if(i.classList.add(this.classes.sel),e.parentNode.insertBefore(i,e),i.appendChild(e),e.hidden=!0,t&&(e.dataset.selId=t),this.getPlaceholder(e)&&(e.dataset.optPlaceholder=this.getPlaceholder(e).value,this.getPlaceholder(e).label.show)){this.getSelect(i,this.classes.title).twinSel.insertAdjacentHTML("afterbegin",`<span class="${this.classes.label}">${this.getPlaceholder(e).label.text?this.getPlaceholder(e).label.text:this.getPlaceholder(e).value}</span>`)}i.insertAdjacentHTML("beforeend",`<div class="${this.classes.body}"><div hidden class="${this.classes.options}"></div></div>`),this.build(e),e.dataset.speed=e.dataset.speed?e.dataset.speed:"150",e.addEventListener("change",(function(e){s.initSelections(e)}))}build(e){const t=e.parentElement;t.dataset.selId=e.dataset.selId,this.setValue(t,e),this.setOptions(t,e),e.dataset.selAddonClass&&t.classList.add(`select_${e.dataset.selAddonClass}`),e.multiple?t.classList.add(this.classes.multiple):t.classList.remove(this.classes.multiple),e.hasAttribute("data-sel-checkboxes")&&e.multiple?t.classList.add(this.classes.checkbox):t.classList.remove(this.classes.checkbox),this.disableSelect(t,e),e.hasAttribute("data-sel-search")&&this.setSearchActions(t),e.hasAttribute("data-sel-opened")&&this.setAction(t),e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selHint}</div>`),e.hasAttribute("data-show-val")?t.classList.add("_select-show-val"):t.classList.remove("_select-show-val")}setValue(e,t){const s=this.getSelect(e,this.classes.body).twinSel,i=this.getSelect(e,this.classes.title).twinSel;i&&i.remove(),s.insertAdjacentHTML("afterbegin",this.getValue(e,t))}setOptions(e,t){const s=this.getSelect(e,this.classes.options).twinSel;s.innerHTML=this.getOptions(t),s.querySelector(`.${this.classes.option}`).classList.add(this.classes.selected)}disableSelect(e,t){t.disabled?(e.classList.add(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!0):(e.classList.remove(this.classes.disabled),this.getSelect(e,this.classes.title).twinSel.disabled=!1)}setActions(e){const t=e.target,s=e.type;if(t.closest(this.getClass(this.classes.sel))||t.closest(this.getClass(this.classes.list))){const i=t.closest(".select")?t.closest(".select"):document.querySelector(`.${this.classes.sel}[data-sel-id="${t.closest(this.getClass(this.classes.list)).dataset.selectId}"]`),r=this.getSelect(i).relativeSel;if("click"===s){if(!r.disabled)if(t.closest(this.getClass(this.classes.list))){const e=t.closest(this.getClass(this.classes.list)),s=document.querySelector(`.${this.classes.sel}[data-sel-id="${e.dataset.selId}"] .select__option[data-opt-val="${e.dataset.optVal}"]`);this.setOptionAction(i,r,s)}else if(t.closest(this.getClass(this.classes.title)))this.setAction(i);else if(t.closest(this.getClass(this.classes.option))){const e=t.closest(this.getClass(this.classes.option));this.setOptionAction(i,r,e)}}else"focusin"===s||"focusout"===s?t.closest(this.getClass(this.classes.sel))&&("focusin"===s?i.classList.add(this.classes.focused):(i.classList.remove(this.classes.focused),r.hasAttribute("data-validate")&&(i.classList.contains(this.classes.filled)?this.removeErr(r,i):this.addErr(r,i)))):"keydown"===s&&"Escape"===e.code&&this.closeGroup()}else this.closeGroup()}setAction(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;if(t.closest("[data-one-select]")){const e=t.closest("[data-one-select]");this.closeGroup(e)}s.classList.contains("_slide")||(e.classList.toggle(this.classes.opened),c(s,t.dataset.speed),e.classList.contains(this.classes.opened)&&t.hasAttribute("data-validate")&&e.classList.contains(this.classes.error)&&this.removeErr(t,e))}closeGroup(e){const t=(e||document).querySelectorAll(`${this.getClass(this.classes.sel)}${this.getClass(this.classes.opened)}`);t.length&&t.forEach((e=>{this.closeItem(e)}))}closeItem(e){const t=this.getSelect(e).relativeSel,s=this.getSelect(e,this.classes.options).twinSel;s.classList.contains("_slide")||(e.classList.remove(this.classes.opened),o(s,t.dataset.speed))}setOptionAction(e,t,s){if(t.multiple){s.classList.toggle(this.classes.selected);this.getData(t).elements.forEach((e=>{e.removeAttribute("selected")}));e.querySelectorAll(this.getClass(this.classes.selected)).forEach((e=>{t.querySelector(`option[value="${e.dataset.optVal}"]`).setAttribute("selected","selected")})),s.classList.contains(this.classes.selected)||(console.log(t.querySelector(`option[value="${s.dataset.optVal}"]`)),t.querySelector(`option[value="${s.dataset.optVal}"]`).removeAttribute("selected"))}else e.querySelectorAll(".select__option").forEach((e=>e.classList.remove(this.classes.selected))),s.classList.add(this.classes.selected),t.hasAttribute("data-show-selection")||(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`)&&(e.querySelector(`${this.getClass(this.classes.option)}[hidden]`).hidden=!1),s.hidden=!0),t.value=s.hasAttribute("data-opt-val")?s.dataset.optVal:s.textContent,this.setAction(e);this.setValue(e,t),this.setSelections(t)}setSearchActions(e){const t=this,s=this.getSelect(e,this.classes.inp).twinSel,i=this.getSelect(e,this.classes.options).twinSel.querySelectorAll(`.${this.classes.option}`);s.addEventListener("input",(function(){i.forEach((e=>{e.textContent.toUpperCase().indexOf(s.value.toUpperCase())>=0?e.hidden=!1:e.hidden=!0})),!0===i.hidden&&t.setAction(e)}))}setSubtitle(e){}addErr(e,t){t.classList.add(this.classes.error),e.dataset.selError&&!e.dataset.selHint&&e.parentElement.insertAdjacentHTML("beforeend",`<div class="select__hint">${e.dataset.selError}</div>`)}removeErr(e,t){t.classList.contains(this.classes.error)&&t.classList.remove(this.classes.error),e.parentElement.querySelector(".select__hint")&&!e.dataset.selHint&&e.parentElement.removeChild(e.parentElement.querySelector(".select__hint"))}getClass(e){return`.${e}`}getSelect(e,t){return{relativeSel:e.querySelector("select"),twinSel:e.querySelector(this.getClass(t))}}getValue(e,t){let s,i,r=this.getData(t,2).html;if(r=r.length?r:t.dataset.selLabel?t.dataset.selLabel:"",this.getData(t).values.length?e.classList.add(this.classes.active):e.classList.remove(this.classes.active),t.hasAttribute("data-sel-label")&&(s=t.dataset.selLabel?` data-sel-label="${t.dataset.selLabel}"`:' data-sel-label="Выбор"',i=` ${this.classes.label}`),t.multiple&&t.hasAttribute("data-sel-list")&&(r=this.getData(t).elements.map((t=>`<span data-opt-id="${e.dataset.selId}" data-opt-val="${t.value}" class="_list-item">${this.getContent(t)}</span>`)).join(""),t.dataset.list&&document.querySelector(t.dataset.list)&&(document.querySelector(t.dataset.list).innerHTML=r,t.hasAttribute("data-sel-search")&&(r=!1))),t.hasAttribute("data-sel-search"))return`<div class="${this.classes.title}"><span ${s} class="${this.classes.val}"><input autocomplete="off" type="search" placeholder="${r}" data-placeholder="${r}" class="${this.classes.inp}"></span></div>`;{const e=this.getData(t).elements.length&&this.getData(t).elements[0].dataset.optClass?` ${this.getData(t).elements[0].dataset.optClass}`:"";return`<button type="button" class="${this.classes.title}"><span ${s||""} class="${this.classes.val} ${i||""}"><span class="${this.classes.content}${e}">${r}</span></span></button>`}}getOptions(e){const t=e.hasAttribute("data-sel-scroll")?"data-simplebar":"";let s=e.dataset.selScroll?`style="max-height:${e.dataset.selScroll}px"`:"",i=Array.from(e.options);if(i.length){let r="";return(this.getPlaceholder(e)&&!this.getPlaceholder(e).show||e.multiple)&&(i=i.filter((e=>e.value))),r+=t?`<div ${t} ${s} class="${this.classes.scroll}">`:"",i.forEach((t=>{r+=this.getOption(t,e)})),r+=t?"</div>":"",r}}getOption(e,t){const s=e.selected&&t.multiple?` ${this.classes.selected}`:"",i=!e.selected||t.hasAttribute("data-show-selection")||t.multiple?"":"hidden",r=e.dataset.optClass?` ${e.dataset.optClass}`:"",n=!!e.dataset.optionLink&&e.dataset.optionLink,a=e.hasAttribute("data-option-link-target")?'target="_blank"':"";let l="";return l+=n?`<a ${a} ${i} href="${n}" data-opt-val="${e.value}" class="${this.classes.option}${r}${s}">`:`<button ${i} class="${this.classes.option}${r}${s}" data-opt-val="${e.value}" type="button">`,l+=this.getContent(e),l+=n?"</a>":"</button>",l}getContent(e){const t=e.dataset.optAsset?`${e.dataset.optAsset}`:"",s=t.indexOf("img")>=0?`<img src="${t}" alt="">`:t;let i="";return i+=t?`<span class="${this.classes.group}">`:"",i+=t?`<span class="${this.classes.asset}">`:"",i+=t?s:"",i+=t?"</span>":"",i+=t?`<span class="${this.classes.txt}">`:"",i+=e.textContent,i+=t?"</span>":"",i+=t?"</span>":"",i}getPlaceholder(e){const t=Array.from(e.options).find((e=>!e.value));if(t)return t.classList.add(this.classes.subtitle),{value:t.textContent,show:t.hasAttribute("data-sel-ph-show"),label:{show:t.hasAttribute("data-sel-ph"),text:t.dataset.optPlaceholder}}}getData(e){let t=[];return e.multiple?t=Array.from(e.options).filter((e=>e.value)).filter((e=>e.selected)):t.push(e.options[e.selectedIndex]),{elements:t.map((e=>e)),values:t.filter((e=>e.value)).map((e=>e.value)),html:t.map((e=>this.getContent(e)))}}initSelections(e){const t=e.target;this.build(t),this.setSelections(t)}setSelections(e){const t=e.parentElement;if(e.hasAttribute("data-submit")&&e.value){let t=document.createElement("button");t.type="submit",e.closest("form").append(t),t.click(),t.remove()}e.parentElement.classList.add(this.classes.filled),this.selection(t,e)}selection(e,t){document.dispatchEvent(new CustomEvent("selection",{detail:{select:t}}))}}({});s(726);var Se=s(807);const _e=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};const Te="object"==typeof global&&global&&global.Object===Object&&global;var Le="object"==typeof self&&self&&self.Object===Object&&self;const Ce=Te||Le||Function("return this")();const Ae=function(){return Ce.Date.now()};var Me=/\s/;const ke=function(e){for(var t=e.length;t--&&Me.test(e.charAt(t)););return t};var Oe=/^\s+/;const Pe=function(e){return e?e.slice(0,ke(e)+1).replace(Oe,""):e};const ze=Ce.Symbol;var Ie=Object.prototype,$e=Ie.hasOwnProperty,De=Ie.toString,qe=ze?ze.toStringTag:void 0;const Ne=function(e){var t=$e.call(e,qe),s=e[qe];try{e[qe]=void 0;var i=!0}catch(e){}var r=De.call(e);return i&&(t?e[qe]=s:delete e[qe]),r};var We=Object.prototype.toString;const Ve=function(e){return We.call(e)};var Be=ze?ze.toStringTag:void 0;const He=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Be&&Be in Object(e)?Ne(e):Ve(e)};const Ge=function(e){return null!=e&&"object"==typeof e};const Re=function(e){return"symbol"==typeof e||Ge(e)&&"[object Symbol]"==He(e)};var je=/^[-+]0x[0-9a-f]+$/i,Fe=/^0b[01]+$/i,Ye=/^0o[0-7]+$/i,Xe=parseInt;const Ue=function(e){if("number"==typeof e)return e;if(Re(e))return NaN;if(_e(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=_e(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Pe(e);var s=Fe.test(e);return s||Ye.test(e)?Xe(e.slice(2),s?2:8):je.test(e)?NaN:+e};var Qe=Math.max,Ke=Math.min;const Ze=function(e,t,s){var i,r,n,a,l,o,c=0,d=!1,u=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function h(t){var s=i,n=r;return i=r=void 0,c=t,a=e.apply(n,s)}function m(e){var s=e-o;return void 0===o||s>=t||s<0||u&&e-c>=n}function f(){var e=Ae();if(m(e))return v(e);l=setTimeout(f,function(e){var s=t-(e-o);return u?Ke(s,n-(e-c)):s}(e))}function v(e){return l=void 0,p&&i?h(e):(i=r=void 0,a)}function g(){var e=Ae(),s=m(e);if(i=arguments,r=this,o=e,s){if(void 0===l)return function(e){return c=e,l=setTimeout(f,t),d?h(e):a}(o);if(u)return clearTimeout(l),l=setTimeout(f,t),h(o)}return void 0===l&&(l=setTimeout(f,t)),a}return t=Ue(t)||0,_e(s)&&(d=!!s.leading,n=(u="maxWait"in s)?Qe(Ue(s.maxWait)||0,t):n,p="trailing"in s?!!s.trailing:p),g.cancel=function(){void 0!==l&&clearTimeout(l),c=0,i=o=r=l=void 0},g.flush=function(){return void 0===l?a:v(Ae())},g};const Je=function(e,t,s){var i=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return _e(s)&&(i="leading"in s?!!s.leading:i,r="trailing"in s?!!s.trailing:r),Ze(e,t,{leading:i,maxWait:t,trailing:r})};var et=function(){return et=Object.assign||function(e){for(var t,s=1,i=arguments.length;s<i;s++)for(var r in t=arguments[s])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},et.apply(this,arguments)},tt=null,st=null;function it(){if(null===tt){if("undefined"==typeof document)return tt=0;var e=document.body,t=document.createElement("div");t.classList.add("simplebar-hide-scrollbar"),e.appendChild(t);var s=t.getBoundingClientRect().right;e.removeChild(t),tt=s}return tt}function rt(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window}function nt(e){return e&&e.ownerDocument?e.ownerDocument:document}Se&&window.addEventListener("resize",(function(){st!==window.devicePixelRatio&&(st=window.devicePixelRatio,tt=null)}));var at=function(e){return Array.prototype.reduce.call(e,(function(e,t){var s=t.name.match(/data-simplebar-(.+)/);if(s){var i=s[1].replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}));switch(t.value){case"true":e[i]=!0;break;case"false":e[i]=!1;break;case void 0:e[i]=!0;break;default:e[i]=t.value}}return e}),{})};function lt(e,t){var s;e&&(s=e.classList).add.apply(s,t.split(" "))}function ot(e,t){e&&t.split(" ").forEach((function(t){e.classList.remove(t)}))}function ct(e){return".".concat(e.split(" ").join("."))}var dt=Object.freeze({__proto__:null,getElementWindow:rt,getElementDocument:nt,getOptions:at,addClasses:lt,removeClasses:ot,classNamesToQuery:ct}),ut=rt,pt=nt,ht=at,mt=lt,ft=ot,vt=ct,gt=function(){function e(t,s){void 0===s&&(s={});var i=this;if(this.removePreventClickId=null,this.minScrollbarWidth=20,this.stopScrollDelay=175,this.isScrolling=!1,this.isMouseEntering=!1,this.scrollXTicking=!1,this.scrollYTicking=!1,this.wrapperEl=null,this.contentWrapperEl=null,this.contentEl=null,this.offsetEl=null,this.maskEl=null,this.placeholderEl=null,this.heightAutoObserverWrapperEl=null,this.heightAutoObserverEl=null,this.rtlHelpers=null,this.scrollbarWidth=0,this.resizeObserver=null,this.mutationObserver=null,this.elStyles=null,this.isRtl=null,this.mouseX=0,this.mouseY=0,this.onMouseMove=function(){},this.onWindowResize=function(){},this.onStopScrolling=function(){},this.onMouseEntered=function(){},this.onScroll=function(){var e=ut(i.el);i.scrollXTicking||(e.requestAnimationFrame(i.scrollX),i.scrollXTicking=!0),i.scrollYTicking||(e.requestAnimationFrame(i.scrollY),i.scrollYTicking=!0),i.isScrolling||(i.isScrolling=!0,mt(i.el,i.classNames.scrolling)),i.showScrollbar("x"),i.showScrollbar("y"),i.onStopScrolling()},this.scrollX=function(){i.axis.x.isOverflowing&&i.positionScrollbar("x"),i.scrollXTicking=!1},this.scrollY=function(){i.axis.y.isOverflowing&&i.positionScrollbar("y"),i.scrollYTicking=!1},this._onStopScrolling=function(){ft(i.el,i.classNames.scrolling),i.options.autoHide&&(i.hideScrollbar("x"),i.hideScrollbar("y")),i.isScrolling=!1},this.onMouseEnter=function(){i.isMouseEntering||(mt(i.el,i.classNames.mouseEntered),i.showScrollbar("x"),i.showScrollbar("y"),i.isMouseEntering=!0),i.onMouseEntered()},this._onMouseEntered=function(){ft(i.el,i.classNames.mouseEntered),i.options.autoHide&&(i.hideScrollbar("x"),i.hideScrollbar("y")),i.isMouseEntering=!1},this._onMouseMove=function(e){i.mouseX=e.clientX,i.mouseY=e.clientY,(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseMoveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseMoveForAxis("y")},this.onMouseLeave=function(){i.onMouseMove.cancel(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseLeaveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseLeaveForAxis("y"),i.mouseX=-1,i.mouseY=-1},this._onWindowResize=function(){i.scrollbarWidth=i.getScrollbarWidth(),i.hideNativeScrollbar()},this.onPointerEvent=function(e){var t,s;i.axis.x.track.el&&i.axis.y.track.el&&i.axis.x.scrollbar.el&&i.axis.y.scrollbar.el&&(i.axis.x.track.rect=i.axis.x.track.el.getBoundingClientRect(),i.axis.y.track.rect=i.axis.y.track.el.getBoundingClientRect(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&(t=i.isWithinBounds(i.axis.x.track.rect)),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&(s=i.isWithinBounds(i.axis.y.track.rect)),(t||s)&&(e.stopPropagation(),"pointerdown"===e.type&&"touch"!==e.pointerType&&(t&&(i.axis.x.scrollbar.rect=i.axis.x.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.x.scrollbar.rect)?i.onDragStart(e,"x"):i.onTrackClick(e,"x")),s&&(i.axis.y.scrollbar.rect=i.axis.y.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.y.scrollbar.rect)?i.onDragStart(e,"y"):i.onTrackClick(e,"y")))))},this.drag=function(t){var s,r,n,a,l,o,c,d,u,p,h;if(i.draggedAxis&&i.contentWrapperEl){var m=i.axis[i.draggedAxis].track,f=null!==(r=null===(s=m.rect)||void 0===s?void 0:s[i.axis[i.draggedAxis].sizeAttr])&&void 0!==r?r:0,v=i.axis[i.draggedAxis].scrollbar,g=null!==(a=null===(n=i.contentWrapperEl)||void 0===n?void 0:n[i.axis[i.draggedAxis].scrollSizeAttr])&&void 0!==a?a:0,b=parseInt(null!==(o=null===(l=i.elStyles)||void 0===l?void 0:l[i.axis[i.draggedAxis].sizeAttr])&&void 0!==o?o:"0px",10);t.preventDefault(),t.stopPropagation();var w=("y"===i.draggedAxis?t.pageY:t.pageX)-(null!==(d=null===(c=m.rect)||void 0===c?void 0:c[i.axis[i.draggedAxis].offsetAttr])&&void 0!==d?d:0)-i.axis[i.draggedAxis].dragOffset,y=(w="x"===i.draggedAxis&&i.isRtl?(null!==(p=null===(u=m.rect)||void 0===u?void 0:u[i.axis[i.draggedAxis].sizeAttr])&&void 0!==p?p:0)-v.size-w:w)/(f-v.size)*(g-b);"x"===i.draggedAxis&&i.isRtl&&(y=(null===(h=e.getRtlHelpers())||void 0===h?void 0:h.isScrollingToNegative)?-y:y),i.contentWrapperEl[i.axis[i.draggedAxis].scrollOffsetAttr]=y}},this.onEndDrag=function(e){var t=pt(i.el),s=ut(i.el);e.preventDefault(),e.stopPropagation(),ft(i.el,i.classNames.dragging),t.removeEventListener("mousemove",i.drag,!0),t.removeEventListener("mouseup",i.onEndDrag,!0),i.removePreventClickId=s.setTimeout((function(){t.removeEventListener("click",i.preventClick,!0),t.removeEventListener("dblclick",i.preventClick,!0),i.removePreventClickId=null}))},this.preventClick=function(e){e.preventDefault(),e.stopPropagation()},this.el=t,this.options=et(et({},e.defaultOptions),s),this.classNames=et(et({},e.defaultOptions.classNames),s.classNames),this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}}},"object"!=typeof this.el||!this.el.nodeName)throw new Error("Argument passed to SimpleBar must be an HTML element instead of ".concat(this.el));this.onMouseMove=Je(this._onMouseMove,64),this.onWindowResize=Ze(this._onWindowResize,64,{leading:!0}),this.onStopScrolling=Ze(this._onStopScrolling,this.stopScrollDelay),this.onMouseEntered=Ze(this._onMouseEntered,this.stopScrollDelay),this.init()}return e.getRtlHelpers=function(){if(e.rtlHelpers)return e.rtlHelpers;var t=document.createElement("div");t.innerHTML='<div class="simplebar-dummy-scrollbar-size"><div></div></div>';var s=t.firstElementChild,i=null==s?void 0:s.firstElementChild;if(!i)return null;document.body.appendChild(s),s.scrollLeft=0;var r=e.getOffset(s),n=e.getOffset(i);s.scrollLeft=-999;var a=e.getOffset(i);return document.body.removeChild(s),e.rtlHelpers={isScrollOriginAtZero:r.left!==n.left,isScrollingToNegative:n.left!==a.left},e.rtlHelpers},e.prototype.getScrollbarWidth=function(){try{return this.contentWrapperEl&&"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:it()}catch(e){return it()}},e.getOffset=function(e){var t=e.getBoundingClientRect(),s=pt(e),i=ut(e);return{top:t.top+(i.pageYOffset||s.documentElement.scrollTop),left:t.left+(i.pageXOffset||s.documentElement.scrollLeft)}},e.prototype.init=function(){Se&&(this.initDOM(),this.rtlHelpers=e.getRtlHelpers(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())},e.prototype.initDOM=function(){var e,t;this.wrapperEl=this.el.querySelector(vt(this.classNames.wrapper)),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector(vt(this.classNames.contentWrapper)),this.contentEl=this.options.contentNode||this.el.querySelector(vt(this.classNames.contentEl)),this.offsetEl=this.el.querySelector(vt(this.classNames.offset)),this.maskEl=this.el.querySelector(vt(this.classNames.mask)),this.placeholderEl=this.findChild(this.wrapperEl,vt(this.classNames.placeholder)),this.heightAutoObserverWrapperEl=this.el.querySelector(vt(this.classNames.heightAutoObserverWrapperEl)),this.heightAutoObserverEl=this.el.querySelector(vt(this.classNames.heightAutoObserverEl)),this.axis.x.track.el=this.findChild(this.el,"".concat(vt(this.classNames.track)).concat(vt(this.classNames.horizontal))),this.axis.y.track.el=this.findChild(this.el,"".concat(vt(this.classNames.track)).concat(vt(this.classNames.vertical))),this.axis.x.scrollbar.el=(null===(e=this.axis.x.track.el)||void 0===e?void 0:e.querySelector(vt(this.classNames.scrollbar)))||null,this.axis.y.scrollbar.el=(null===(t=this.axis.y.track.el)||void 0===t?void 0:t.querySelector(vt(this.classNames.scrollbar)))||null,this.options.autoHide||(mt(this.axis.x.scrollbar.el,this.classNames.visible),mt(this.axis.y.scrollbar.el,this.classNames.visible))},e.prototype.initListeners=function(){var e,t=this,s=ut(this.el);if(this.el.addEventListener("mouseenter",this.onMouseEnter),this.el.addEventListener("pointerdown",this.onPointerEvent,!0),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),null===(e=this.contentWrapperEl)||void 0===e||e.addEventListener("scroll",this.onScroll),s.addEventListener("resize",this.onWindowResize),this.contentEl){if(window.ResizeObserver){var i=!1,r=s.ResizeObserver||ResizeObserver;this.resizeObserver=new r((function(){i&&s.requestAnimationFrame((function(){t.recalculate()}))})),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),s.requestAnimationFrame((function(){i=!0}))}this.mutationObserver=new s.MutationObserver((function(){s.requestAnimationFrame((function(){t.recalculate()}))})),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})}},e.prototype.recalculate=function(){if(this.heightAutoObserverEl&&this.contentEl&&this.contentWrapperEl&&this.wrapperEl&&this.placeholderEl){var e=ut(this.el);this.elStyles=e.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;var t=this.contentEl.offsetWidth,s=this.heightAutoObserverEl.offsetHeight<=1,i=this.heightAutoObserverEl.offsetWidth<=1||t>0,r=this.contentWrapperEl.offsetWidth,n=this.elStyles.overflowX,a=this.elStyles.overflowY;this.contentEl.style.padding="".concat(this.elStyles.paddingTop," ").concat(this.elStyles.paddingRight," ").concat(this.elStyles.paddingBottom," ").concat(this.elStyles.paddingLeft),this.wrapperEl.style.margin="-".concat(this.elStyles.paddingTop," -").concat(this.elStyles.paddingRight," -").concat(this.elStyles.paddingBottom," -").concat(this.elStyles.paddingLeft);var l=this.contentEl.scrollHeight,o=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=s?"auto":"100%",this.placeholderEl.style.width=i?"".concat(t||o,"px"):"auto",this.placeholderEl.style.height="".concat(l,"px");var c=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=0!==t&&o>t,this.axis.y.isOverflowing=l>c,this.axis.x.isOverflowing="hidden"!==n&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==a&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();var d=this.axis.x.isOverflowing?this.scrollbarWidth:0,u=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&o>r-u,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&l>c-d,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el&&(this.axis.x.scrollbar.el.style.width="".concat(this.axis.x.scrollbar.size,"px")),this.axis.y.scrollbar.el&&(this.axis.y.scrollbar.el.style.height="".concat(this.axis.y.scrollbar.size,"px")),this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")}},e.prototype.getScrollbarSize=function(e){var t,s;if(void 0===e&&(e="y"),!this.axis[e].isOverflowing||!this.contentEl)return 0;var i,r=this.contentEl[this.axis[e].scrollSizeAttr],n=null!==(s=null===(t=this.axis[e].track.el)||void 0===t?void 0:t[this.axis[e].offsetSizeAttr])&&void 0!==s?s:0,a=n/r;return i=Math.max(~~(a*n),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(i=Math.min(i,this.options.scrollbarMaxSize)),i},e.prototype.positionScrollbar=function(t){var s,i,r;void 0===t&&(t="y");var n=this.axis[t].scrollbar;if(this.axis[t].isOverflowing&&this.contentWrapperEl&&n.el&&this.elStyles){var a=this.contentWrapperEl[this.axis[t].scrollSizeAttr],l=(null===(s=this.axis[t].track.el)||void 0===s?void 0:s[this.axis[t].offsetSizeAttr])||0,o=parseInt(this.elStyles[this.axis[t].sizeAttr],10),c=this.contentWrapperEl[this.axis[t].scrollOffsetAttr];c="x"===t&&this.isRtl&&(null===(i=e.getRtlHelpers())||void 0===i?void 0:i.isScrollOriginAtZero)?-c:c,"x"===t&&this.isRtl&&(c=(null===(r=e.getRtlHelpers())||void 0===r?void 0:r.isScrollingToNegative)?c:-c);var d=c/(a-o),u=~~((l-n.size)*d);u="x"===t&&this.isRtl?-u+(l-n.size):u,n.el.style.transform="x"===t?"translate3d(".concat(u,"px, 0, 0)"):"translate3d(0, ".concat(u,"px, 0)")}},e.prototype.toggleTrackVisibility=function(e){void 0===e&&(e="y");var t=this.axis[e].track.el,s=this.axis[e].scrollbar.el;t&&s&&this.contentWrapperEl&&(this.axis[e].isOverflowing||this.axis[e].forceVisible?(t.style.visibility="visible",this.contentWrapperEl.style[this.axis[e].overflowAttr]="scroll",this.el.classList.add("".concat(this.classNames.scrollable,"-").concat(e))):(t.style.visibility="hidden",this.contentWrapperEl.style[this.axis[e].overflowAttr]="hidden",this.el.classList.remove("".concat(this.classNames.scrollable,"-").concat(e))),this.axis[e].isOverflowing?s.style.display="block":s.style.display="none")},e.prototype.showScrollbar=function(e){void 0===e&&(e="y"),this.axis[e].isOverflowing&&!this.axis[e].scrollbar.isVisible&&(mt(this.axis[e].scrollbar.el,this.classNames.visible),this.axis[e].scrollbar.isVisible=!0)},e.prototype.hideScrollbar=function(e){void 0===e&&(e="y"),this.axis[e].isOverflowing&&this.axis[e].scrollbar.isVisible&&(ft(this.axis[e].scrollbar.el,this.classNames.visible),this.axis[e].scrollbar.isVisible=!1)},e.prototype.hideNativeScrollbar=function(){this.offsetEl&&(this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px",this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px")},e.prototype.onMouseMoveForAxis=function(e){void 0===e&&(e="y");var t=this.axis[e];t.track.el&&t.scrollbar.el&&(t.track.rect=t.track.el.getBoundingClientRect(),t.scrollbar.rect=t.scrollbar.el.getBoundingClientRect(),this.isWithinBounds(t.track.rect)?(this.showScrollbar(e),mt(t.track.el,this.classNames.hover),this.isWithinBounds(t.scrollbar.rect)?mt(t.scrollbar.el,this.classNames.hover):ft(t.scrollbar.el,this.classNames.hover)):(ft(t.track.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(e)))},e.prototype.onMouseLeaveForAxis=function(e){void 0===e&&(e="y"),ft(this.axis[e].track.el,this.classNames.hover),ft(this.axis[e].scrollbar.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(e)},e.prototype.onDragStart=function(e,t){var s;void 0===t&&(t="y");var i=pt(this.el),r=ut(this.el),n=this.axis[t].scrollbar,a="y"===t?e.pageY:e.pageX;this.axis[t].dragOffset=a-((null===(s=n.rect)||void 0===s?void 0:s[this.axis[t].offsetAttr])||0),this.draggedAxis=t,mt(this.el,this.classNames.dragging),i.addEventListener("mousemove",this.drag,!0),i.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(i.addEventListener("click",this.preventClick,!0),i.addEventListener("dblclick",this.preventClick,!0)):(r.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)},e.prototype.onTrackClick=function(e,t){var s,i,r,n,a=this;void 0===t&&(t="y");var l=this.axis[t];if(this.options.clickOnTrack&&l.scrollbar.el&&this.contentWrapperEl){e.preventDefault();var o=ut(this.el);this.axis[t].scrollbar.rect=l.scrollbar.el.getBoundingClientRect();var c=null!==(i=null===(s=this.axis[t].scrollbar.rect)||void 0===s?void 0:s[this.axis[t].offsetAttr])&&void 0!==i?i:0,d=parseInt(null!==(n=null===(r=this.elStyles)||void 0===r?void 0:r[this.axis[t].sizeAttr])&&void 0!==n?n:"0px",10),u=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],p=("y"===t?this.mouseY-c:this.mouseX-c)<0?-1:1,h=-1===p?u-d:u+d,m=function(){a.contentWrapperEl&&(-1===p?u>h&&(u-=40,a.contentWrapperEl[a.axis[t].scrollOffsetAttr]=u,o.requestAnimationFrame(m)):u<h&&(u+=40,a.contentWrapperEl[a.axis[t].scrollOffsetAttr]=u,o.requestAnimationFrame(m)))};m()}},e.prototype.getContentElement=function(){return this.contentEl},e.prototype.getScrollElement=function(){return this.contentWrapperEl},e.prototype.removeListeners=function(){var e=ut(this.el);this.el.removeEventListener("mouseenter",this.onMouseEnter),this.el.removeEventListener("pointerdown",this.onPointerEvent,!0),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl&&this.contentWrapperEl.removeEventListener("scroll",this.onScroll),e.removeEventListener("resize",this.onWindowResize),this.mutationObserver&&this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.onMouseMove.cancel(),this.onWindowResize.cancel(),this.onStopScrolling.cancel(),this.onMouseEntered.cancel()},e.prototype.unMount=function(){this.removeListeners()},e.prototype.isWithinBounds=function(e){return this.mouseX>=e.left&&this.mouseX<=e.left+e.width&&this.mouseY>=e.top&&this.mouseY<=e.top+e.height},e.prototype.findChild=function(e,t){var s=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;return Array.prototype.filter.call(e.children,(function(e){return s.call(e,t)}))[0]},e.rtlHelpers=null,e.defaultOptions={forceVisible:!1,clickOnTrack:!0,scrollbarMinSize:25,scrollbarMaxSize:0,ariaLabel:"scrollable content",classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging",scrolling:"simplebar-scrolling",scrollable:"simplebar-scrollable",mouseEntered:"simplebar-mouse-entered"},scrollableNode:null,contentNode:null,autoHide:!0},e.getOptions=ht,e.helpers=dt,e}(),bt=function(e,t){return bt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},bt(e,t)};var wt=gt.helpers,yt=wt.getOptions,Et=wt.addClasses,xt=function(e){function t(){for(var s=[],i=0;i<arguments.length;i++)s[i]=arguments[i];var r=e.apply(this,s)||this;return t.instances.set(s[0],r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}bt(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}(t,e),t.initDOMLoadedElements=function(){document.removeEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.removeEventListener("load",this.initDOMLoadedElements),Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"),(function(e){"init"===e.getAttribute("data-simplebar")||t.instances.has(e)||new t(e,yt(e.attributes))}))},t.removeObserver=function(){var e;null===(e=t.globalObserver)||void 0===e||e.disconnect()},t.prototype.initDOM=function(){var e,t,s,i=this;if(!Array.prototype.filter.call(this.el.children,(function(e){return e.classList.contains(i.classNames.wrapper)})).length){for(this.wrapperEl=document.createElement("div"),this.contentWrapperEl=document.createElement("div"),this.offsetEl=document.createElement("div"),this.maskEl=document.createElement("div"),this.contentEl=document.createElement("div"),this.placeholderEl=document.createElement("div"),this.heightAutoObserverWrapperEl=document.createElement("div"),this.heightAutoObserverEl=document.createElement("div"),Et(this.wrapperEl,this.classNames.wrapper),Et(this.contentWrapperEl,this.classNames.contentWrapper),Et(this.offsetEl,this.classNames.offset),Et(this.maskEl,this.classNames.mask),Et(this.contentEl,this.classNames.contentEl),Et(this.placeholderEl,this.classNames.placeholder),Et(this.heightAutoObserverWrapperEl,this.classNames.heightAutoObserverWrapperEl),Et(this.heightAutoObserverEl,this.classNames.heightAutoObserverEl);this.el.firstChild;)this.contentEl.appendChild(this.el.firstChild);this.contentWrapperEl.appendChild(this.contentEl),this.offsetEl.appendChild(this.contentWrapperEl),this.maskEl.appendChild(this.offsetEl),this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl),this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl),this.wrapperEl.appendChild(this.maskEl),this.wrapperEl.appendChild(this.placeholderEl),this.el.appendChild(this.wrapperEl),null===(e=this.contentWrapperEl)||void 0===e||e.setAttribute("tabindex","0"),null===(t=this.contentWrapperEl)||void 0===t||t.setAttribute("role","region"),null===(s=this.contentWrapperEl)||void 0===s||s.setAttribute("aria-label",this.options.ariaLabel)}if(!this.axis.x.track.el||!this.axis.y.track.el){var r=document.createElement("div"),n=document.createElement("div");Et(r,this.classNames.track),Et(n,this.classNames.scrollbar),r.appendChild(n),this.axis.x.track.el=r.cloneNode(!0),Et(this.axis.x.track.el,this.classNames.horizontal),this.axis.y.track.el=r.cloneNode(!0),Et(this.axis.y.track.el,this.classNames.vertical),this.el.appendChild(this.axis.x.track.el),this.el.appendChild(this.axis.y.track.el)}gt.prototype.initDOM.call(this),this.el.setAttribute("data-simplebar","init")},t.prototype.unMount=function(){gt.prototype.unMount.call(this),t.instances.delete(this.el)},t.initHtmlApi=function(){this.initDOMLoadedElements=this.initDOMLoadedElements.bind(this),"undefined"!=typeof MutationObserver&&(this.globalObserver=new MutationObserver(t.handleMutations),this.globalObserver.observe(document,{childList:!0,subtree:!0})),"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(this.initDOMLoadedElements):(document.addEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.addEventListener("load",this.initDOMLoadedElements))},t.handleMutations=function(e){e.forEach((function(e){e.addedNodes.forEach((function(e){1===e.nodeType&&(e.hasAttribute("data-simplebar")?!t.instances.has(e)&&document.documentElement.contains(e)&&new t(e,yt(e.attributes)):e.querySelectorAll("[data-simplebar]").forEach((function(e){"init"!==e.getAttribute("data-simplebar")&&!t.instances.has(e)&&document.documentElement.contains(e)&&new t(e,yt(e.attributes))})))})),e.removedNodes.forEach((function(e){1===e.nodeType&&("init"===e.getAttribute("data-simplebar")?t.instances.has(e)&&!document.documentElement.contains(e)&&t.instances.get(e).unMount():Array.prototype.forEach.call(e.querySelectorAll('[data-simplebar="init"]'),(function(e){t.instances.has(e)&&!document.documentElement.contains(e)&&t.instances.get(e).unMount()})))}))}))},t.instances=new WeakMap,t}(gt);Se&&xt.initHtmlApi();var St=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var s=-1;return e.some((function(e,i){return e[0]===t&&(s=i,!0)})),s}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var s=e(this.__entries__,t),i=this.__entries__[s];return i&&i[1]},t.prototype.set=function(t,s){var i=e(this.__entries__,t);~i?this.__entries__[i][1]=s:this.__entries__.push([t,s])},t.prototype.delete=function(t){var s=this.__entries__,i=e(s,t);~i&&s.splice(i,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var s=0,i=this.__entries__;s<i.length;s++){var r=i[s];e.call(t,r[1],r[0])}},t}()}(),_t="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Tt=void 0!==s.g&&s.g.Math===Math?s.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),Lt="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Tt):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)};var Ct=["top","right","bottom","left","width","height","size","weight"],At="undefined"!=typeof MutationObserver,Mt=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var s=!1,i=!1,r=0;function n(){s&&(s=!1,e()),i&&l()}function a(){Lt(n)}function l(){var e=Date.now();if(s){if(e-r<2)return;i=!0}else s=!0,i=!1,setTimeout(a,t);r=e}return l}(this.refresh.bind(this),20)}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,s=t.indexOf(e);~s&&t.splice(s,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){_t&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),At?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){_t&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,s=void 0===t?"":t;Ct.some((function(e){return!!~s.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),kt=function(e,t){for(var s=0,i=Object.keys(t);s<i.length;s++){var r=i[s];Object.defineProperty(e,r,{value:t[r],enumerable:!1,writable:!1,configurable:!0})}return e},Ot=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Tt},Pt=Nt(0,0,0,0);function zt(e){return parseFloat(e)||0}function It(e){for(var t=[],s=1;s<arguments.length;s++)t[s-1]=arguments[s];return t.reduce((function(t,s){return t+zt(e["border-"+s+"-width"])}),0)}function $t(e){var t=e.clientWidth,s=e.clientHeight;if(!t&&!s)return Pt;var i=Ot(e).getComputedStyle(e),r=function(e){for(var t={},s=0,i=["top","right","bottom","left"];s<i.length;s++){var r=i[s],n=e["padding-"+r];t[r]=zt(n)}return t}(i),n=r.left+r.right,a=r.top+r.bottom,l=zt(i.width),o=zt(i.height);if("border-box"===i.boxSizing&&(Math.round(l+n)!==t&&(l-=It(i,"left","right")+n),Math.round(o+a)!==s&&(o-=It(i,"top","bottom")+a)),!function(e){return e===Ot(e).document.documentElement}(e)){var c=Math.round(l+n)-t,d=Math.round(o+a)-s;1!==Math.abs(c)&&(l-=c),1!==Math.abs(d)&&(o-=d)}return Nt(r.left,r.top,l,o)}var Dt="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Ot(e).SVGGraphicsElement}:function(e){return e instanceof Ot(e).SVGElement&&"function"==typeof e.getBBox};function qt(e){return _t?Dt(e)?function(e){var t=e.getBBox();return Nt(0,0,t.width,t.height)}(e):$t(e):Pt}function Nt(e,t,s,i){return{x:e,y:t,width:s,height:i}}var Wt=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Nt(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=qt(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Vt=function(e,t){var s=function(e){var t=e.x,s=e.y,i=e.width,r=e.height,n="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,a=Object.create(n.prototype);return kt(a,{x:t,y:s,width:i,height:r,top:s,right:t+i,bottom:r+s,left:t}),a}(t);kt(this,{target:e,contentRect:s})},Bt=function(){function e(e,t,s){if(this.activeObservations_=[],this.observations_=new St,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=s}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Ot(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new Wt(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Ot(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Vt(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),Ht="undefined"!=typeof WeakMap?new WeakMap:new St,Gt=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var s=Mt.getInstance(),i=new Bt(t,s,this);Ht.set(this,i)};["observe","unobserve","disconnect"].forEach((function(e){Gt.prototype[e]=function(){var t;return(t=Ht.get(this))[e].apply(t,arguments)}}));const Rt=void 0!==Tt.ResizeObserver?Tt.ResizeObserver:Gt;window.ResizeObserver=Rt,window.addEventListener("load",(function(){document.body.style.opacity=1})),document.addEventListener("DOMContentLoaded",(function(){const s=document.querySelector(".header__search-input");s&&(s.addEventListener("focusin",(function(){document.documentElement.classList.contains("_search-box-opened")||(document.documentElement.classList.add("_search-box-opened"),window.innerWidth<=768&&e&&(setTimeout((()=>{document.querySelector(".search-box__content").prepend(s.parentElement)}),0),i()))})),s.addEventListener("input",(function(){s.querySelector("input").value.length?s.closest("form").classList.contains("_filled")||s.closest("form").classList.add("_filled"):s.closest("form").classList.contains("_filled")&&s.closest("form").classList.remove("_filled")})),s.closest("form").addEventListener("submit",(function(){document.documentElement.classList.contains("_search-box-opened")&&(document.documentElement.classList.remove("_search-box-opened"),window.innerWidth<=768&&(setTimeout((()=>{document.querySelector(".header__search").appendChild(s.parentElement)}),0),t())),s.closest("form").classList.contains("_filled")&&s.closest("form").classList.remove("_filled"),s.querySelector("input").blur()})));const r=document.querySelectorAll("[data-numbers-only]");r.length&&r.forEach((e=>{e.addEventListener("input",(function(){/\d+/.test(e.value)||(e.value="")}))}));const n=(e,t,s)=>{e.length&&e.forEach((e=>e.closest(t).querySelector(s).appendChild(e)))};n(document.querySelectorAll(".catalog__card.menu-product-card_list-view .menu-product-card__heart-btn"),".catalog__card",".menu-product-card__actions"),n(document.querySelectorAll(".catalog__card.menu-product-card_list-view .menu-product-card__labels"),".catalog__card",".menu-product-card__preview"),window.innerWidth<=768&&(n(document.querySelectorAll(".catalog__card.menu-product-card_grid-view .menu-product-card__heart-btn"),".catalog__card",".menu-product-card__actions"),n(document.querySelectorAll(".catalog__card.menu-product-card_grid-view .menu-product-card__labels"),".catalog__card",".menu-product-card__preview"));const l=e=>{const t=document.querySelector(".tags-catalog__list"),s=(e,s)=>{const i=`\n        <span class="tags-catalog__text txt">${s}</span>\n        <button type="button" class="tags-catalog__remove-btn"><img src="./img/icons/cross.svg" alt="" class="tags-catalog__remove-btn-icon" /></button>\n      `;if(e.checked){const e=document.createElement("div");e.classList.add("tags-catalog__item"),e.setAttribute("data-tag-text",s),e.innerHTML=i,t.appendChild(e)}else e.checked||t.removeChild(t.querySelector(`[data-tag-text="${s}"]`))};if(e&&e.closest(".filters .checkbox__input"))s(e.closest(".filters .checkbox__input"),e.closest(".filters .checkbox__input").nextElementSibling.innerHTML);else if(!e){const e=document.querySelectorAll(".filters .checkbox__input[checked]");e.length&&e.forEach((e=>{s(e,e.nextElementSibling.innerHTML)}))}};l();const o=document.querySelectorAll(".filters .checkbox");o.length&&o.forEach((e=>e.setAttribute("data-filter-text",e.querySelector(".checkbox__text").innerHTML)));document.querySelector(".header__catalog")&&window.innerWidth>768&&document.addEventListener("mouseover",(function(e){const t=e.target,s=()=>{a(document.querySelectorAll("[data-subnav-index]"),"_active"),a(document.querySelectorAll("[data-sublink-index]"),"_active")};t.closest(".header__catalog")?document.documentElement.classList.add("_show-catalog"):(document.documentElement.classList.remove("_show-catalog"),document.querySelector(".header-catalog__advertising").classList.remove("_hidden"),s()),t.closest("[data-sublink-index]")&&(s(),t.closest("[data-sublink-index]").classList.add("_active"),document.querySelector(`[data-subnav-index="${t.closest("[data-sublink-index]").dataset.sublinkIndex}"]`).classList.add("_active"),document.querySelector(".header-catalog__advertising").classList.add("_hidden"))}));document.addEventListener("click",(r=>{const n=r.target;if(n.closest(".header-catalog__arr-btn")&&n.closest(".header-catalog__subnav").classList.remove("_active"),window.innerWidth<=768&&n.closest(".header-catalog__sublinks-item")&&(r.preventDefault(),a(document.querySelectorAll("[data-subnav-index]"),"_active"),document.querySelector(`[data-subnav-index="${n.closest(".header-catalog__sublinks-item").dataset.sublinkIndex}"]`).classList.add("_active")),n.closest(".menu__link_catalog")&&e&&(document.documentElement.classList.add("_show-catalog"),document.documentElement.classList.remove("_menu-opened"),i()),n.closest(".header-catalog__close-btn")&&e&&(document.documentElement.classList.remove("_show-catalog"),a(document.querySelectorAll("[data-subnav-index]"),"_active"),t()),n.closest("#close-search-btn")&&(document.documentElement.classList.remove("_search-box-opened"),setTimeout((()=>{document.querySelector(".header__search").appendChild(s.parentElement)}),0),t()),n.closest(".sublist-filters__options .option__input")){document.querySelector(".filters__sort-btn").innerHTML=n.closest(".sublist-filters__options .option__input").nextElementSibling.innerHTML}if(n.closest("[data-sl-btn]")&&n.closest("[data-sl-parent]").classList.add("_sublist-opened"),n.closest("[data-close-sl-btn]")&&n.closest("[data-sl-parent]").classList.remove("_sublist-opened"),n.closest("#open-filters-btn")&&e&&(document.documentElement.classList.add("_filters-visible"),i()),n.closest("#close-filters-btn")&&(document.documentElement.classList.remove("_filters-visible"),t()),n.closest(".tags-catalog__remove-btn-icon")){const e=n.closest(".tags-catalog__item");document.querySelectorAll(`[data-filter-text="${e.dataset.tagText}"] input`).forEach((e=>e.checked=!1)),e.remove()}if(n.closest(".filters .checkbox__input")&&l(n.closest(".filters .checkbox__input"),n.closest(".filters .checkbox__input").parentElement.dataset.filterTxt),n.closest("[data-clean-form-btn]")&&(d.formClean(n.closest("form")),document.querySelector(".tags-catalog__list").innerHTML=""),n.closest(".filters__show-all-btn")&&n.closest(".filters__form").classList.toggle("_show-all-filters"),n.closest(".filters__showmore-btn")&&window.innerWidth>768){const e=n.closest(".filters__group");e&&e.classList.toggle("_show-all-options")}n.closest(".heart-btn__icon")&&(n.closest(".heart-btn__icon").classList.toggle("_active"),r.preventDefault()),document.documentElement.classList.contains("_search-box-opened")&&!n.closest(".header__search")&&document.documentElement.classList.remove("_search-box-opened"),n.closest(".menu-bar__item")&&(a(document.querySelectorAll(".menu-bar__item"),"_active"),n.closest(".menu-bar__item").classList.add("_active")),n.closest(".categories-catalog__item")&&(a(document.querySelectorAll(".categories-catalog__item"),"_active"),n.closest(".categories-catalog__item").classList.add("_active")),n.closest(".view-catalog__btn")&&(a(document.querySelectorAll(".view-catalog__btn"),"_active"),n.closest(".view-catalog__btn").classList.add("_active"))}))})),document.querySelector(".hamburger")&&document.addEventListener("click",(function(t){e&&t.target.closest(".hamburger")?r():e&&document.documentElement.classList.contains("_menu-opened")&&(t.target.closest(".menu__close-btn")||!t.target.closest(".menu"))&&n()})),(()=>{const e=document.querySelectorAll("[data-spoilers]");if(e.length>0){const t=Array.from(e).filter((function(e,t,s){return!e.dataset.spoilers.split(",")[0]}));t.length&&i(t);let s=((e,t)=>{const s=Array.from(e).filter((function(e,s,i){if(e.dataset[t])return e.dataset[t].split(",")[0]}));if(s.length){const e=[];s.forEach((s=>{const i={},r=s.dataset[t].split(",");i.value=r[0],i.type=r[1]?r[1].trim():"max",i.item=s,e.push(i)}));let i=e.map((function(e){return"("+e.type+"-width: "+e.value+"px),"+e.value+","+e.type}));i=(e=>e.filter((function(e,t,s){return s.indexOf(e)===t})))(i);const r=[];if(i.length)return i.forEach((t=>{const s=t.split(","),i=s[1],n=s[2],a=window.matchMedia(s[0]),l=e.filter((function(e){if(e.value===i&&e.type===n)return!0}));r.push({itemsArray:l,matchMedia:a})})),r}})(e,"spoilers");function i(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.forEach((e=>{e=t?e.item:e,t.matches||!t?(e.classList.add("_spoiler-init"),r(e),e.addEventListener("click",n)):(e.classList.remove("_spoiler-init"),r(e,!1),e.removeEventListener("click",n))}))}function r(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],s=e.querySelectorAll("[data-spoiler]");s.length&&(s=Array.from(s).filter((t=>t.closest("[data-spoilers]")===e)),s.forEach((e=>{t?(e.removeAttribute("tabindex"),e.classList.contains("_spoiler-active")||(e.nextElementSibling.hidden=!0)):(e.setAttribute("tabindex","-1"),e.nextElementSibling.hidden=!1)})))}function n(e){const t=e.target;if(t.closest("[data-spoiler]")){const s=t.closest("[data-spoiler]"),i=s.closest("[data-spoilers]"),r=i.hasAttribute("data-one-spoiler"),n=i.dataset.spoilersSpeed?parseInt(i.dataset.spoilersSpeed):500;i.querySelectorAll("._slide").length||(r&&!s.classList.contains("_spoiler-active")&&a(i),s.classList.toggle("_spoiler-active"),c(s.nextElementSibling,n)),e.preventDefault()}}function a(e){const t=e.querySelector("[data-spoiler]._spoiler-active"),s=e.dataset.spoilersSpeed?parseInt(e.dataset.spoilersSpeed):500;t&&!e.querySelectorAll("._slide").length&&(t.classList.remove("_spoiler-active"),o(t.nextElementSibling,s))}s&&s.length&&s.forEach((e=>{e.matchMedia.addEventListener("change",(function(){i(e.itemsArray,e.matchMedia)})),i(e.itemsArray,e.matchMedia)}));const l=document.querySelectorAll("[data-spoiler-close]");l.length&&document.addEventListener("click",(function(e){e.target.closest("[data-spoilers]")||l.forEach((e=>{const t=e.closest("[data-spoilers]"),s=spollersBlock.dataset.spoilersSpeed?parseInt(t.dataset.spoilersSpeed):500;e.classList.remove("_spoiler-active"),o(e.nextElementSibling,s)}))}))}})(),(()=>{const e=document.querySelectorAll("[data-original-height]");e.length&&window.innerWidth>768&&e.forEach((e=>{const t=e.dataset.visibleHeight,s=e.parentElement.querySelector("[data-showmore-btn]"),i=()=>{e.dataset.originalHeight=`${e.offsetHeight}px`,t&&(e.style.height=e.dataset.visibleHeight)};i(),s&&t&&s.addEventListener("click",(function(){e.parentElement.classList.contains("_show-all")?(e.parentElement.classList.remove("_show-all"),e.style.height=e.dataset.visibleHeight):(e.parentElement.classList.add("_show-all"),e.style.height=e.dataset.originalHeight)})),window.addEventListener("resize",i)}))})(),function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{viewPass:!1};const t=document.querySelectorAll("input[placeholder],textarea[placeholder]");t.length&&t.forEach((e=>{e.hasAttribute("data-placeholder-nohide")||(e.dataset.placeholder=e.placeholder)})),document.body.addEventListener("focusin",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=""),t.hasAttribute("data-no-focus-classes")||(t.classList.add("_form-focus"),t.parentElement.classList.add("_form-focus")),d.removeError(t))})),document.body.addEventListener("focusout",(function(e){const t=e.target;"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName||(t.dataset.placeholder&&(t.placeholder=t.dataset.placeholder),t.hasAttribute("data-no-focus-classes")||(t.classList.remove("_form-focus"),t.parentElement.classList.remove("_form-focus")),t.hasAttribute("data-validate")&&d.validateInput(t))})),e.viewPass&&document.addEventListener("click",(function(e){let t=e.target;if(t.closest('[class*="__viewpass"]')){let e=t.classList.contains("_viewpass-active")?"password":"text";t.parentElement.querySelector("input").setAttribute("type",e),t.classList.toggle("_viewpass-active")}}))}({viewPass:!1}),function(){const e=document.forms;if(e.length)for(const s of e)s.addEventListener("submit",(function(e){t(e.target,e)})),s.addEventListener("reset",(function(e){const t=e.target;d.formClean(t)}));async function t(e,t){if(0===(e.hasAttribute("data-no-validate")?0:d.getErrors(e))){if(e.hasAttribute("data-ajax")){t.preventDefault();const i=e.getAttribute("action")?e.getAttribute("action").trim():"#",r=e.getAttribute("method")?e.getAttribute("method").trim():"GET",n=new FormData(e);e.classList.add("_sending");const a=await fetch(i,{method:r,body:n});if(a.ok){let t=await a.json();e.classList.remove("_sending"),s(e,t)}else alert("error"),e.classList.remove("_sending")}else e.hasAttribute("data-dev")&&(t.preventDefault(),s(e))}else{t.preventDefault();const s=e.querySelector("._form-error");s&&e.hasAttribute("data-goto-error")&&gotoBlock(s,!0,1e3)}}function s(e){document.dispatchEvent(new CustomEvent("formSent",{detail:{form:e}})),d.formClean(e)}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,